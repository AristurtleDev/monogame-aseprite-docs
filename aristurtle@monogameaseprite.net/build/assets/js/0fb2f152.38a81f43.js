"use strict";(self.webpackChunkmonogame_aseprite_docs=self.webpackChunkmonogame_aseprite_docs||[]).push([[479],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=p(n),c=r,h=u["".concat(s,".").concat(c)]||u[c]||m[c]||i;return n?a.createElement(h,o(o({ref:t},d),{},{components:n})):a.createElement(h,o({ref:t},d))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},2712:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const i={id:"texture-atlas",title:"TextureAtlas",sidebar_label:"TextureAtlas"},o=void 0,l={unversionedId:"guides/texture-atlas",id:"guides/texture-atlas",title:"TextureAtlas",description:"The purpose of this document is to provide a guide for creating and using an instance of the TextureAtlas class.",source:"@site/docs/guides/texture-atlas.md",sourceDirName:"guides",slug:"/guides/texture-atlas",permalink:"/docs/guides/texture-atlas",draft:!1,editUrl:"https://github.com/aristurtledev/monogame-aseprite-docs/tree/main/packages/create-docusaurus/templates/shared/docs/guides/texture-atlas.md",tags:[],version:"current",frontMatter:{id:"texture-atlas",title:"TextureAtlas",sidebar_label:"TextureAtlas"},sidebar:"docsSidebar",previous:{title:"Sprite",permalink:"/docs/guides/sprite"},next:{title:"SpriteSheet",permalink:"/docs/guides/sprite-sheet"}},s={},p=[{value:"Overview",id:"overview",level:2},{value:"Creating a <code>Sprite</code>",id:"creating-a-sprite",level:2},{value:"From an <code>AsepriteFile</code>",id:"from-an-asepritefile",level:3},{value:"From the Constructor",id:"from-the-constructor",level:3},{value:"Retrieving a <code>TextureRegion</code>",id:"retrieving-a-textureregion",level:2},{value:"With the <code>this[]</code> Accessor",id:"with-the-this-accessor",level:3},{value:"With the <code>GetRegion</code> Methods",id:"with-the-getregion-methods",level:3},{value:"With the <code>TryGetRegion</code> Methods",id:"with-the-trygetregion-methods",level:3},{value:"Creating a <code>Sprite</code>",id:"creating-a-sprite-1",level:2},{value:"Conclusion",id:"conclusion",level:2},{value:"See Also",id:"see-also",level:2},{value:"References",id:"references",level:2}],d={toc:p},u="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The purpose of this document is to provide a guide for creating and using an instance of the ",(0,r.kt)("inlineCode",{parentName:"p"},"TextureAtlas")," class."),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"TextureAtlas")," class represents a single source image with zero or more named ",(0,r.kt)("inlineCode",{parentName:"p"},"TextureRegions"),". Each ",(0,r.kt)("inlineCode",{parentName:"p"},"TextureRegion")," represents a rectangular region within the source image. This provides a convenient method of using a single image packed with all of the frames from our Aseprite file where each frame is a separate ",(0,r.kt)("inlineCode",{parentName:"p"},"TextureRegion")," that we can access."),(0,r.kt)("h2",{id:"creating-a-sprite"},"Creating a ",(0,r.kt)("inlineCode",{parentName:"h2"},"Sprite")),(0,r.kt)("p",null,"A ",(0,r.kt)("inlineCode",{parentName:"p"},"TextureAtlas")," can be created using from an existing ",(0,r.kt)("inlineCode",{parentName:"p"},"AsepriteFile")," instance, or you can create one manually using its constructor with a ",(0,r.kt)("inlineCode",{parentName:"p"},"Texture2D"),". The following sections cover how to create a ",(0,r.kt)("inlineCode",{parentName:"p"},"TextureAtlas")," instance."),(0,r.kt)("h3",{id:"from-an-asepritefile"},"From an ",(0,r.kt)("inlineCode",{parentName:"h3"},"AsepriteFile")),(0,r.kt)("p",null,"If you have an existing ",(0,r.kt)("inlineCode",{parentName:"p"},"AsepriteFile")," instance, you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"TextureAtlasProcessor")," to create a new ",(0,r.kt)("inlineCode",{parentName:"p"},"TextureAtlas")," from the ",(0,r.kt)("inlineCode",{parentName:"p"},"AsepriteFile"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Add using statement")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"using MonoGame.Aseprite.Sprites;\nusing MonoGame.Aseprite.Content.Processors;\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Create the TextureAtlas")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'protected override LoadContent()\n{\n    //  Load the Aseprite file\n    AsepriteFile aseFile = AsepriteFile.Load("path/to/file");\n\n    //  Create the texture atlas using the TextureAtlasProcessor\n    TextureAtlas atlas = TextureAtlasProcessor.Process(GraphicsDevice, aseFile);\n}\n')),(0,r.kt)("p",null,"Additionally, there are several optional parameters that can be included when create a ",(0,r.kt)("inlineCode",{parentName:"p"},"TextureAtlas")," using the ",(0,r.kt)("inlineCode",{parentName:"p"},"TextureAtlasProcessor")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Optional Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Summary"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"onlyVisibleLayers")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"true")),(0,r.kt)("td",{parentName:"tr",align:null},"Indicates whether only cels on visible layers should be included.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"includeBackgroundLayer")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"false")),(0,r.kt)("td",{parentName:"tr",align:null},"Indicates whether cels on a layer marked as a background layer should be included.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"includeTilemapLayers")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"true")),(0,r.kt)("td",{parentName:"tr",align:null},"Indicates whether cels on tilemap layers should be included.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"mergedDuplicates")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"true")),(0,r.kt)("td",{parentName:"tr",align:null},"Indicates whether duplicate frames should be merged into a single frame in the generated source image.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"borderPadding")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"0")),(0,r.kt)("td",{parentName:"tr",align:null},"The amount of transparent pixels add to the edges of the generated source image")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"spacing")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"0")),(0,r.kt)("td",{parentName:"tr",align:null},"The amount of transparent pixels to add between each texture region in the generated source image.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"innerPadding")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"0")),(0,r.kt)("td",{parentName:"tr",align:null},"The amount of transparent pixels to add around each texture region in the generated image.")))),(0,r.kt)("p",null,"The following example shows creating a ",(0,r.kt)("inlineCode",{parentName:"p"},"TextureAtlas")," using the ",(0,r.kt)("inlineCode",{parentName:"p"},"TextureAtlasProcessor")," while supplying the additional optional parameters:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'protected override void LoadContent()\n{\n    //  Load the Aseprite file\n    AsepriteFile aseFile = AsepriteFile.Load("path/to/file");\n\n    //  Example using all optional parameters with their defaults\n    TextureAtlas atlas = TextureAtlasProcessor.Process(GraphicsDevice, aseFile\n                                                       onlyVisibleLayers: true,\n                                                       includeBackgroundLayer: false,\n                                                       includeTilemapLayers: true,\n                                                       mergeDuplicates: true,\n                                                       borderPadding: 0,\n                                                       spacing: 0,\n                                                       innerPadding 0);\n\n}\n')),(0,r.kt)("h3",{id:"from-the-constructor"},"From the Constructor"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"TextureAtlas")," class is not limited to only being used with the ",(0,r.kt)("inlineCode",{parentName:"p"},"MonoGame.Aseprite")," library. It provides a constructor you can use to create an instance manually from any ",(0,r.kt)("inlineCode",{parentName:"p"},"Texture2D")," that you have loaded prior. It also provided methods for adding the ",(0,r.kt)("inlineCode",{parentName:"p"},"TextureRegion")," elements manually to the ",(0,r.kt)("inlineCode",{parentName:"p"},"TextureAtlas"),"."),(0,r.kt)("p",null,"The follow code demonstrates creating an instance of the ",(0,r.kt)("inlineCode",{parentName:"p"},"TextureAtlas")," class from a ",(0,r.kt)("inlineCode",{parentName:"p"},"Texture2D")," and adding the ",(0,r.kt)("inlineCode",{parentName:"p"},"TextureRegions")," to the atlas."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Add using statement")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"using MonoGame.Aseprite.Sprites;\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Create TextureAtlas using the constructor")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'protected override LoadContent()\n{\n    //  Load your Texture2D\n    Texture2D texture = Content.Load<Texture2D>("myTexture");\n\n    //  Create the texture atlas\n    TextureAtlas atlas = new("myAtlas", texture);\n\n    //  Add texture regions to the atlas\n    //  The CreateRegion method provides three overloads\n    atlas.CreateRegion("region 0", x: 0, y: 0, width: 10, height: 10);\n    atlas.CreateRegion("region 1", location: new Point(0, 10), size: new Point(10, 10));\n    atlas.CreateRegion("region 2", bounds: new Rectangle(10, 0, 10, 10));\n}\n\n')),(0,r.kt)("h2",{id:"retrieving-a-textureregion"},"Retrieving a ",(0,r.kt)("inlineCode",{parentName:"h2"},"TextureRegion")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"TextureAtlas")," class provides several methods for retrieving a ",(0,r.kt)("inlineCode",{parentName:"p"},"TextureRegion")," that was added to the ",(0,r.kt)("inlineCode",{parentName:"p"},"TextureAtlas"),"."),(0,r.kt)("h3",{id:"with-the-this-accessor"},"With the ",(0,r.kt)("inlineCode",{parentName:"h3"},"this[]")," Accessor"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"TextureAtlas")," class provides two ",(0,r.kt)("inlineCode",{parentName:"p"},"this[]")," accessor for retrieving a `TextureRegion."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"//  Get the texture region by index\nTextureRegion textureRegion = atlas[0];\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'//  Get the texture region by name\nTextureRegion textureRegion = atlas["region 0"];\n')),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"this[int]")," accessor will throw an ",(0,r.kt)("inlineCode",{parentName:"p"},"ArgumentOutOfRangeException")," if the index given is less than zero or greater than or equal to the total texture regions in the atlas."),(0,r.kt)("p",{parentName:"admonition"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"this(string)")," accessor will throw a ",(0,r.kt)("inlineCode",{parentName:"p"},"KeyNotFoundException")," if the texture atlas does not contain a texture region with the name given."),(0,r.kt)("p",{parentName:"admonition"},"Both of these methods have complimentary ",(0,r.kt)("inlineCode",{parentName:"p"},"TryGetRegion")," methods, discussed below that do not throw exceptions.")),(0,r.kt)("h3",{id:"with-the-getregion-methods"},"With the ",(0,r.kt)("inlineCode",{parentName:"h3"},"GetRegion")," Methods"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"TextureAtlas")," class also provides the ",(0,r.kt)("inlineCode",{parentName:"p"},"GetRegion(int)")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"GetRegion(string)")," methods for retrieving a ",(0,r.kt)("inlineCode",{parentName:"p"},"TextureRegion")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"//  Get the texture region by index\nTextureRegion textureRegion = atlas.GetRegion(0);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'//  Get the texture region by name\nTextureRegion textureRegion = atlas.GetRegion("region 0");\n')),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"GetRegion(int)")," method will throw an ",(0,r.kt)("inlineCode",{parentName:"p"},"ArgumentOutOfRangeException")," if the index given is less than zero or greater than or equal to the total texture regions in the atlas."),(0,r.kt)("p",{parentName:"admonition"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"GetRegion(string)")," method will throw a ",(0,r.kt)("inlineCode",{parentName:"p"},"KeyNotFoundException")," if the texture atlas does not contain a texture region with the name given."),(0,r.kt)("p",{parentName:"admonition"},"Both of these methods have complimentary ",(0,r.kt)("inlineCode",{parentName:"p"},"TryGetRegion")," methods, discussed below that do not throw exceptions.")),(0,r.kt)("h3",{id:"with-the-trygetregion-methods"},"With the ",(0,r.kt)("inlineCode",{parentName:"h3"},"TryGetRegion")," Methods"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"TextureAtlas")," also provides the ",(0,r.kt)("inlineCode",{parentName:"p"},"TryGetRegion(int, out TextureRegion?)")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"TryGetRegion(string, out TextureRegion?)")," methods for retrieving a ",(0,r.kt)("inlineCode",{parentName:"p"},"TextureRegion"),". Unlike the previous methods mentioned, these do not throw an exception if the index or name provided are invalid. Instead, both return a ",(0,r.kt)("inlineCode",{parentName:"p"},"boolean")," value that indicates if locating the ",(0,r.kt)("inlineCode",{parentName:"p"},"TextureRegion")," was successful, and an ",(0,r.kt)("inlineCode",{parentName:"p"},"out TextureRegion?")," parameter that contains the ",(0,r.kt)("inlineCode",{parentName:"p"},"TextureRegion")," located when successful."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"//  Try to get the texture region by index\nif(atlas.TryGetRegion(0, out TextureRegion? textureRegion))\n{\n    //  Do something with the texture region\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'//  Try to get the texture region by name\nif(atlas.TryGetRegion("region 0", out TextureRegion? textureRegion))\n{\n    //  Do something with the texture region\n}\n')),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Both of the ",(0,r.kt)("inlineCode",{parentName:"p"},"TryGetRegion")," methods decorate the ",(0,r.kt)("inlineCode",{parentName:"p"},"out")," parameter using the ",(0,r.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.codeanalysis.notnullwhenattribute?view=net-7.0"},"[NotNullWhen(true)] attribute"),". This means if you are using ",(0,r.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/dotnet/csharp/nullable-references#nullable-contexts"},"Nullable Context")," in your project, then the ",(0,r.kt)("inlineCode",{parentName:"p"},"TextureRegion")," is guaranteed to not be ",(0,r.kt)("inlineCode",{parentName:"p"},"null")," when the method returns true and provides to correct context for the compiler and analyzers.")),(0,r.kt)("h2",{id:"creating-a-sprite-1"},"Creating a ",(0,r.kt)("inlineCode",{parentName:"h2"},"Sprite")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"TextureAtlas")," also provides methods for creating an instance of the ",(0,r.kt)("inlineCode",{parentName:"p"},"Sprite")," class from one of the ",(0,r.kt)("inlineCode",{parentName:"p"},"TextureRegions")," that have been added. The following demonstrates how to do this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"//  Create the sprite from the texture region at index 0;\nSprite sprite = atlas.CreateSprite(0)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'//  Create the sprite from the texture region by name\nSprite sprite = atlas.CreateSprite("region 0");\n')),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Both of the ",(0,r.kt)("inlineCode",{parentName:"p"},"CreateSprite")," methods have overloads that also allow you to specified the name to assign the sprite for the ",(0,r.kt)("inlineCode",{parentName:"p"},"Sprite.Name")," property. If no name is specified, then the ",(0,r.kt)("inlineCode",{parentName:"p"},"Sprite")," will be assigned the name of the ",(0,r.kt)("inlineCode",{parentName:"p"},"TextureRegion")," used to created it.")),(0,r.kt)("h2",{id:"conclusion"},"Conclusion"),(0,r.kt)("p",null,"In this document was went over how to create an instance of the ",(0,r.kt)("inlineCode",{parentName:"p"},"TextureAtlas")," class, how to add ",(0,r.kt)("inlineCode",{parentName:"p"},"TextureRegion")," elements to an instance, and how to retrieve a ",(0,r.kt)("inlineCode",{parentName:"p"},"TextureRegion")," element from it.  We also showed how to create a new ",(0,r.kt)("inlineCode",{parentName:"p"},"Sprite")," instance from the ",(0,r.kt)("inlineCode",{parentName:"p"},"TextureAtlas"),".  Below you can find links to additional guides for the types that were mentioned in this document and and reference links for the ",(0,r.kt)("inlineCode",{parentName:"p"},"TextureAtlas")," class."),(0,r.kt)("h2",{id:"see-also"},"See Also"),(0,r.kt)("p",null,"The following classes are referenced in this document and the links to their guides are provided below."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"[AsepriteFile]"),(0,r.kt)("li",{parentName:"ul"},"[TextureRegion]"),(0,r.kt)("li",{parentName:"ul"},"[Sprite]")),(0,r.kt)("h2",{id:"references"},"References"),(0,r.kt)("p",null,"Refer to the ","[TextureAtlas API]"," for more information on the properties and methods of the ",(0,r.kt)("inlineCode",{parentName:"p"},"TextureAtlas")," class."))}m.isMDXComponent=!0}}]);