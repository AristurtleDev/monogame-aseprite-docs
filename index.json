{
  "api/MonoGame.Aseprite.AnimatedSprite.CurrentFrame.html": {
    "href": "api/MonoGame.Aseprite.AnimatedSprite.CurrentFrame.html",
    "title": "Property CurrentFrame | MonoGame Aseprite",
    "keywords": "Property CurrentFrame Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll CurrentFrame Gets the source AnimationFrame of the current frame of animation for this AnimatedSprite. public AnimationFrame CurrentFrame { get; } Property Value AnimationFrame"
  },
  "api/MonoGame.Aseprite.AnimatedSprite.CurrentFrameTimeRemaining.html": {
    "href": "api/MonoGame.Aseprite.AnimatedSprite.CurrentFrameTimeRemaining.html",
    "title": "Property CurrentFrameTimeRemaining | MonoGame Aseprite",
    "keywords": "Property CurrentFrameTimeRemaining Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll CurrentFrameTimeRemaining Gets the amount of time remaining for the CurrentFrame before moving to the next frame. public TimeSpan CurrentFrameTimeRemaining { get; } Property Value TimeSpan"
  },
  "api/MonoGame.Aseprite.AnimatedSprite.FrameCount.html": {
    "href": "api/MonoGame.Aseprite.AnimatedSprite.FrameCount.html",
    "title": "Property FrameCount | MonoGame Aseprite",
    "keywords": "Property FrameCount Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll FrameCount Gets the total number of frames in this AnimatedSprite public int FrameCount { get; } Property Value int"
  },
  "api/MonoGame.Aseprite.AnimatedSprite.IsAnimating.html": {
    "href": "api/MonoGame.Aseprite.AnimatedSprite.IsAnimating.html",
    "title": "Property IsAnimating | MonoGame Aseprite",
    "keywords": "Property IsAnimating Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll IsAnimating Gets a value that indicates if this AnimatedSprite has completed its animation. public bool IsAnimating { get; } Property Value bool"
  },
  "api/MonoGame.Aseprite.AnimatedSprite.IsPaused.html": {
    "href": "api/MonoGame.Aseprite.AnimatedSprite.IsPaused.html",
    "title": "Property IsPaused | MonoGame Aseprite",
    "keywords": "Property IsPaused Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll IsPaused Gets a value that indicates if this AnimatedSprite is currently paused. public bool IsPaused { get; } Property Value bool"
  },
  "api/MonoGame.Aseprite.AnimatedSprite.IsPingPong.html": {
    "href": "api/MonoGame.Aseprite.AnimatedSprite.IsPingPong.html",
    "title": "Property IsPingPong | MonoGame Aseprite",
    "keywords": "Property IsPingPong Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll IsPingPong Gets or Sets a value that indicates if this AnimatedSprite should ping-pong once reaching the last frame of animation. public bool IsPingPong { get; set; } Property Value bool"
  },
  "api/MonoGame.Aseprite.AnimatedSprite.IsReversed.html": {
    "href": "api/MonoGame.Aseprite.AnimatedSprite.IsReversed.html",
    "title": "Property IsReversed | MonoGame Aseprite",
    "keywords": "Property IsReversed Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll IsReversed Gets or Sets a value that indicates if this AnimatedSprite plays it's frames in reverse order. public bool IsReversed { get; set; } Property Value bool"
  },
  "api/MonoGame.Aseprite.AnimatedSprite.LoopCount.html": {
    "href": "api/MonoGame.Aseprite.AnimatedSprite.LoopCount.html",
    "title": "Property LoopCount | MonoGame Aseprite",
    "keywords": "Property LoopCount Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll LoopCount Gets a value that indicates the total number of loops/cycles of the animation that should play for this AnimatedSprite. public int LoopCount { get; } Property Value int Remarks 0 = infinite looping If IsPingPong is equal to true, each direction of the ping-pong will count as a loop."
  },
  "api/MonoGame.Aseprite.AnimatedSprite.OnAnimationBegin.html": {
    "href": "api/MonoGame.Aseprite.AnimatedSprite.OnAnimationBegin.html",
    "title": "Property OnAnimationBegin | MonoGame Aseprite",
    "keywords": "Property OnAnimationBegin Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll OnAnimationBegin Gets or Sets an Action method to invoke at the start of the animation. public Action<AnimatedSprite>? OnAnimationBegin { get; set; } Property Value Action<AnimatedSprite> Remarks This will trigger only once when the animation starts before the the first frame's OnFrameBegin triggers."
  },
  "api/MonoGame.Aseprite.AnimatedSprite.OnAnimationEnd.html": {
    "href": "api/MonoGame.Aseprite.AnimatedSprite.OnAnimationEnd.html",
    "title": "Property OnAnimationEnd | MonoGame Aseprite",
    "keywords": "Property OnAnimationEnd Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll OnAnimationEnd Gets or Sets an Action method to invoke when the animation ends. public Action<AnimatedSprite>? OnAnimationEnd { get; set; } Property Value Action<AnimatedSprite> Remarks This will only trigger when the animation ends in a non-looping animation, or if a looping animation is stopped by calling Stop() manually."
  },
  "api/MonoGame.Aseprite.AnimatedSprite.OnAnimationLoop.html": {
    "href": "api/MonoGame.Aseprite.AnimatedSprite.OnAnimationLoop.html",
    "title": "Property OnAnimationLoop | MonoGame Aseprite",
    "keywords": "Property OnAnimationLoop Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll OnAnimationLoop Gets or Sets an Action to invoke each time the animation loops. public Action<AnimatedSprite>? OnAnimationLoop { get; set; } Property Value Action<AnimatedSprite> Remarks This will trigger each time the animation loops after the last frame's OnFrameEnd triggers."
  },
  "api/MonoGame.Aseprite.AnimatedSprite.OnFrameBegin.html": {
    "href": "api/MonoGame.Aseprite.AnimatedSprite.OnFrameBegin.html",
    "title": "Property OnFrameBegin | MonoGame Aseprite",
    "keywords": "Property OnFrameBegin Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll OnFrameBegin Gets or Sets an Action method to invoke at the start of each frame of animation. public Action<AnimatedSprite>? OnFrameBegin { get; set; } Property Value Action<AnimatedSprite>"
  },
  "api/MonoGame.Aseprite.AnimatedSprite.OnFrameEnd.html": {
    "href": "api/MonoGame.Aseprite.AnimatedSprite.OnFrameEnd.html",
    "title": "Property OnFrameEnd | MonoGame Aseprite",
    "keywords": "Property OnFrameEnd Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll OnFrameEnd Gets or Sets an Action method to invoke at the end of each frame of animation. public Action<AnimatedSprite>? OnFrameEnd { get; set; } Property Value Action<AnimatedSprite>"
  },
  "api/MonoGame.Aseprite.AnimatedSprite.Pause.html": {
    "href": "api/MonoGame.Aseprite.AnimatedSprite.Pause.html",
    "title": "Method Pause | MonoGame Aseprite",
    "keywords": "Method Pause Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll Pause(bool) Paused this AnimatedSprite and prevents it from being updated until it is unpaused. public bool Pause(bool resetFrameDuration = false) Parameters resetFrameDuration bool A value that indicates whether the CurrentFrameTimeRemaining should be reset. When this method returns false, this indicates the CurrentFrameTimeRemaining was not reset even if this was specified as true. Returns bool true if this AnimatedSprite was successfully paused; otherwise, false. This method returns false if this AnimatedSprite is not currently animating or if it is already paused."
  },
  "api/MonoGame.Aseprite.AnimatedSprite.Play.html": {
    "href": "api/MonoGame.Aseprite.AnimatedSprite.Play.html",
    "title": "Method Play | MonoGame Aseprite",
    "keywords": "Method Play Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll Play(int?, int?) Starts the animation for this AnimatedSprite public bool Play(int? loopCount = null, int? startingFrame = 0) Parameters loopCount int? When a value is provided, specifies the total number of loop/cycles to perform before stopping the animation. When null is provided, loop count will default to the value defined in the AnimationTag used to create this AnimatedSprite 0 = infinite looping If IsPingPong is equal to true, each direction of the ping-pong will count as a loop. startingFrame int? When this value is provided, specifies the frame to start the animation at When null is provided, play will start at frame 0 of the animation. Returns bool true if animation play was successfully started for this AnimatedSprite; otherwise, false. This method returns false if the animation is already playing (when IsAnimating equals true). Exceptions ArgumentOutOfRangeException Thrown if the startingFrame value provided is less than zero or is greater than or equal to the total number of frames in this AnimatedSprite."
  },
  "api/MonoGame.Aseprite.AnimatedSprite.Reset.html": {
    "href": "api/MonoGame.Aseprite.AnimatedSprite.Reset.html",
    "title": "Method Reset | MonoGame Aseprite",
    "keywords": "Method Reset Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll Reset() Resets this AnimatedSprite back to its initial state as defined by the AnimationTag used to create it. You will need to call Play(int?, int?) after resetting to start the playback of the animation. public void Reset() Remarks This is useful if you've adjusted the IsReversed or IsPingPong properties, or specified a override to the loop count when initially playing the animation. This also resets the Speed to 1.0d."
  },
  "api/MonoGame.Aseprite.AnimatedSprite.SetFrame.html": {
    "href": "api/MonoGame.Aseprite.AnimatedSprite.SetFrame.html",
    "title": "Method SetFrame | MonoGame Aseprite",
    "keywords": "Method SetFrame Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll SetFrame(int) Sets the current frame of animation for this AnimatedSprite. public void SetFrame(int frameIndex) Parameters frameIndex int The index of the frame to set. Value must be greater than zero and less than the total count of frames. You can use FrameCount to determine the total number of frames. Exceptions ArgumentOutOfRangeException Thrown if the frameIndex value provided is less than zero or is greater than or equal to the total number of frames in this AnimatedSprite."
  },
  "api/MonoGame.Aseprite.AnimatedSprite.Speed.html": {
    "href": "api/MonoGame.Aseprite.AnimatedSprite.Speed.html",
    "title": "Property Speed | MonoGame Aseprite",
    "keywords": "Property Speed Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll Speed Sets the rate at which the animation is played. public double Speed { get; set; } Property Value double Remarks This value is clamped between 0.0d and MaxValue Default (normal) speed is 1.0d"
  },
  "api/MonoGame.Aseprite.AnimatedSprite.Stop.html": {
    "href": "api/MonoGame.Aseprite.AnimatedSprite.Stop.html",
    "title": "Method Stop | MonoGame Aseprite",
    "keywords": "Method Stop Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll Stop() Stops this AnimatedSprite on the current frame. public bool Stop() Returns bool true if this AnimatedSprite was successfully stopped; otherwise, false. This method returns false if this AnimatedSprite is not currently animating. If this method returns false, this also indicates that the OnAnimationEnd was not triggered. Remarks This will trigger the OnAnimationEnd action if one was set."
  },
  "api/MonoGame.Aseprite.AnimatedSprite.Unpause.html": {
    "href": "api/MonoGame.Aseprite.AnimatedSprite.Unpause.html",
    "title": "Method Unpause | MonoGame Aseprite",
    "keywords": "Method Unpause Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll Unpause(bool) Unpaused this AnimatedSprite. public bool Unpause(bool advanceToNextFrame = false) Parameters advanceToNextFrame bool A value that indicates whether this AnimatedSprite should immediately advance to the next frame after unpausing. When this method returns false, this AnimatedSprite will -not- be advanced to the next frame, even if this was specified as true. Returns bool true if this AnimatedSprite was successfully unpaused; otherwise, false. This method returns false if this AnimatedSprite is not currently animating or if it is not paused."
  },
  "api/MonoGame.Aseprite.AnimatedSprite.Update.html": {
    "href": "api/MonoGame.Aseprite.AnimatedSprite.Update.html",
    "title": "Method Update | MonoGame Aseprite",
    "keywords": "Method Update Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll Update(double) Updates this AnimatedSprite. public void Update(double deltaTimeInSeconds) Parameters deltaTimeInSeconds double The amount of time, in seconds, that have elapsed since the last update cycle in the game. Remarks This should only be called once per update cycle. Update(GameTime) Updates this AnimatedSprite. public void Update(GameTime gameTime) Parameters gameTime GameTime A snapshot of the game timing values for the current update cycle. Remarks This should only be called once per update cycle. Update(in TimeSpan) Updates this AnimatedSprite. public void Update(in TimeSpan elapsedTime) Parameters elapsedTime TimeSpan The amount of time, that have elapsed since the last update cycle in the game. Remarks This should only be called once per update cycle."
  },
  "api/MonoGame.Aseprite.AnimatedSprite.html": {
    "href": "api/MonoGame.Aseprite.AnimatedSprite.html",
    "title": "Class AnimatedSprite | MonoGame Aseprite",
    "keywords": "Class AnimatedSprite Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll Defines an animated sprite with methods to control the playing of the sprite animation. public sealed class AnimatedSprite : Sprite Inheritance object Sprite AnimatedSprite Inherited Members Sprite.Name Sprite.TextureRegion Sprite.Width Sprite.Height Sprite.Color Sprite.Transparency Sprite.Rotation Sprite.Origin Sprite.OriginX Sprite.OriginY Sprite.Scale Sprite.ScaleX Sprite.ScaleY Sprite.SpriteEffects Sprite.FlipHorizontally Sprite.FlipVertically Sprite.LayerDepth Sprite.IsVisible Sprite.Draw(SpriteBatch, Vector2) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties CurrentFrame Gets the source AnimationFrame of the current frame of animation for this AnimatedSprite. CurrentFrameTimeRemaining Gets the amount of time remaining for the CurrentFrame before moving to the next frame. FrameCount Gets the total number of frames in this AnimatedSprite IsAnimating Gets a value that indicates if this AnimatedSprite has completed its animation. IsPaused Gets a value that indicates if this AnimatedSprite is currently paused. IsPingPong Gets or Sets a value that indicates if this AnimatedSprite should ping-pong once reaching the last frame of animation. IsReversed Gets or Sets a value that indicates if this AnimatedSprite plays it's frames in reverse order. LoopCount Gets a value that indicates the total number of loops/cycles of the animation that should play for this AnimatedSprite. OnAnimationBegin Gets or Sets an Action method to invoke at the start of the animation. OnAnimationEnd Gets or Sets an Action method to invoke when the animation ends. OnAnimationLoop Gets or Sets an Action to invoke each time the animation loops. OnFrameBegin Gets or Sets an Action method to invoke at the start of each frame of animation. OnFrameEnd Gets or Sets an Action method to invoke at the end of each frame of animation. Speed Sets the rate at which the animation is played. Methods Pause(bool) Paused this AnimatedSprite and prevents it from being updated until it is unpaused. Play(int?, int?) Starts the animation for this AnimatedSprite Reset() Resets this AnimatedSprite back to its initial state as defined by the AnimationTag used to create it. You will need to call Play(int?, int?) after resetting to start the playback of the animation. SetFrame(int) Sets the current frame of animation for this AnimatedSprite. Stop() Stops this AnimatedSprite on the current frame. Unpause(bool) Unpaused this AnimatedSprite. Update(GameTime) Updates this AnimatedSprite. Update(double) Updates this AnimatedSprite. Update(in TimeSpan) Updates this AnimatedSprite."
  },
  "api/MonoGame.Aseprite.AnimatedTilemap.-ctor.html": {
    "href": "api/MonoGame.Aseprite.AnimatedTilemap.-ctor.html",
    "title": "Constructor AnimatedTilemap | MonoGame Aseprite",
    "keywords": "Constructor AnimatedTilemap Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll AnimatedTilemap(string, bool, bool, bool) Initializes a new instance of the AnimatedTilemap class. public AnimatedTilemap(string name, bool isLooping = true, bool isReversed = false, bool isPingPong = false) Parameters name string The name to assign the AnimatedTilemap. isLooping bool Indicates whether the animation for the AnimatedTilemap should loop isReversed bool Indicates whether the frames for the AnimatedTilemap should play in reverse order. isPingPong bool Indicates whether the animation for this AnimatedTilemap should ping-pong once reaching the last frame of animation"
  },
  "api/MonoGame.Aseprite.AnimatedTilemap.AddFrame.html": {
    "href": "api/MonoGame.Aseprite.AnimatedTilemap.AddFrame.html",
    "title": "Method AddFrame | MonoGame Aseprite",
    "keywords": "Method AddFrame Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll AddFrame(AnimatedTilemapFrame) Adds the given AnimatedTilemapFrame as the next frame of animation in this AnimatedTilemap. public void AddFrame(AnimatedTilemapFrame frame) Parameters frame AnimatedTilemapFrame The AnimatedTilemapFrame to add"
  },
  "api/MonoGame.Aseprite.AnimatedTilemap.Clear.html": {
    "href": "api/MonoGame.Aseprite.AnimatedTilemap.Clear.html",
    "title": "Method Clear | MonoGame Aseprite",
    "keywords": "Method Clear Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll Clear() Removes all AnimatedTilemapFrame elements from this AnimatedTilemap. public void Clear()"
  },
  "api/MonoGame.Aseprite.AnimatedTilemap.CreateFrame.html": {
    "href": "api/MonoGame.Aseprite.AnimatedTilemap.CreateFrame.html",
    "title": "Method CreateFrame | MonoGame Aseprite",
    "keywords": "Method CreateFrame Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll CreateFrame(TimeSpan) Creates and adds a new AnimatedTilemapFrame element as the next frame of animation in this AnimatedTilemap. public AnimatedTilemapFrame CreateFrame(TimeSpan duration) Parameters duration TimeSpan The duration to assign the AnimatedTilemapFrame created. Returns AnimatedTilemapFrame The AnimatedTilemapFrame created."
  },
  "api/MonoGame.Aseprite.AnimatedTilemap.CurrentFrame.html": {
    "href": "api/MonoGame.Aseprite.AnimatedTilemap.CurrentFrame.html",
    "title": "Property CurrentFrame | MonoGame Aseprite",
    "keywords": "Property CurrentFrame Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll CurrentFrame Gets the source AnimatedTilemapFrame element for the current animation frame. public AnimatedTilemapFrame CurrentFrame { get; } Property Value AnimatedTilemapFrame Exceptions InvalidOperationException Thrown if no AnimatedTilemapFrame elements have been added to this AnimatedTilemap prior to accessing this property."
  },
  "api/MonoGame.Aseprite.AnimatedTilemap.CurrentFrameTimeRemaining.html": {
    "href": "api/MonoGame.Aseprite.AnimatedTilemap.CurrentFrameTimeRemaining.html",
    "title": "Property CurrentFrameTimeRemaining | MonoGame Aseprite",
    "keywords": "Property CurrentFrameTimeRemaining Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll CurrentFrameTimeRemaining Gets the amount of time remaining for the CurrentFrame before moving to the next frame. public TimeSpan CurrentFrameTimeRemaining { get; } Property Value TimeSpan"
  },
  "api/MonoGame.Aseprite.AnimatedTilemap.Draw.html": {
    "href": "api/MonoGame.Aseprite.AnimatedTilemap.Draw.html",
    "title": "Method Draw | MonoGame Aseprite",
    "keywords": "Method Draw Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll Draw(SpriteBatch, Vector2, Color) Draws this AnimatedTilemap using the Microsoft.Xna.Framework.Graphics.SpriteBatch. public void Draw(SpriteBatch spriteBatch, Vector2 position, Color color) Parameters spriteBatch SpriteBatch The Microsoft.Xna.Framework.Graphics.SpriteBatch to use for rendering this AnimatedTilemap. position Vector2 The x- and y-coordinate location to render this AnimatedTilemap at. color Color The color mask to apply when rendering this AnimatedTilemap. Draw(SpriteBatch, Vector2, Color, float, float) Draws this AnimatedTilemap using the Microsoft.Xna.Framework.Graphics.SpriteBatch. public void Draw(SpriteBatch spriteBatch, Vector2 position, Color color, float scale, float layerDepth) Parameters spriteBatch SpriteBatch The Microsoft.Xna.Framework.Graphics.SpriteBatch to use for rendering this AnimatedTilemap. position Vector2 The x- and y-coordinate location to render this AnimatedTilemap at. color Color The color mask to apply when rendering this AnimatedTilemap. scale float The amount of scaling to apply when rendering this AnimatedTilemap. layerDepth float The layer depth to apply when rendering this AnimatedTilemap. Draw(SpriteBatch, Vector2, Color, Vector2, float) Draws this AnimatedTilemap using the Microsoft.Xna.Framework.Graphics.SpriteBatch. public void Draw(SpriteBatch spriteBatch, Vector2 position, Color color, Vector2 scale, float layerDepth) Parameters spriteBatch SpriteBatch The Microsoft.Xna.Framework.Graphics.SpriteBatch to use for rendering the AnimatedTilemap. position Vector2 The x- and y-coordinate location to render this AnimatedTilemap at. color Color The color mask to apply when rendering this AnimatedTilemap. scale Vector2 The amount of scaling to apply when rendering this AnimatedTilemap. layerDepth float The layer depth to apply when rendering this AnimatedTilemap."
  },
  "api/MonoGame.Aseprite.AnimatedTilemap.GetEnumerator.html": {
    "href": "api/MonoGame.Aseprite.AnimatedTilemap.GetEnumerator.html",
    "title": "Method GetEnumerator | MonoGame Aseprite",
    "keywords": "Method GetEnumerator Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll GetEnumerator() Returns an enumerator that iterates through the collection. public IEnumerator<AnimatedTilemapFrame> GetEnumerator() Returns IEnumerator<AnimatedTilemapFrame> An enumerator that can be used to iterate through the collection."
  },
  "api/MonoGame.Aseprite.AnimatedTilemap.GetFrame.html": {
    "href": "api/MonoGame.Aseprite.AnimatedTilemap.GetFrame.html",
    "title": "Method GetFrame | MonoGame Aseprite",
    "keywords": "Method GetFrame Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll GetFrame(int) Gets the AnimatedTilemapFrame element at the specified index in this AnimatedTilemap. public AnimatedTilemapFrame GetFrame(int frameIndex) Parameters frameIndex int The index of the AnimatedTilemapFrame element to locate. Returns AnimatedTilemapFrame The AnimatedTilemapFrame element that was located. Exceptions ArgumentOutOfRangeException Thrown if the specified index is less than zero or is greater than or equal to the total number of AnimatedTilemapFrame elements in this AnimatedTilemap."
  },
  "api/MonoGame.Aseprite.AnimatedTilemap.IsAnimating.html": {
    "href": "api/MonoGame.Aseprite.AnimatedTilemap.IsAnimating.html",
    "title": "Property IsAnimating | MonoGame Aseprite",
    "keywords": "Property IsAnimating Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll IsAnimating Gets a value that indicates if this AnimatedTilemap is currently animating. public bool IsAnimating { get; } Property Value bool"
  },
  "api/MonoGame.Aseprite.AnimatedTilemap.IsLooping.html": {
    "href": "api/MonoGame.Aseprite.AnimatedTilemap.IsLooping.html",
    "title": "Property IsLooping | MonoGame Aseprite",
    "keywords": "Property IsLooping Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll IsLooping Gets a value that indicates whether the animation this AnimatedTilemap should loop. public bool IsLooping { get; } Property Value bool"
  },
  "api/MonoGame.Aseprite.AnimatedTilemap.IsPaused.html": {
    "href": "api/MonoGame.Aseprite.AnimatedTilemap.IsPaused.html",
    "title": "Property IsPaused | MonoGame Aseprite",
    "keywords": "Property IsPaused Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll IsPaused Gets a value that indicates if this AnimatedTilemap is currently paused. public bool IsPaused { get; } Property Value bool"
  },
  "api/MonoGame.Aseprite.AnimatedTilemap.IsPingPong.html": {
    "href": "api/MonoGame.Aseprite.AnimatedTilemap.IsPingPong.html",
    "title": "Property IsPingPong | MonoGame Aseprite",
    "keywords": "Property IsPingPong Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll IsPingPong Gets a value that indicates whether the animation for this AnimatedTilemap should ping-pong once reaching the last frame of animation. public bool IsPingPong { get; } Property Value bool"
  },
  "api/MonoGame.Aseprite.AnimatedTilemap.IsReversed.html": {
    "href": "api/MonoGame.Aseprite.AnimatedTilemap.IsReversed.html",
    "title": "Property IsReversed | MonoGame Aseprite",
    "keywords": "Property IsReversed Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll IsReversed Gets a value that indicates whether the animation this AnimatedTilemap should play frames in reverse order. public bool IsReversed { get; } Property Value bool"
  },
  "api/MonoGame.Aseprite.AnimatedTilemap.Item.html": {
    "href": "api/MonoGame.Aseprite.AnimatedTilemap.Item.html",
    "title": "Property this | MonoGame Aseprite",
    "keywords": "Property this Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll this[int] Gets the AnimatedTilemapFrame element at the specified index in this AnimatedTilemap. public AnimatedTilemapFrame this[int frameIndex] { get; } Parameters frameIndex int The index of the AnimatedTilemapFrame element to locate. Property Value AnimatedTilemapFrame The AnimatedTilemapFrame element that was located at the specified index in this AnimatedTilemap. Exceptions ArgumentOutOfRangeException Thrown if the specified index is less than zero or is greater than or equal to the total number of AnimatedTilemapFrame elements in this AnimatedTilemap."
  },
  "api/MonoGame.Aseprite.AnimatedTilemap.Name.html": {
    "href": "api/MonoGame.Aseprite.AnimatedTilemap.Name.html",
    "title": "Property Name | MonoGame Aseprite",
    "keywords": "Property Name Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll Name Gets the name assigned to this AnimatedTilemap. public string Name { get; } Property Value string"
  },
  "api/MonoGame.Aseprite.AnimatedTilemap.OnAnimationBegin.html": {
    "href": "api/MonoGame.Aseprite.AnimatedTilemap.OnAnimationBegin.html",
    "title": "Property OnAnimationBegin | MonoGame Aseprite",
    "keywords": "Property OnAnimationBegin Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll OnAnimationBegin Gets or Sets an Action method to invoke at the start of the animation. This will trigger only once when the animation starts before the first frame's OnFrameBegin triggers. public Action<AnimatedTilemap>? OnAnimationBegin { get; set; } Property Value Action<AnimatedTilemap>"
  },
  "api/MonoGame.Aseprite.AnimatedTilemap.OnAnimationEnd.html": {
    "href": "api/MonoGame.Aseprite.AnimatedTilemap.OnAnimationEnd.html",
    "title": "Property OnAnimationEnd | MonoGame Aseprite",
    "keywords": "Property OnAnimationEnd Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll OnAnimationEnd Gets or Sets an Action method to invoke when the animation ends. This will only trigger when the animation ends in a non-looping animation, or if a looping animation is stopped by calling the Stop() method manually. public Action<AnimatedTilemap>? OnAnimationEnd { get; set; } Property Value Action<AnimatedTilemap>"
  },
  "api/MonoGame.Aseprite.AnimatedTilemap.OnAnimationLoop.html": {
    "href": "api/MonoGame.Aseprite.AnimatedTilemap.OnAnimationLoop.html",
    "title": "Property OnAnimationLoop | MonoGame Aseprite",
    "keywords": "Property OnAnimationLoop Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll OnAnimationLoop Gets or Sets an Action method to invoke each time the animation loops. This will trigger each time the animation loops after the last frame's OnFrameEnd triggers. public Action<AnimatedTilemap>? OnAnimationLoop { get; set; } Property Value Action<AnimatedTilemap>"
  },
  "api/MonoGame.Aseprite.AnimatedTilemap.OnFrameBegin.html": {
    "href": "api/MonoGame.Aseprite.AnimatedTilemap.OnFrameBegin.html",
    "title": "Property OnFrameBegin | MonoGame Aseprite",
    "keywords": "Property OnFrameBegin Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll OnFrameBegin Gets or Sets an Action method to invoke at the start of each animation frame. public Action<AnimatedTilemap>? OnFrameBegin { get; set; } Property Value Action<AnimatedTilemap>"
  },
  "api/MonoGame.Aseprite.AnimatedTilemap.OnFrameEnd.html": {
    "href": "api/MonoGame.Aseprite.AnimatedTilemap.OnFrameEnd.html",
    "title": "Property OnFrameEnd | MonoGame Aseprite",
    "keywords": "Property OnFrameEnd Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll OnFrameEnd Gets or Sets an Action method to invoke at the end of each animation frame. public Action<AnimatedTilemap>? OnFrameEnd { get; set; } Property Value Action<AnimatedTilemap>"
  },
  "api/MonoGame.Aseprite.AnimatedTilemap.Pause.html": {
    "href": "api/MonoGame.Aseprite.AnimatedTilemap.Pause.html",
    "title": "Method Pause | MonoGame Aseprite",
    "keywords": "Method Pause Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll Pause(bool) Pauses this AnimatedTilemap and prevents it from being updated until it is unpaused. public bool Pause(bool resetFrameDuration = false) Parameters resetFrameDuration bool A value that indicates whether the the duration of the CurrentFrame should be reset. When this method returns false, the duration will not be reset even if this is specified as true. Returns bool true this AnimatedTilemap was successfully paused; otherwise, false. This method returns false this AnimatedTilemap is not currently animating or if it is already paused."
  },
  "api/MonoGame.Aseprite.AnimatedTilemap.RemoveFrame.html": {
    "href": "api/MonoGame.Aseprite.AnimatedTilemap.RemoveFrame.html",
    "title": "Method RemoveFrame | MonoGame Aseprite",
    "keywords": "Method RemoveFrame Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll RemoveFrame(int) Removes the AnimatedTilemapFrame element at the specified index from this AnimatedTilemap. public bool RemoveFrame(int index) Parameters index int The index of the AnimatedTilemapFrame element to remove. Returns bool true if the AnimatedTilemapFrame was removed successfully; otherwise, false. This method returns false when the specified index is less than zero or is greater that or equal to the total number of AnimatedTilemapFrame elements in this AnimatedTilemap."
  },
  "api/MonoGame.Aseprite.AnimatedTilemap.Reset.html": {
    "href": "api/MonoGame.Aseprite.AnimatedTilemap.Reset.html",
    "title": "Method Reset | MonoGame Aseprite",
    "keywords": "Method Reset Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll Reset(bool) Resets this AnimatedTilemap back to its first frame of animation. public void Reset(bool paused = false) Parameters paused bool A value that indicates whether his AnimatedTilemap should be paused after it is reset."
  },
  "api/MonoGame.Aseprite.AnimatedTilemap.Stop.html": {
    "href": "api/MonoGame.Aseprite.AnimatedTilemap.Stop.html",
    "title": "Method Stop | MonoGame Aseprite",
    "keywords": "Method Stop Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll Stop() Stops this AnimatedTilemap on the CurrentFrame. This will trigger the OnAnimationEnd if one was set. public bool Stop() Returns bool true this AnimatedTilemap was successfully stopped; otherwise, false. This method returns false this AnimatedTilemap is not currently animating. If this method returns false, this indicates that the OnAnimationEnd action method was not invoked."
  },
  "api/MonoGame.Aseprite.AnimatedTilemap.TryGetFrame.html": {
    "href": "api/MonoGame.Aseprite.AnimatedTilemap.TryGetFrame.html",
    "title": "Method TryGetFrame | MonoGame Aseprite",
    "keywords": "Method TryGetFrame Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll TryGetFrame(int, out AnimatedTilemapFrame?) Gets the AnimatedTilemapFrame element at the specified index in this AnimatedTilemap. public bool TryGetFrame(int index, out AnimatedTilemapFrame? frame) Parameters index int The index of the AnimatedTilemapFrame element to locate. frame AnimatedTilemapFrame When this method returns true, contains the AnimatedTilemapFrame located; otherwise, null. Returns bool true if the AnimatedTilemapFrame element was located; otherwise, false. This method returns false when the specified index is less than zero or is greater than or equal to the total number of AnimatedTilemapFrame elements in this AnimatedTilemap."
  },
  "api/MonoGame.Aseprite.AnimatedTilemap.Unpause.html": {
    "href": "api/MonoGame.Aseprite.AnimatedTilemap.Unpause.html",
    "title": "Method Unpause | MonoGame Aseprite",
    "keywords": "Method Unpause Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll Unpause(bool) Unpauses this AnimatedTilemap. public bool Unpause(bool advanceToNextFrame = false) Parameters advanceToNextFrame bool A value that indicates whether this AnimatedTilemap should immediately be advanced to the next frame after unpausing. When this method returns false, this AnimatedTilemap will -not- be advanced to the next frame, even if this was specified as true. Returns bool true if this AnimatedTilemap was successfully unpaused; otherwise, false. This method return false this AnimatedTilemap is not currently animating or if it has not already been paused."
  },
  "api/MonoGame.Aseprite.AnimatedTilemap.Update.html": {
    "href": "api/MonoGame.Aseprite.AnimatedTilemap.Update.html",
    "title": "Method Update | MonoGame Aseprite",
    "keywords": "Method Update Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll Update(double) Updates this AnimatedTilemap. public void Update(double deltaTimeInSeconds) Parameters deltaTimeInSeconds double The amount of time, in seconds, that have elapsed since the last update cycle in the game. Remarks This should only be called once per game update cycle. Update(GameTime) Updates this AnimatedTilemap. public void Update(GameTime gameTime) Parameters gameTime GameTime A snapshot of the game timing values for the current update cycle. Remarks This should only be called once per game update cycle. Update(in TimeSpan) Updates this AnimatedTilemap. public void Update(in TimeSpan elapsedTime) Parameters elapsedTime TimeSpan The amount of time, that have elapsed since the last update cycle in the game. Remarks This should only be called once per game update cycle."
  },
  "api/MonoGame.Aseprite.AnimatedTilemap.frameCount.html": {
    "href": "api/MonoGame.Aseprite.AnimatedTilemap.frameCount.html",
    "title": "Property frameCount | MonoGame Aseprite",
    "keywords": "Property frameCount Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll frameCount Gets the total number of AnimatedTilemapFrame elements in this AnimatedTilemap. public int frameCount { get; } Property Value int"
  },
  "api/MonoGame.Aseprite.AnimatedTilemap.html": {
    "href": "api/MonoGame.Aseprite.AnimatedTilemap.html",
    "title": "Class AnimatedTilemap | MonoGame Aseprite",
    "keywords": "Class AnimatedTilemap Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll Defines a AnimatedTilemap consisting of AnimatedTilemapFrame elements public sealed class AnimatedTilemap : IEnumerable<AnimatedTilemapFrame>, IEnumerable Inheritance object AnimatedTilemap Implements IEnumerable<AnimatedTilemapFrame> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors AnimatedTilemap(string, bool, bool, bool) Initializes a new instance of the AnimatedTilemap class. Properties CurrentFrame Gets the source AnimatedTilemapFrame element for the current animation frame. CurrentFrameTimeRemaining Gets the amount of time remaining for the CurrentFrame before moving to the next frame. IsAnimating Gets a value that indicates if this AnimatedTilemap is currently animating. IsLooping Gets a value that indicates whether the animation this AnimatedTilemap should loop. IsPaused Gets a value that indicates if this AnimatedTilemap is currently paused. IsPingPong Gets a value that indicates whether the animation for this AnimatedTilemap should ping-pong once reaching the last frame of animation. IsReversed Gets a value that indicates whether the animation this AnimatedTilemap should play frames in reverse order. this[int] Gets the AnimatedTilemapFrame element at the specified index in this AnimatedTilemap. Name Gets the name assigned to this AnimatedTilemap. OnAnimationBegin Gets or Sets an Action method to invoke at the start of the animation. This will trigger only once when the animation starts before the first frame's OnFrameBegin triggers. OnAnimationEnd Gets or Sets an Action method to invoke when the animation ends. This will only trigger when the animation ends in a non-looping animation, or if a looping animation is stopped by calling the Stop() method manually. OnAnimationLoop Gets or Sets an Action method to invoke each time the animation loops. This will trigger each time the animation loops after the last frame's OnFrameEnd triggers. OnFrameBegin Gets or Sets an Action method to invoke at the start of each animation frame. OnFrameEnd Gets or Sets an Action method to invoke at the end of each animation frame. frameCount Gets the total number of AnimatedTilemapFrame elements in this AnimatedTilemap. Methods AddFrame(AnimatedTilemapFrame) Adds the given AnimatedTilemapFrame as the next frame of animation in this AnimatedTilemap. Clear() Removes all AnimatedTilemapFrame elements from this AnimatedTilemap. CreateFrame(TimeSpan) Creates and adds a new AnimatedTilemapFrame element as the next frame of animation in this AnimatedTilemap. Draw(SpriteBatch, Vector2, Color) Draws this AnimatedTilemap using the Microsoft.Xna.Framework.Graphics.SpriteBatch. Draw(SpriteBatch, Vector2, Color, Vector2, float) Draws this AnimatedTilemap using the Microsoft.Xna.Framework.Graphics.SpriteBatch. Draw(SpriteBatch, Vector2, Color, float, float) Draws this AnimatedTilemap using the Microsoft.Xna.Framework.Graphics.SpriteBatch. GetEnumerator() Returns an enumerator that iterates through the collection. GetFrame(int) Gets the AnimatedTilemapFrame element at the specified index in this AnimatedTilemap. Pause(bool) Pauses this AnimatedTilemap and prevents it from being updated until it is unpaused. RemoveFrame(int) Removes the AnimatedTilemapFrame element at the specified index from this AnimatedTilemap. Reset(bool) Resets this AnimatedTilemap back to its first frame of animation. Stop() Stops this AnimatedTilemap on the CurrentFrame. This will trigger the OnAnimationEnd if one was set. TryGetFrame(int, out AnimatedTilemapFrame?) Gets the AnimatedTilemapFrame element at the specified index in this AnimatedTilemap. Unpause(bool) Unpauses this AnimatedTilemap. Update(GameTime) Updates this AnimatedTilemap. Update(double) Updates this AnimatedTilemap. Update(in TimeSpan) Updates this AnimatedTilemap."
  },
  "api/MonoGame.Aseprite.AnimatedTilemapFrame.-ctor.html": {
    "href": "api/MonoGame.Aseprite.AnimatedTilemapFrame.-ctor.html",
    "title": "Constructor AnimatedTilemapFrame | MonoGame Aseprite",
    "keywords": "Constructor AnimatedTilemapFrame Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll AnimatedTilemapFrame(TimeSpan) Initializes a new instance of the AnimatedTilemapFrame class. public AnimatedTilemapFrame(TimeSpan duration) Parameters duration TimeSpan The duration to assign the AnimatedTilemapFrame."
  },
  "api/MonoGame.Aseprite.AnimatedTilemapFrame.AddLayer.html": {
    "href": "api/MonoGame.Aseprite.AnimatedTilemapFrame.AddLayer.html",
    "title": "Method AddLayer | MonoGame Aseprite",
    "keywords": "Method AddLayer Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll AddLayer(TilemapLayer) Adds the given TilemapLayer element to this AnimatedTilemapFrame. public void AddLayer(TilemapLayer layer) Parameters layer TilemapLayer The TilemapLayer element to add. Exceptions InvalidOperationException Thrown if this AnimatedTilemapFrame already contains a TilemapLayer element with the same name as the TilemapLayer element given."
  },
  "api/MonoGame.Aseprite.AnimatedTilemapFrame.Clear.html": {
    "href": "api/MonoGame.Aseprite.AnimatedTilemapFrame.Clear.html",
    "title": "Method Clear | MonoGame Aseprite",
    "keywords": "Method Clear Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll Clear() Removes all TilemapLayer elements from this AnimatedTilemapFrame. public void Clear()"
  },
  "api/MonoGame.Aseprite.AnimatedTilemapFrame.CreateLayer.html": {
    "href": "api/MonoGame.Aseprite.AnimatedTilemapFrame.CreateLayer.html",
    "title": "Method CreateLayer | MonoGame Aseprite",
    "keywords": "Method CreateLayer Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll CreateLayer(string, Tileset, int, int, Vector2) Creates a new TilemapLayer element and adds it to this AnimatedTilemapFrame. public TilemapLayer CreateLayer(string layerName, Tileset tileset, int columns, int rows, Vector2 offset) Parameters layerName string The name to assign the TilemapLayer element created by this method. The name must be unique across all TilemapLayer elements in this AnimatedTilemapFrame. tileset Tileset The source Tileset to assign the TilemapLayer element created by this method. columns int The total number of columns to assign the TilemapLayer element created by this method. rows int The total of rows in the TilemapLayer element created by this method. offset Vector2 The x- and y-position offset, relative to the location the AnimatedTilemap is rendered, to assign the TilemapLayer element created by this method. Returns TilemapLayer The TilemapLayer created by this method. Exceptions InvalidOperationException Thrown if this AnimatedTilemapFrame already contains a TilemapLayer element with the specified name."
  },
  "api/MonoGame.Aseprite.AnimatedTilemapFrame.Duration.html": {
    "href": "api/MonoGame.Aseprite.AnimatedTilemapFrame.Duration.html",
    "title": "Property Duration | MonoGame Aseprite",
    "keywords": "Property Duration Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll Duration Gets the duration of this AnimatedTilemapFrame. public TimeSpan Duration { get; } Property Value TimeSpan"
  },
  "api/MonoGame.Aseprite.AnimatedTilemapFrame.GetEnumerator.html": {
    "href": "api/MonoGame.Aseprite.AnimatedTilemapFrame.GetEnumerator.html",
    "title": "Method GetEnumerator | MonoGame Aseprite",
    "keywords": "Method GetEnumerator Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll GetEnumerator() Returns an enumerator used to iterate through all of the TilemapLayer elements in this AnimatedTilemapFrame. The order of elements in the enumeration is from bottom layer to top layer. public IEnumerator<TilemapLayer> GetEnumerator() Returns IEnumerator<TilemapLayer> An enumerator used to iterate through all of the TilemapLayer elements in this AnimatedTilemapFrame."
  },
  "api/MonoGame.Aseprite.AnimatedTilemapFrame.GetLayer.html": {
    "href": "api/MonoGame.Aseprite.AnimatedTilemapFrame.GetLayer.html",
    "title": "Method GetLayer | MonoGame Aseprite",
    "keywords": "Method GetLayer Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll GetLayer(int) Gets the TilemapLayer element at the specified index in this AnimatedTilemapFrame. public TilemapLayer GetLayer(int index) Parameters index int The index of the TilemapLayer element to locate. Returns TilemapLayer The TilemapLayer element located. Exceptions ArgumentOutOfRangeException Thrown if the specified index is less than zero or is greater than or equal to the total number of TilemapLayer elements in this AnimatedTilemapFrame. GetLayer(string) Gets the TilemapLayer element with the specified name in this AnimatedTilemapFrame. public TilemapLayer GetLayer(string name) Parameters name string The name of the TilemapLayer element to locate. Returns TilemapLayer The TilemapLayer element located. Exceptions KeyNotFoundException Thrown if this AnimatedTilemapFrame does not contain a TilemapLayer element with the specified name."
  },
  "api/MonoGame.Aseprite.AnimatedTilemapFrame.Item.html": {
    "href": "api/MonoGame.Aseprite.AnimatedTilemapFrame.Item.html",
    "title": "Property this | MonoGame Aseprite",
    "keywords": "Property this Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll this[int] Gets the TilemapLayer element at the specified index in this AnimatedTilemapFrame. public TilemapLayer this[int layerIndex] { get; } Parameters layerIndex int The index of the TilemapLayer element to locate. Property Value TilemapLayer The TilemapLayer element located. Exceptions ArgumentOutOfRangeException Thrown if the specified index is less than zero or is greater than or equal to the total number of TilemapLayer elements in this AnimatedTilemapFrame. this[string] Gets the TilemapLayer element with the specified name in this AnimatedTilemapFrame. public TilemapLayer this[string layerName] { get; } Parameters layerName string The name of the TilemapLayer element to locate. Property Value TilemapLayer The TilemapLayer element located. Exceptions KeyNotFoundException Thrown if this AnimatedTilemapFrame does not contain a TilemapLayer element with the specified name."
  },
  "api/MonoGame.Aseprite.AnimatedTilemapFrame.LayerCount.html": {
    "href": "api/MonoGame.Aseprite.AnimatedTilemapFrame.LayerCount.html",
    "title": "Property LayerCount | MonoGame Aseprite",
    "keywords": "Property LayerCount Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll LayerCount Gets the total number of TilemapLayer elements in this AnimatedTilemapFrame. public int LayerCount { get; } Property Value int"
  },
  "api/MonoGame.Aseprite.AnimatedTilemapFrame.RemoveLayer.html": {
    "href": "api/MonoGame.Aseprite.AnimatedTilemapFrame.RemoveLayer.html",
    "title": "Method RemoveLayer | MonoGame Aseprite",
    "keywords": "Method RemoveLayer Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll RemoveLayer(int) Removes the TilemapLayer element at the specified index in this AnimatedTilemapFrame. public bool RemoveLayer(int index) Parameters index int The index of the TilemapLayer element to remove from this AnimatedTilemapFrame. Returns bool true if the TilemapLayer element was successfully removed; otherwise, false. This method returns false if the specified index is less than zero or is greater than or equal to the total number of TilemapLayer elements in this tilemap frame. RemoveLayer(string) Removes the TilemapLayer element with the specified name from this AnimatedTilemapFrame. public bool RemoveLayer(string name) Parameters name string The name of the TilemapLayer element to remove from this AnimatedTilemapFrame Returns bool true if the TilemapLayer element was successfully removed; otherwise, false. This method returns false if this tilemap frame does not contain a TilemapLayer element with the specified name. RemoveLayer(TilemapLayer) Removes the given TilemapLayer element from this AnimatedTilemapFrame. public bool RemoveLayer(TilemapLayer layer) Parameters layer TilemapLayer The TilemapLayer element to remove from this AnimatedTilemapFrame. Returns bool true if the TilemapLayer element was removed successfully; otherwise, false. This method returns false if this tilemap frame does not contain the TilemapLayer element given."
  },
  "api/MonoGame.Aseprite.AnimatedTilemapFrame.TryGetLayer.html": {
    "href": "api/MonoGame.Aseprite.AnimatedTilemapFrame.TryGetLayer.html",
    "title": "Method TryGetLayer | MonoGame Aseprite",
    "keywords": "Method TryGetLayer Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll TryGetLayer(int, out TilemapLayer?) Get the TilemapLayer element at the specified index in this AnimatedTilemapFrame. public bool TryGetLayer(int index, out TilemapLayer? layer) Parameters index int The index of the TilemapLayer element to locate. layer TilemapLayer When this method returns true, contains the TilemapLayer element located; otherwise, null. Returns bool true if a TilemapLayer element was located at the specified index in this AnimatedTilemapFrame; otherwise, false. This method return false when the specified index is less than zero or is greater than or equal to the total number of TilemapLayer elements in this AnimatedTilemapFrame. TryGetLayer(string, out TilemapLayer?) Gets the TilemapLayer element with the specified name in this AnimatedTilemapFrame. public bool TryGetLayer(string name, out TilemapLayer? layer) Parameters name string The name of the TilemapLayer element to locate. layer TilemapLayer When this method returns true, contains the TilemapLayer element located; otherwise, null. Returns bool true if a TilemapLayer element was located in this AnimatedTilemapFrame with the specified name; otherwise false. This method returns false if this AnimatedTilemapFrame does not contain a TilemapLayer element with the specified name."
  },
  "api/MonoGame.Aseprite.AnimatedTilemapFrame.html": {
    "href": "api/MonoGame.Aseprite.AnimatedTilemapFrame.html",
    "title": "Class AnimatedTilemapFrame | MonoGame Aseprite",
    "keywords": "Class AnimatedTilemapFrame Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll Defines a frame of animation in an AnimatedTilemap, containing zero or more TilemapLayer elements. public sealed class AnimatedTilemapFrame : IEnumerable<TilemapLayer>, IEnumerable Inheritance object AnimatedTilemapFrame Implements IEnumerable<TilemapLayer> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors AnimatedTilemapFrame(TimeSpan) Initializes a new instance of the AnimatedTilemapFrame class. Properties Duration Gets the duration of this AnimatedTilemapFrame. this[int] Gets the TilemapLayer element at the specified index in this AnimatedTilemapFrame. this[string] Gets the TilemapLayer element with the specified name in this AnimatedTilemapFrame. LayerCount Gets the total number of TilemapLayer elements in this AnimatedTilemapFrame. Methods AddLayer(TilemapLayer) Adds the given TilemapLayer element to this AnimatedTilemapFrame. Clear() Removes all TilemapLayer elements from this AnimatedTilemapFrame. CreateLayer(string, Tileset, int, int, Vector2) Creates a new TilemapLayer element and adds it to this AnimatedTilemapFrame. GetEnumerator() Returns an enumerator used to iterate through all of the TilemapLayer elements in this AnimatedTilemapFrame. The order of elements in the enumeration is from bottom layer to top layer. GetLayer(int) Gets the TilemapLayer element at the specified index in this AnimatedTilemapFrame. GetLayer(string) Gets the TilemapLayer element with the specified name in this AnimatedTilemapFrame. RemoveLayer(TilemapLayer) Removes the given TilemapLayer element from this AnimatedTilemapFrame. RemoveLayer(int) Removes the TilemapLayer element at the specified index in this AnimatedTilemapFrame. RemoveLayer(string) Removes the TilemapLayer element with the specified name from this AnimatedTilemapFrame. TryGetLayer(int, out TilemapLayer?) Get the TilemapLayer element at the specified index in this AnimatedTilemapFrame. TryGetLayer(string, out TilemapLayer?) Gets the TilemapLayer element with the specified name in this AnimatedTilemapFrame."
  },
  "api/MonoGame.Aseprite.AnimationFrame.Duration.html": {
    "href": "api/MonoGame.Aseprite.AnimationFrame.Duration.html",
    "title": "Property Duration | MonoGame Aseprite",
    "keywords": "Property Duration Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll Duration Gets the duration of this AnimationFrame. public TimeSpan Duration { get; } Property Value TimeSpan"
  },
  "api/MonoGame.Aseprite.AnimationFrame.FrameIndex.html": {
    "href": "api/MonoGame.Aseprite.AnimationFrame.FrameIndex.html",
    "title": "Property FrameIndex | MonoGame Aseprite",
    "keywords": "Property FrameIndex Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll FrameIndex Gets the index of the source TextureRegion in the TextureAtlas of the SpriteSheet. public int FrameIndex { get; } Property Value int"
  },
  "api/MonoGame.Aseprite.AnimationFrame.TextureRegion.html": {
    "href": "api/MonoGame.Aseprite.AnimationFrame.TextureRegion.html",
    "title": "Property TextureRegion | MonoGame Aseprite",
    "keywords": "Property TextureRegion Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll TextureRegion Gets the source TextureRegion for this AnimationFrame. public TextureRegion TextureRegion { get; } Property Value TextureRegion"
  },
  "api/MonoGame.Aseprite.AnimationFrame.html": {
    "href": "api/MonoGame.Aseprite.AnimationFrame.html",
    "title": "Class AnimationFrame | MonoGame Aseprite",
    "keywords": "Class AnimationFrame Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll Defines the source TextureRegion and duration of a single frame of animation in an AnimationTag. public sealed class AnimationFrame Inheritance object AnimationFrame Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties Duration Gets the duration of this AnimationFrame. FrameIndex Gets the index of the source TextureRegion in the TextureAtlas of the SpriteSheet. TextureRegion Gets the source TextureRegion for this AnimationFrame."
  },
  "api/MonoGame.Aseprite.AnimationTag.FrameCount.html": {
    "href": "api/MonoGame.Aseprite.AnimationTag.FrameCount.html",
    "title": "Property FrameCount | MonoGame Aseprite",
    "keywords": "Property FrameCount Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll FrameCount Gets the total number of ,AnimationFrame elements. public int FrameCount { get; } Property Value int"
  },
  "api/MonoGame.Aseprite.AnimationTag.Frames.html": {
    "href": "api/MonoGame.Aseprite.AnimationTag.Frames.html",
    "title": "Property Frames | MonoGame Aseprite",
    "keywords": "Property Frames Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll Frames Gets a read-only span of the AnimationFrame elements that make up the animation. The order of elements is from first frame to last frame in non-reverse order. public ReadOnlySpan<AnimationFrame> Frames { get; } Property Value ReadOnlySpan<AnimationFrame>"
  },
  "api/MonoGame.Aseprite.AnimationTag.GetFrame.html": {
    "href": "api/MonoGame.Aseprite.AnimationTag.GetFrame.html",
    "title": "Method GetFrame | MonoGame Aseprite",
    "keywords": "Method GetFrame Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll GetFrame(int) Gets the AnimationFrame element at the specified index from this AnimationTag. public AnimationFrame GetFrame(int index) Parameters index int The index of the AnimationFrame to locate. Returns AnimationFrame The AnimationFrame located. Exceptions ArgumentOutOfRangeException Thrown if the specified index is less than zero or is greater than or equal to the total number of AnimationFrame elements in this AnimationTag."
  },
  "api/MonoGame.Aseprite.AnimationTag.IsLooping.html": {
    "href": "api/MonoGame.Aseprite.AnimationTag.IsLooping.html",
    "title": "Property IsLooping | MonoGame Aseprite",
    "keywords": "Property IsLooping Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll IsLooping Gets a value that indicates whether the animation should loop. public bool IsLooping { get; } Property Value bool"
  },
  "api/MonoGame.Aseprite.AnimationTag.IsPingPong.html": {
    "href": "api/MonoGame.Aseprite.AnimationTag.IsPingPong.html",
    "title": "Property IsPingPong | MonoGame Aseprite",
    "keywords": "Property IsPingPong Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll IsPingPong Gets or Sets a value that indicates whether the animation should ping-pong once reaching the last frame of animation. public bool IsPingPong { get; set; } Property Value bool"
  },
  "api/MonoGame.Aseprite.AnimationTag.IsReversed.html": {
    "href": "api/MonoGame.Aseprite.AnimationTag.IsReversed.html",
    "title": "Property IsReversed | MonoGame Aseprite",
    "keywords": "Property IsReversed Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll IsReversed Gets or Sets a value that indicates whether the animation should play in reverse. public bool IsReversed { get; set; } Property Value bool"
  },
  "api/MonoGame.Aseprite.AnimationTag.Item.html": {
    "href": "api/MonoGame.Aseprite.AnimationTag.Item.html",
    "title": "Property this | MonoGame Aseprite",
    "keywords": "Property this Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll this[int] Gets the AnimationFrame element at the specified index from this AnimationTag. public AnimationFrame this[int index] { get; } Parameters index int The index of the AnimationFrame to locate. Property Value AnimationFrame The AnimationFrame located. Exceptions ArgumentOutOfRangeException Thrown if the specified index is less than zero or is greater than or equal to the total number of AnimationFrame elements in this AnimationTag."
  },
  "api/MonoGame.Aseprite.AnimationTag.LoopCount.html": {
    "href": "api/MonoGame.Aseprite.AnimationTag.LoopCount.html",
    "title": "Property LoopCount | MonoGame Aseprite",
    "keywords": "Property LoopCount Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll LoopCount Gets or Sets a value that indicates the total number of loops/cycles of this animation that should play. public int LoopCount { get; set; } Property Value int Remarks 0 = infinite looping If IsPingPong is equal to true, each direction of the ping-pong will count as a loop."
  },
  "api/MonoGame.Aseprite.AnimationTag.Name.html": {
    "href": "api/MonoGame.Aseprite.AnimationTag.Name.html",
    "title": "Property Name | MonoGame Aseprite",
    "keywords": "Property Name Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll Name Gets the name of the animation public string Name { get; } Property Value string"
  },
  "api/MonoGame.Aseprite.AnimationTag.html": {
    "href": "api/MonoGame.Aseprite.AnimationTag.html",
    "title": "Class AnimationTag | MonoGame Aseprite",
    "keywords": "Class AnimationTag Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll Defines the definition of an animation. public sealed class AnimationTag Inheritance object AnimationTag Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties FrameCount Gets the total number of ,AnimationFrame elements. Frames Gets a read-only span of the AnimationFrame elements that make up the animation. The order of elements is from first frame to last frame in non-reverse order. IsLooping Gets a value that indicates whether the animation should loop. IsPingPong Gets or Sets a value that indicates whether the animation should ping-pong once reaching the last frame of animation. IsReversed Gets or Sets a value that indicates whether the animation should play in reverse. this[int] Gets the AnimationFrame element at the specified index from this AnimationTag. LoopCount Gets or Sets a value that indicates the total number of loops/cycles of this animation that should play. Name Gets the name of the animation Methods GetFrame(int) Gets the AnimationFrame element at the specified index from this AnimationTag."
  },
  "api/MonoGame.Aseprite.AnimationTagBuilder.AddFrame.html": {
    "href": "api/MonoGame.Aseprite.AnimationTagBuilder.AddFrame.html",
    "title": "Method AddFrame | MonoGame Aseprite",
    "keywords": "Method AddFrame Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll AddFrame(int, TimeSpan) Adds a new frame of animation to the AnimationTag using the TextureRegion located at the specified index in the TextureAtlas of the SpriteSheet and with the specified duration. public AnimationTagBuilder AddFrame(int regionIndex, TimeSpan duration) Parameters regionIndex int The index of the source TextureRegion in the TextureAtlas of the SpriteSheet. duration TimeSpan The duration of the frame of animation. Returns AnimationTagBuilder This instance of the AnimationTagBuilder class. Exceptions ArgumentOutOfRangeException Throw if the specified index is less than zero or is greater than or equal to the total number of regions in the TextureAtlas. AddFrame(string, TimeSpan) Adds a new frame of animation to the AnimationTag using the TextureRegion with the specified name in the TextureAtlas of the SpriteSheet and with the specified duration. public AnimationTagBuilder AddFrame(string regionName, TimeSpan duration) Parameters regionName string The name of the source TextureRegion in the TextureAtlas of the SpriteSheet. duration TimeSpan The duration of the frame of animation. Returns AnimationTagBuilder This instance of the AnimationTagBuilder class. Exceptions KeyNotFoundException Thrown if the TextureAtlas of the SpriteSheet does not contain a TextureRegion with the specified name."
  },
  "api/MonoGame.Aseprite.AnimationTagBuilder.IsPingPong.html": {
    "href": "api/MonoGame.Aseprite.AnimationTagBuilder.IsPingPong.html",
    "title": "Method IsPingPong | MonoGame Aseprite",
    "keywords": "Method IsPingPong Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll IsPingPong(bool) Sets whether the animation should ping-pong once reaching the last frame of animation. public AnimationTagBuilder IsPingPong(bool isPingPong) Parameters isPingPong bool A value that indicates whether the animation should ping-pong. Returns AnimationTagBuilder This instance of the AnimationTagBuilder class."
  },
  "api/MonoGame.Aseprite.AnimationTagBuilder.IsReversed.html": {
    "href": "api/MonoGame.Aseprite.AnimationTagBuilder.IsReversed.html",
    "title": "Method IsReversed | MonoGame Aseprite",
    "keywords": "Method IsReversed Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll IsReversed(bool) Sets whether the animation should play in reverse. public AnimationTagBuilder IsReversed(bool isReversed) Parameters isReversed bool A value that indicates whether the animation should play in reverse Returns AnimationTagBuilder This instance of the AnimationTagBuilder class."
  },
  "api/MonoGame.Aseprite.AnimationTagBuilder.LoopCount.html": {
    "href": "api/MonoGame.Aseprite.AnimationTagBuilder.LoopCount.html",
    "title": "Method LoopCount | MonoGame Aseprite",
    "keywords": "Method LoopCount Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll LoopCount(int) Sets the total number of loops/cycles of the animation that should play. public AnimationTagBuilder LoopCount(int count) Parameters count int A value that indicates the total number of loops/cycles of the animation that should play. Returns AnimationTagBuilder This instance of the AnimationTagBuilder class. Remarks 0 = infinite looping If IsPingPong is equal to true, each direction of the ping-pong will count as a loop."
  },
  "api/MonoGame.Aseprite.AnimationTagBuilder.html": {
    "href": "api/MonoGame.Aseprite.AnimationTagBuilder.html",
    "title": "Class AnimationTagBuilder | MonoGame Aseprite",
    "keywords": "Class AnimationTagBuilder Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll Defines a builder building an AnimationTag for a SpriteSheet. public sealed class AnimationTagBuilder Inheritance object AnimationTagBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods AddFrame(int, TimeSpan) Adds a new frame of animation to the AnimationTag using the TextureRegion located at the specified index in the TextureAtlas of the SpriteSheet and with the specified duration. AddFrame(string, TimeSpan) Adds a new frame of animation to the AnimationTag using the TextureRegion with the specified name in the TextureAtlas of the SpriteSheet and with the specified duration. IsPingPong(bool) Sets whether the animation should ping-pong once reaching the last frame of animation. IsReversed(bool) Sets whether the animation should play in reverse. LoopCount(int) Sets the total number of loops/cycles of the animation that should play."
  },
  "api/MonoGame.Aseprite.AsepriteFileExtensions.CreateAnimatedTilemap.html": {
    "href": "api/MonoGame.Aseprite.AsepriteFileExtensions.CreateAnimatedTilemap.html",
    "title": "Method CreateAnimatedTilemap | MonoGame Aseprite",
    "keywords": "Method CreateAnimatedTilemap Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll CreateAnimatedTilemap(AsepriteFile, GraphicsDevice, ProcessorOptions?) Creates a new AnimatedTilemap from the all frames in the provided aseprite file. public static AnimatedTilemap CreateAnimatedTilemap(this AsepriteFile aseFile, GraphicsDevice device, ProcessorOptions? options = null) Parameters aseFile AsepriteFile The aseprite file instance. device GraphicsDevice The graphics device used to create graphical resources. options ProcessorOptions The options to use when processing the animated tilemap. Returns AnimatedTilemap the AnimatedTilemap created by this method. Exceptions ArgumentNullException Thrown if aseFile is null. -or- throw if device is null."
  },
  "api/MonoGame.Aseprite.AsepriteFileExtensions.CreateSprite.html": {
    "href": "api/MonoGame.Aseprite.AsepriteFileExtensions.CreateSprite.html",
    "title": "Method CreateSprite | MonoGame Aseprite",
    "keywords": "Method CreateSprite Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll CreateSprite(AsepriteFile, GraphicsDevice, int, ProcessorOptions?) Creates a new Sprite from the specified frame index of the provided aseprite file instance. public static Sprite CreateSprite(this AsepriteFile aseFile, GraphicsDevice device, int frameIndex, ProcessorOptions? options = null) Parameters aseFile AsepriteFile The aseprite file instance. device GraphicsDevice The graphics device used to create graphical resources. frameIndex int The index of the frame in the aseprite file to create the sprite from. options ProcessorOptions The options to use when processing the sprite. Returns Sprite The Sprite created by this method. Exceptions ArgumentNullException Thrown if the aseFile parameter is null. -or- Thrown if the device parameter is null. ArgumentOutOfRangeException Thrown if frameIndex is less than zero or greater than or equal to the total number of frames in the aseprite file."
  },
  "api/MonoGame.Aseprite.AsepriteFileExtensions.CreateSpriteSheet.html": {
    "href": "api/MonoGame.Aseprite.AsepriteFileExtensions.CreateSpriteSheet.html",
    "title": "Method CreateSpriteSheet | MonoGame Aseprite",
    "keywords": "Method CreateSpriteSheet Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll CreateSpriteSheet(AsepriteFile, GraphicsDevice, ProcessorOptions?) Creates a new SpriteSheet from the provided aseprite file. public static SpriteSheet CreateSpriteSheet(this AsepriteFile aseFile, GraphicsDevice device, ProcessorOptions? options = null) Parameters aseFile AsepriteFile The aseprite file instance. device GraphicsDevice The graphics device used to create graphical resources. options ProcessorOptions The options to use when processing the sprite sheet.. Returns SpriteSheet The SpriteSheet created by this method. Exceptions ArgumentNullException Thrown if the aseFile parameter is null. -or- Thrown if the device parameter is null."
  },
  "api/MonoGame.Aseprite.AsepriteFileExtensions.CreateTextureAtlas.html": {
    "href": "api/MonoGame.Aseprite.AsepriteFileExtensions.CreateTextureAtlas.html",
    "title": "Method CreateTextureAtlas | MonoGame Aseprite",
    "keywords": "Method CreateTextureAtlas Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll CreateTextureAtlas(AsepriteFile, GraphicsDevice, ProcessorOptions?) Creates a new TextureAtlas from the provided aseprite file. public static TextureAtlas CreateTextureAtlas(this AsepriteFile aseFile, GraphicsDevice device, ProcessorOptions? options = null) Parameters aseFile AsepriteFile The aseprite file instance. device GraphicsDevice The graphics device used to create graphical resources. options ProcessorOptions The options to use when processing the texture atlas.. Returns TextureAtlas The TextureAtlas created by this method. Exceptions ArgumentNullException Thrown if the aseFile parameter is null. -or- Thrown if the device parameter is null."
  },
  "api/MonoGame.Aseprite.AsepriteFileExtensions.CreateTilemap.html": {
    "href": "api/MonoGame.Aseprite.AsepriteFileExtensions.CreateTilemap.html",
    "title": "Method CreateTilemap | MonoGame Aseprite",
    "keywords": "Method CreateTilemap Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll CreateTilemap(AsepriteFile, GraphicsDevice, int, ProcessorOptions?) Creates a new Tilemap from a specified frame in the provided aseprite file. public static Tilemap CreateTilemap(this AsepriteFile aseFile, GraphicsDevice device, int frameIndex, ProcessorOptions? options = null) Parameters aseFile AsepriteFile The aseprite file instance. device GraphicsDevice The graphics device used to create graphical resources. frameIndex int The index of the frame with the tilemap. options ProcessorOptions The options to use when processing the tilemap. Returns Tilemap The Tilemap created by this method. Exceptions ArgumentNullException Thrown if aseFile is null. -or- throw if device is null."
  },
  "api/MonoGame.Aseprite.AsepriteFileExtensions.CreateTileset.html": {
    "href": "api/MonoGame.Aseprite.AsepriteFileExtensions.CreateTileset.html",
    "title": "Method CreateTileset | MonoGame Aseprite",
    "keywords": "Method CreateTileset Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll CreateTileset(AsepriteFile, GraphicsDevice, int) Creates a new Tileset from the frame at the specified index in provided aseprite file. public static Tileset CreateTileset(this AsepriteFile aseFile, GraphicsDevice device, int frameIndex) Parameters aseFile AsepriteFile The aseprite file instance. device GraphicsDevice The graphics device used to create graphical resources. frameIndex int The index of the frame that contains the tileset. Returns Tileset The Tileset created by this method. Exceptions ArgumentNullException Thrown if the aseFile parameter is null. -or- Throw if the frameIndex is less than zero or greater than or equal to the total number of frames in the aseprite file -or- Thrown if the device parameter is null. CreateTileset(AsepriteFile, GraphicsDevice, string) Creates a new Tileset with the specified name in provided aseprite file. public static Tileset CreateTileset(this AsepriteFile aseFile, GraphicsDevice device, string tilesetName) Parameters aseFile AsepriteFile The aseprite file instance. device GraphicsDevice The graphics device used to create graphical resources. tilesetName string The name of the tileset. Returns Tileset The Tileset created by this method. Exceptions ArgumentNullException Thrown if the aseFile parameter is null. -or- Thrown if the device parameter is null. InvalidOperationException Throw if no tileset with the specified tilesetName exists in the aseprite file. CreateTileset(Tileset, GraphicsDevice) Creates a new Tileset from the specified aseprite tileset. public static Tileset CreateTileset(this Tileset aseTileset, GraphicsDevice device) Parameters aseTileset Tileset The Aseprite tileset to create the tileset from.. device GraphicsDevice The graphics device used to create graphical resources. Returns Tileset The Tileset created by this method. Exceptions ArgumentNullException Thrown if the aseTileset parameter is null. -or- Thrown if the device parameter is null."
  },
  "api/MonoGame.Aseprite.AsepriteFileExtensions.html": {
    "href": "api/MonoGame.Aseprite.AsepriteFileExtensions.html",
    "title": "Class AsepriteFileExtensions | MonoGame Aseprite",
    "keywords": "Class AsepriteFileExtensions Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll Extension methods for working with an Aseprite File loaded by the AsepriteDotNet library. public static class AsepriteFileExtensions Inheritance object AsepriteFileExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CreateAnimatedTilemap(AsepriteFile, GraphicsDevice, ProcessorOptions?) Creates a new AnimatedTilemap from the all frames in the provided aseprite file. CreateSprite(AsepriteFile, GraphicsDevice, int, ProcessorOptions?) Creates a new Sprite from the specified frame index of the provided aseprite file instance. CreateSpriteSheet(AsepriteFile, GraphicsDevice, ProcessorOptions?) Creates a new SpriteSheet from the provided aseprite file. CreateTextureAtlas(AsepriteFile, GraphicsDevice, ProcessorOptions?) Creates a new TextureAtlas from the provided aseprite file. CreateTilemap(AsepriteFile, GraphicsDevice, int, ProcessorOptions?) Creates a new Tilemap from a specified frame in the provided aseprite file. CreateTileset(AsepriteFile, GraphicsDevice, int) Creates a new Tileset from the frame at the specified index in provided aseprite file. CreateTileset(AsepriteFile, GraphicsDevice, string) Creates a new Tileset with the specified name in provided aseprite file. CreateTileset(Tileset, GraphicsDevice) Creates a new Tileset from the specified aseprite tileset."
  },
  "api/MonoGame.Aseprite.NinePatchSlice.CenterBounds.html": {
    "href": "api/MonoGame.Aseprite.NinePatchSlice.CenterBounds.html",
    "title": "Property CenterBounds | MonoGame Aseprite",
    "keywords": "Property CenterBounds Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll CenterBounds Gets the rectangular bounds of the center rectangle for this NinePatchSlice, relative to it's bounds. public Rectangle CenterBounds { get; } Property Value Rectangle"
  },
  "api/MonoGame.Aseprite.NinePatchSlice.html": {
    "href": "api/MonoGame.Aseprite.NinePatchSlice.html",
    "title": "Class NinePatchSlice | MonoGame Aseprite",
    "keywords": "Class NinePatchSlice Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll Defines a Slice with center bounds. public sealed class NinePatchSlice : Slice Inheritance object Slice NinePatchSlice Inherited Members Slice.Name Slice.Bounds Slice.Origin Slice.Color object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties CenterBounds Gets the rectangular bounds of the center rectangle for this NinePatchSlice, relative to it's bounds."
  },
  "api/MonoGame.Aseprite.Slice.Bounds.html": {
    "href": "api/MonoGame.Aseprite.Slice.Bounds.html",
    "title": "Property Bounds | MonoGame Aseprite",
    "keywords": "Property Bounds Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll Bounds Gets the rectangular bounds of this Slice relative to the bounds of the TextureRegion it is in. public Rectangle Bounds { get; } Property Value Rectangle"
  },
  "api/MonoGame.Aseprite.Slice.Color.html": {
    "href": "api/MonoGame.Aseprite.Slice.Color.html",
    "title": "Property Color | MonoGame Aseprite",
    "keywords": "Property Color Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll Color Gets the Microsoft.Xna.Framework.Color value assigned to this Slice. public Color Color { get; } Property Value Color"
  },
  "api/MonoGame.Aseprite.Slice.Name.html": {
    "href": "api/MonoGame.Aseprite.Slice.Name.html",
    "title": "Property Name | MonoGame Aseprite",
    "keywords": "Property Name Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll Name Gets the name assigned to this Slice. public string Name { get; } Property Value string"
  },
  "api/MonoGame.Aseprite.Slice.Origin.html": {
    "href": "api/MonoGame.Aseprite.Slice.Origin.html",
    "title": "Property Origin | MonoGame Aseprite",
    "keywords": "Property Origin Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll Origin Gets the x- and y-coordinate origin point for this Slice relative to the upper-left corner of the bonds of the TextureRegion it is in. public Vector2 Origin { get; } Property Value Vector2"
  },
  "api/MonoGame.Aseprite.Slice.html": {
    "href": "api/MonoGame.Aseprite.Slice.html",
    "title": "Class Slice | MonoGame Aseprite",
    "keywords": "Class Slice Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll Defines a named slice for a TextureRegion with a bounds, origin, and color. public class Slice Inheritance object Slice Derived NinePatchSlice Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Bounds Gets the rectangular bounds of this Slice relative to the bounds of the TextureRegion it is in. Color Gets the Microsoft.Xna.Framework.Color value assigned to this Slice. Name Gets the name assigned to this Slice. Origin Gets the x- and y-coordinate origin point for this Slice relative to the upper-left corner of the bonds of the TextureRegion it is in."
  },
  "api/MonoGame.Aseprite.Sprite.-ctor.html": {
    "href": "api/MonoGame.Aseprite.Sprite.-ctor.html",
    "title": "Constructor Sprite | MonoGame Aseprite",
    "keywords": "Constructor Sprite Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll Sprite(string, TextureRegion) Initializes a new instance of the Sprite class. public Sprite(string name, TextureRegion textureRegion) Parameters name string The name to assign the Sprite. textureRegion TextureRegion The source TextureRegion to assign the Sprite. Sprite(string, Texture2D) Initializes a new instance of the Sprite class. public Sprite(string name, Texture2D texture) Parameters name string The name to assign the Sprite. texture Texture2D The source image for the Sprite."
  },
  "api/MonoGame.Aseprite.Sprite.Color.html": {
    "href": "api/MonoGame.Aseprite.Sprite.Color.html",
    "title": "Property Color | MonoGame Aseprite",
    "keywords": "Property Color Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll Color Gets or Sets the color mask to apply when rendering this Sprite. public Color Color { get; set; } Property Value Color"
  },
  "api/MonoGame.Aseprite.Sprite.Draw.html": {
    "href": "api/MonoGame.Aseprite.Sprite.Draw.html",
    "title": "Method Draw | MonoGame Aseprite",
    "keywords": "Method Draw Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll Draw(SpriteBatch, Vector2) Renders this Sprite. public void Draw(SpriteBatch spriteBatch, Vector2 position) Parameters spriteBatch SpriteBatch The Microsoft.Xna.Framework.Graphics.SpriteBatch to use for rendering thisSprite. position Vector2 The x- and y-coordinate location to render this Sprite at."
  },
  "api/MonoGame.Aseprite.Sprite.FlipHorizontally.html": {
    "href": "api/MonoGame.Aseprite.Sprite.FlipHorizontally.html",
    "title": "Property FlipHorizontally | MonoGame Aseprite",
    "keywords": "Property FlipHorizontally Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll FlipHorizontally Gets or Sets a value that indicates whether to flip this Sprite horizontally when rendering. public bool FlipHorizontally { get; set; } Property Value bool"
  },
  "api/MonoGame.Aseprite.Sprite.FlipVertically.html": {
    "href": "api/MonoGame.Aseprite.Sprite.FlipVertically.html",
    "title": "Property FlipVertically | MonoGame Aseprite",
    "keywords": "Property FlipVertically Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll FlipVertically Gets or Sets a value that indicates whether to flip this Sprite vertically when rendering. public bool FlipVertically { get; set; } Property Value bool"
  },
  "api/MonoGame.Aseprite.Sprite.Height.html": {
    "href": "api/MonoGame.Aseprite.Sprite.Height.html",
    "title": "Property Height | MonoGame Aseprite",
    "keywords": "Property Height Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll Height Gets the height, in pixels, of this Sprite public int Height { get; } Property Value int"
  },
  "api/MonoGame.Aseprite.Sprite.IsVisible.html": {
    "href": "api/MonoGame.Aseprite.Sprite.IsVisible.html",
    "title": "Property IsVisible | MonoGame Aseprite",
    "keywords": "Property IsVisible Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll IsVisible Gets or Sets a value that indicates if this Sprite is visible and can be rendered. public bool IsVisible { get; set; } Property Value bool"
  },
  "api/MonoGame.Aseprite.Sprite.LayerDepth.html": {
    "href": "api/MonoGame.Aseprite.Sprite.LayerDepth.html",
    "title": "Property LayerDepth | MonoGame Aseprite",
    "keywords": "Property LayerDepth Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll LayerDepth Gets or Sets the layer depth to render this Sprite at. public float LayerDepth { get; set; } Property Value float"
  },
  "api/MonoGame.Aseprite.Sprite.Name.html": {
    "href": "api/MonoGame.Aseprite.Sprite.Name.html",
    "title": "Property Name | MonoGame Aseprite",
    "keywords": "Property Name Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll Name Gets the name assigned to this Sprite. public string Name { get; } Property Value string"
  },
  "api/MonoGame.Aseprite.Sprite.Origin.html": {
    "href": "api/MonoGame.Aseprite.Sprite.Origin.html",
    "title": "Property Origin | MonoGame Aseprite",
    "keywords": "Property Origin Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll Origin Gets or Sets the x- and y-coordinate point of origin to apply when rendering this Sprite. public Vector2 Origin { get; set; } Property Value Vector2"
  },
  "api/MonoGame.Aseprite.Sprite.OriginX.html": {
    "href": "api/MonoGame.Aseprite.Sprite.OriginX.html",
    "title": "Property OriginX | MonoGame Aseprite",
    "keywords": "Property OriginX Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll OriginX Gets or Sets the x-coordinate point of origin to apply when rendering this Sprite. public float OriginX { get; set; } Property Value float"
  },
  "api/MonoGame.Aseprite.Sprite.OriginY.html": {
    "href": "api/MonoGame.Aseprite.Sprite.OriginY.html",
    "title": "Property OriginY | MonoGame Aseprite",
    "keywords": "Property OriginY Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll OriginY Gets or Sets the y-coordinate point of origin to apply when rendering this Sprite. public float OriginY { get; set; } Property Value float"
  },
  "api/MonoGame.Aseprite.Sprite.Rotation.html": {
    "href": "api/MonoGame.Aseprite.Sprite.Rotation.html",
    "title": "Property Rotation | MonoGame Aseprite",
    "keywords": "Property Rotation Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll Rotation Gets or Sets the rotation, in radians, to apply when rendering this Sprite. public float Rotation { get; set; } Property Value float"
  },
  "api/MonoGame.Aseprite.Sprite.Scale.html": {
    "href": "api/MonoGame.Aseprite.Sprite.Scale.html",
    "title": "Property Scale | MonoGame Aseprite",
    "keywords": "Property Scale Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll Scale Gets or Sets the x- and y-axis scale factor to use when rendering this Sprite. public Vector2 Scale { get; set; } Property Value Vector2"
  },
  "api/MonoGame.Aseprite.Sprite.ScaleX.html": {
    "href": "api/MonoGame.Aseprite.Sprite.ScaleX.html",
    "title": "Property ScaleX | MonoGame Aseprite",
    "keywords": "Property ScaleX Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll ScaleX Gets or Sets the x-axis scale factor to use when rendering this Sprite. public float ScaleX { get; set; } Property Value float"
  },
  "api/MonoGame.Aseprite.Sprite.ScaleY.html": {
    "href": "api/MonoGame.Aseprite.Sprite.ScaleY.html",
    "title": "Property ScaleY | MonoGame Aseprite",
    "keywords": "Property ScaleY Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll ScaleY Gets or Sets the y-axis scale factor to use when rendering this Sprite. public float ScaleY { get; set; } Property Value float"
  },
  "api/MonoGame.Aseprite.Sprite.SpriteEffects.html": {
    "href": "api/MonoGame.Aseprite.Sprite.SpriteEffects.html",
    "title": "Property SpriteEffects | MonoGame Aseprite",
    "keywords": "Property SpriteEffects Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll SpriteEffects Gets or Sets the Microsoft.Xna.Framework.Graphics.SpriteEffects to apply for vertical and horizontal flipping when rendering this Sprite. public SpriteEffects SpriteEffects { get; set; } Property Value SpriteEffects"
  },
  "api/MonoGame.Aseprite.Sprite.TextureRegion.html": {
    "href": "api/MonoGame.Aseprite.Sprite.TextureRegion.html",
    "title": "Property TextureRegion | MonoGame Aseprite",
    "keywords": "Property TextureRegion Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll TextureRegion Gets the source TextureRegion of this Sprite. public TextureRegion TextureRegion { get; protected set; } Property Value TextureRegion"
  },
  "api/MonoGame.Aseprite.Sprite.Transparency.html": {
    "href": "api/MonoGame.Aseprite.Sprite.Transparency.html",
    "title": "Property Transparency | MonoGame Aseprite",
    "keywords": "Property Transparency Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll Transparency Gets or Sets the level of transparency, between 0.0f, and 1.0f, to apply when rendering this Sprite. public float Transparency { get; set; } Property Value float"
  },
  "api/MonoGame.Aseprite.Sprite.Width.html": {
    "href": "api/MonoGame.Aseprite.Sprite.Width.html",
    "title": "Property Width | MonoGame Aseprite",
    "keywords": "Property Width Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll Width Gets the width, in pixels, of this Sprite public int Width { get; } Property Value int"
  },
  "api/MonoGame.Aseprite.Sprite.html": {
    "href": "api/MonoGame.Aseprite.Sprite.html",
    "title": "Class Sprite | MonoGame Aseprite",
    "keywords": "Class Sprite Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll Defines a named sprite public class Sprite Inheritance object Sprite Derived AnimatedSprite Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Sprite(string, Texture2D) Initializes a new instance of the Sprite class. Sprite(string, TextureRegion) Initializes a new instance of the Sprite class. Properties Color Gets or Sets the color mask to apply when rendering this Sprite. FlipHorizontally Gets or Sets a value that indicates whether to flip this Sprite horizontally when rendering. FlipVertically Gets or Sets a value that indicates whether to flip this Sprite vertically when rendering. Height Gets the height, in pixels, of this Sprite IsVisible Gets or Sets a value that indicates if this Sprite is visible and can be rendered. LayerDepth Gets or Sets the layer depth to render this Sprite at. Name Gets the name assigned to this Sprite. Origin Gets or Sets the x- and y-coordinate point of origin to apply when rendering this Sprite. OriginX Gets or Sets the x-coordinate point of origin to apply when rendering this Sprite. OriginY Gets or Sets the y-coordinate point of origin to apply when rendering this Sprite. Rotation Gets or Sets the rotation, in radians, to apply when rendering this Sprite. Scale Gets or Sets the x- and y-axis scale factor to use when rendering this Sprite. ScaleX Gets or Sets the x-axis scale factor to use when rendering this Sprite. ScaleY Gets or Sets the y-axis scale factor to use when rendering this Sprite. SpriteEffects Gets or Sets the Microsoft.Xna.Framework.Graphics.SpriteEffects to apply for vertical and horizontal flipping when rendering this Sprite. TextureRegion Gets the source TextureRegion of this Sprite. Transparency Gets or Sets the level of transparency, between 0.0f, and 1.0f, to apply when rendering this Sprite. Width Gets the width, in pixels, of this Sprite Methods Draw(SpriteBatch, Vector2) Renders this Sprite."
  },
  "api/MonoGame.Aseprite.SpriteBatchExtensions.Draw.html": {
    "href": "api/MonoGame.Aseprite.SpriteBatchExtensions.Draw.html",
    "title": "Method Draw | MonoGame Aseprite",
    "keywords": "Method Draw Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll Draw(SpriteBatch, TextureRegion, Rectangle, Color) Draws a TextureRegion using the Microsoft.Xna.Framework.Graphics.SpriteBatch. public static void Draw(this SpriteBatch spriteBatch, TextureRegion region, Rectangle destinationRectangle, Color color) Parameters spriteBatch SpriteBatch The Microsoft.Xna.Framework.Graphics.SpriteBatch to use for rendering. region TextureRegion The TextureRegion to render. destinationRectangle Rectangle A rectangular bound that defines the destination to render the TextureRegion into. color Color The color mask to apply when rendering the TextureRegion. Draw(SpriteBatch, TextureRegion, Vector2, Color) Draws a TextureRegion using the Microsoft.Xna.Framework.Graphics.SpriteBatch. public static void Draw(this SpriteBatch spriteBatch, TextureRegion region, Vector2 position, Color color) Parameters spriteBatch SpriteBatch The Microsoft.Xna.Framework.Graphics.SpriteBatch to use for rendering. region TextureRegion The TextureRegion to render. position Vector2 The x- and y-coordinate location to render the TextureRegion at. color Color The color mask to apply when rendering the TextureRegion. Draw(SpriteBatch, TextureRegion, Vector2, Color, float, Vector2, float, SpriteEffects, float) Draws a TextureRegion using the Microsoft.Xna.Framework.Graphics.SpriteBatch. public static void Draw(this SpriteBatch spriteBatch, TextureRegion region, Vector2 position, Color color, float rotation, Vector2 origin, float scale, SpriteEffects effects, float layerDepth) Parameters spriteBatch SpriteBatch The Microsoft.Xna.Framework.Graphics.SpriteBatch to use for rendering. region TextureRegion The TextureRegion to render. position Vector2 The x- and y-coordinate location to render the TextureRegion at. color Color The color mask to apply when rendering the TextureRegion. rotation float The amount of rotation, in radians, to apply when rendering the TextureRegion. origin Vector2 The x- and y-coordinate point of origin to apply when rendering the TextureRegion. scale float The amount of scaling to apply when rendering the TextureRegion. effects SpriteEffects The Microsoft.Xna.Framework.Graphics.SpriteEffects to apply for horizontal and vertical axis flipping when rendering the TextureRegion. layerDepth float The layer depth to apply when rendering the TextureRegion. Draw(SpriteBatch, TextureRegion, Vector2, Color, float, Vector2, Vector2, SpriteEffects, float) Draws a TextureRegion using the Microsoft.Xna.Framework.Graphics.SpriteBatch. public static void Draw(this SpriteBatch spriteBatch, TextureRegion region, Vector2 position, Color color, float rotation, Vector2 origin, Vector2 scale, SpriteEffects effects, float layerDepth) Parameters spriteBatch SpriteBatch The Microsoft.Xna.Framework.Graphics.SpriteBatch to use for rendering. region TextureRegion The TextureRegion to render. position Vector2 The x- and y-coordinate location to render the TextureRegion at. color Color The color mask to apply when rendering the TextureRegion. rotation float The amount of rotation, in radians, to apply when rendering the TextureRegion. origin Vector2 The x- and y-coordinate point of origin to apply when rendering the TextureRegion. scale Vector2 The amount of scaling to apply when rendering the TextureRegion. effects SpriteEffects The Microsoft.Xna.Framework.Graphics.SpriteEffects to apply for horizontal and vertical axis flipping when rendering the TextureRegion. layerDepth float The layer depth to apply when rendering the TextureRegion. Draw(SpriteBatch, TextureRegion, Rectangle, Color, float, Vector2, SpriteEffects, float) Draws a TextureRegion using the Microsoft.Xna.Framework.Graphics.SpriteBatch. public static void Draw(this SpriteBatch spriteBatch, TextureRegion region, Rectangle destinationRectangle, Color color, float rotation, Vector2 origin, SpriteEffects effects, float layerDepth) Parameters spriteBatch SpriteBatch The Microsoft.Xna.Framework.Graphics.SpriteBatch to use for rendering. region TextureRegion The TextureRegion to render. destinationRectangle Rectangle A rectangular bound that defines the destination to render the TextureRegion into. color Color The color mask to apply when rendering the TextureRegion. rotation float The amount of rotation, in radians, to apply when rendering the TextureRegion. origin Vector2 The x- and y-coordinate point of origin to apply when rendering the TextureRegion. effects SpriteEffects The Microsoft.Xna.Framework.Graphics.SpriteEffects to apply for horizontal and vertical axis flipping when rendering the TextureRegion. layerDepth float The layer depth to apply when rendering the TextureRegion. Draw(SpriteBatch, Sprite, Vector2) Draws a Sprite using the Microsoft.Xna.Framework.Graphics.SpriteBatch. public static void Draw(this SpriteBatch spriteBatch, Sprite sprite, Vector2 position) Parameters spriteBatch SpriteBatch The Microsoft.Xna.Framework.Graphics.SpriteBatch to use for rendering the Sprite. sprite Sprite The Sprite to render. position Vector2 The x- and y-coordinate location to render the Sprite at. Draw(SpriteBatch, AnimatedTilemap, Vector2, Color) Draws an AnimatedTilemap using the Microsoft.Xna.Framework.Graphics.SpriteBatch. public static void Draw(this SpriteBatch spriteBatch, AnimatedTilemap animatedTilemap, Vector2 position, Color color) Parameters spriteBatch SpriteBatch The Microsoft.Xna.Framework.Graphics.SpriteBatch to use for rendering the AnimatedTilemap. animatedTilemap AnimatedTilemap The AnimatedTilemap to draw. position Vector2 The x- and y-coordinate location to render the AnimatedTilemap at. color Color The color mask to apply when rendering the AnimatedTilemap. Draw(SpriteBatch, AnimatedTilemap, Vector2, Color, float, float) Draws an AnimatedTilemap using the Microsoft.Xna.Framework.Graphics.SpriteBatch. public static void Draw(this SpriteBatch spriteBatch, AnimatedTilemap animatedTilemap, Vector2 position, Color color, float scale, float layerDepth) Parameters spriteBatch SpriteBatch The Microsoft.Xna.Framework.Graphics.SpriteBatch to use for rendering the AnimatedTilemap. animatedTilemap AnimatedTilemap The AnimatedTilemap to draw. position Vector2 The x- and y-coordinate location to render the AnimatedTilemap at. color Color The color mask to apply when rendering the AnimatedTilemap. scale float The amount of scaling to apply when rendering the AnimatedTilemap. layerDepth float The layer depth to apply when rendering the AnimatedTilemap. Draw(SpriteBatch, AnimatedTilemap, Vector2, Color, Vector2, float) Draws an AnimatedTilemap using the Microsoft.Xna.Framework.Graphics.SpriteBatch. public static void Draw(this SpriteBatch spriteBatch, AnimatedTilemap animatedTilemap, Vector2 position, Color color, Vector2 scale, float layerDepth) Parameters spriteBatch SpriteBatch The Microsoft.Xna.Framework.Graphics.SpriteBatch to use for rendering the AnimatedTilemap. animatedTilemap AnimatedTilemap The AnimatedTilemap to draw. position Vector2 The x- and y-coordinate location to render the AnimatedTilemap at. color Color The color mask to apply when rendering the AnimatedTilemap. scale Vector2 The amount of scaling to apply when rendering the AnimatedTilemap. layerDepth float The layer depth to apply when rendering the AnimatedTilemap. Draw(SpriteBatch, Tilemap, Vector2, Color) Draws a Tilemap using the Microsoft.Xna.Framework.Graphics.SpriteBatch. public static void Draw(this SpriteBatch spriteBatch, Tilemap tilemap, Vector2 position, Color color) Parameters spriteBatch SpriteBatch The Microsoft.Xna.Framework.Graphics.SpriteBatch to use for rendering the Tilemap. tilemap Tilemap The Tilemap to draw. position Vector2 The x- and y-coordinate location to render the Tilemap at. color Color The color mask to apply when rendering the Tilemap. Draw(SpriteBatch, Tilemap, Vector2, Color, float, float) Draws a Tilemap using the Microsoft.Xna.Framework.Graphics.SpriteBatch. public static void Draw(this SpriteBatch spriteBatch, Tilemap tilemap, Vector2 position, Color color, float scale, float layerDepth) Parameters spriteBatch SpriteBatch The Microsoft.Xna.Framework.Graphics.SpriteBatch to use for rendering the Tilemap. tilemap Tilemap The Tilemap to draw. position Vector2 The x- and y-coordinate location to render the Tilemap at. color Color The color mask to apply when rendering the Tilemap. scale float The amount of scaling to apply when rendering the Tilemap. layerDepth float The layer depth to apply when rendering the Tilemap. Draw(SpriteBatch, Tilemap, Vector2, Color, Vector2, float) Draws a Tilemap using the Microsoft.Xna.Framework.Graphics.SpriteBatch. public static void Draw(this SpriteBatch spriteBatch, Tilemap tilemap, Vector2 position, Color color, Vector2 scale, float layerDepth) Parameters spriteBatch SpriteBatch The Microsoft.Xna.Framework.Graphics.SpriteBatch to use for rendering the Tilemap. tilemap Tilemap The Tilemap to draw. position Vector2 The x- and y-coordinate location to render the Tilemap at. color Color The color mask to apply when rendering the Tilemap. scale Vector2 The amount of scaling to apply when rendering the Tilemap. layerDepth float The layer depth to apply when rendering the Tilemap. Draw(SpriteBatch, TilemapLayer, Vector2, Color) Draws a TilemapLayer layer using the Microsoft.Xna.Framework.Graphics.SpriteBatch. public static void Draw(this SpriteBatch spriteBatch, TilemapLayer layer, Vector2 position, Color color) Parameters spriteBatch SpriteBatch The Microsoft.Xna.Framework.Graphics.SpriteBatch to use for rendering the TilemapLayer. layer TilemapLayer The TilemapLayer to draw. position Vector2 The x- and y-coordinate location to draw the TilemapLayer at. Drawing the TilemapLayer using this method ignores the Offset. color Color The color mask to apply when rendering the TilemapLayer. Draw(SpriteBatch, TilemapLayer, Vector2, Color, float, float) Draws a TilemapLayer layer using the Microsoft.Xna.Framework.Graphics.SpriteBatch. public static void Draw(this SpriteBatch spriteBatch, TilemapLayer layer, Vector2 position, Color color, float scale, float layerDepth) Parameters spriteBatch SpriteBatch The Microsoft.Xna.Framework.Graphics.SpriteBatch to use for rendering the TilemapLayer. layer TilemapLayer The TilemapLayer to draw. position Vector2 The x- and y-coordinate location to draw the TilemapLayer at. Drawing the TilemapLayer using this method ignores the Offset. color Color The color mask to apply when rendering the TilemapLayer. scale float The amount of scaling to apply when rendering the TilemapLayer. layerDepth float The layer depth to apply when rendering the TilemapLayer. Draw(SpriteBatch, TilemapLayer, Vector2, Color, Vector2, float) Draws a TilemapLayer layer using the Microsoft.Xna.Framework.Graphics.SpriteBatch. public static void Draw(this SpriteBatch spriteBatch, TilemapLayer layer, Vector2 position, Color color, Vector2 scale, float layerDepth) Parameters spriteBatch SpriteBatch The Microsoft.Xna.Framework.Graphics.SpriteBatch to use for rendering the TilemapLayer. layer TilemapLayer The TilemapLayer to draw. position Vector2 The x- and y-coordinate location to draw the TilemapLayer at. Drawing the TilemapLayer using this method ignores the Offset. color Color The color mask to apply when rendering the TilemapLayer. scale Vector2 The amount of scaling to apply when rendering the TilemapLayer. layerDepth float The layer depth to apply when rendering the TilemapLayer."
  },
  "api/MonoGame.Aseprite.SpriteBatchExtensions.html": {
    "href": "api/MonoGame.Aseprite.SpriteBatchExtensions.html",
    "title": "Class SpriteBatchExtensions | MonoGame Aseprite",
    "keywords": "Class SpriteBatchExtensions Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll Defines extension methods for the Microsoft.Xna.Framework.Graphics.SpriteBatch to render graphical resource types in this library. public static class SpriteBatchExtensions Inheritance object SpriteBatchExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Draw(SpriteBatch, AnimatedTilemap, Vector2, Color) Draws an AnimatedTilemap using the Microsoft.Xna.Framework.Graphics.SpriteBatch. Draw(SpriteBatch, AnimatedTilemap, Vector2, Color, Vector2, float) Draws an AnimatedTilemap using the Microsoft.Xna.Framework.Graphics.SpriteBatch. Draw(SpriteBatch, AnimatedTilemap, Vector2, Color, float, float) Draws an AnimatedTilemap using the Microsoft.Xna.Framework.Graphics.SpriteBatch. Draw(SpriteBatch, Sprite, Vector2) Draws a Sprite using the Microsoft.Xna.Framework.Graphics.SpriteBatch. Draw(SpriteBatch, TextureRegion, Rectangle, Color) Draws a TextureRegion using the Microsoft.Xna.Framework.Graphics.SpriteBatch. Draw(SpriteBatch, TextureRegion, Rectangle, Color, float, Vector2, SpriteEffects, float) Draws a TextureRegion using the Microsoft.Xna.Framework.Graphics.SpriteBatch. Draw(SpriteBatch, TextureRegion, Vector2, Color) Draws a TextureRegion using the Microsoft.Xna.Framework.Graphics.SpriteBatch. Draw(SpriteBatch, TextureRegion, Vector2, Color, float, Vector2, Vector2, SpriteEffects, float) Draws a TextureRegion using the Microsoft.Xna.Framework.Graphics.SpriteBatch. Draw(SpriteBatch, TextureRegion, Vector2, Color, float, Vector2, float, SpriteEffects, float) Draws a TextureRegion using the Microsoft.Xna.Framework.Graphics.SpriteBatch. Draw(SpriteBatch, Tilemap, Vector2, Color) Draws a Tilemap using the Microsoft.Xna.Framework.Graphics.SpriteBatch. Draw(SpriteBatch, Tilemap, Vector2, Color, Vector2, float) Draws a Tilemap using the Microsoft.Xna.Framework.Graphics.SpriteBatch. Draw(SpriteBatch, Tilemap, Vector2, Color, float, float) Draws a Tilemap using the Microsoft.Xna.Framework.Graphics.SpriteBatch. Draw(SpriteBatch, TilemapLayer, Vector2, Color) Draws a TilemapLayer layer using the Microsoft.Xna.Framework.Graphics.SpriteBatch. Draw(SpriteBatch, TilemapLayer, Vector2, Color, Vector2, float) Draws a TilemapLayer layer using the Microsoft.Xna.Framework.Graphics.SpriteBatch. Draw(SpriteBatch, TilemapLayer, Vector2, Color, float, float) Draws a TilemapLayer layer using the Microsoft.Xna.Framework.Graphics.SpriteBatch."
  },
  "api/MonoGame.Aseprite.SpriteSheet.-ctor.html": {
    "href": "api/MonoGame.Aseprite.SpriteSheet.-ctor.html",
    "title": "Constructor SpriteSheet | MonoGame Aseprite",
    "keywords": "Constructor SpriteSheet Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll SpriteSheet(string, TextureAtlas) Initializes a new instance of the SpriteSheet class. public SpriteSheet(string name, TextureAtlas atlas) Parameters name string The name assign the SpriteSheet. atlas TextureAtlas The source TextureAtlas to give the SpriteSheet."
  },
  "api/MonoGame.Aseprite.SpriteSheet.AnimationTagCount.html": {
    "href": "api/MonoGame.Aseprite.SpriteSheet.AnimationTagCount.html",
    "title": "Property AnimationTagCount | MonoGame Aseprite",
    "keywords": "Property AnimationTagCount Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll AnimationTagCount Gets the total number of AnimationTag elements that have been defined for this SpriteSheet. public int AnimationTagCount { get; } Property Value int"
  },
  "api/MonoGame.Aseprite.SpriteSheet.ContainsAnimationTag.html": {
    "href": "api/MonoGame.Aseprite.SpriteSheet.ContainsAnimationTag.html",
    "title": "Method ContainsAnimationTag | MonoGame Aseprite",
    "keywords": "Method ContainsAnimationTag Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll ContainsAnimationTag(string) Returns a value that indicates whether this SpriteSheet contains an AnimationTag with the specified name. public bool ContainsAnimationTag(string name) Parameters name string The name of the AnimationTag element to locate. Returns bool true if this SpriteSheet contains an AnimationTag with the specified name; otherwise, false."
  },
  "api/MonoGame.Aseprite.SpriteSheet.CreateAnimatedSprite.html": {
    "href": "api/MonoGame.Aseprite.SpriteSheet.CreateAnimatedSprite.html",
    "title": "Method CreateAnimatedSprite | MonoGame Aseprite",
    "keywords": "Method CreateAnimatedSprite Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll CreateAnimatedSprite(string) Creates a new AnimatedSprite using the AnimationTag element with the specified name in this SpriteSheet. public AnimatedSprite CreateAnimatedSprite(string tagName) Parameters tagName string The name of the AnimationTag element in this SpriteSheet to create the AnimatedSprite with. Returns AnimatedSprite The AnimatedSprite that is created by this method. Exceptions KeyNotFoundException Thrown if this SpriteSheet does not contain an AnimationTag element with the specified name."
  },
  "api/MonoGame.Aseprite.SpriteSheet.CreateAnimationTag.html": {
    "href": "api/MonoGame.Aseprite.SpriteSheet.CreateAnimationTag.html",
    "title": "Method CreateAnimationTag | MonoGame Aseprite",
    "keywords": "Method CreateAnimationTag Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll CreateAnimationTag(string, Action<AnimationTagBuilder>) Creates a new AnimationTag and adds it to this SpriteSheet. public AnimationTag CreateAnimationTag(string name, Action<AnimationTagBuilder> builder) Parameters name string The name to assign the AnimationTag that is created by this method. This name must be unique across all AnimationTag elements defined in this SpriteSheet. builder Action<AnimationTagBuilder> An Action method used to build the AnimationTag with an AnimationTagBuilder. Returns AnimationTag The AnimationTag that is created by this method. Exceptions InvalidOperationException Thrown if this SpriteSheet already contains an AnimationTag element with the name specified."
  },
  "api/MonoGame.Aseprite.SpriteSheet.CreateSprite.html": {
    "href": "api/MonoGame.Aseprite.SpriteSheet.CreateSprite.html",
    "title": "Method CreateSprite | MonoGame Aseprite",
    "keywords": "Method CreateSprite Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll CreateSprite(string, int) Creates a new Sprite from the TextureRegion at the specified index in the TextureAtlas of this SpriteSheet. public Sprite CreateSprite(string spriteName, int regionIndex) Parameters spriteName string The name to assign the Sprite that is created. regionIndex int The index of the TextureRegion element in the TextureAtlas assign the Sprite that is created. Returns Sprite The Sprite that is created by this method. Exceptions ArgumentOutOfRangeException Thrown if the specified index is less than zero or is greater than or equal to the total number of TextureRegion elements in the TextureAtlas. CreateSprite(int) Creates a new Sprite from the TextureRegion at the specified index in the TextureAtlas of this SpriteSheet. public Sprite CreateSprite(int regionIndex) Parameters regionIndex int The index of the TextureRegion element to assign the Sprite that is created. Returns Sprite The Sprite that is created by this method. Exceptions ArgumentOutOfRangeException Thrown if the specified index is less than zero or is greater than or equal to the total number of TextureRegion elements in the TextureAtlas. CreateSprite(string, string) Creates a new Sprite from the TextureRegion at the specified index in the TextureAtlas of this SpriteSheet. public Sprite CreateSprite(string spriteName, string regionName) Parameters spriteName string The name to assign the Sprite that is created. regionName string The name of the TextureRegion element in the TextureAtlas assign the Sprite that is created. Returns Sprite The Sprite that is created by this method. Exceptions KeyNotFoundException Thrown if the TextureAtlas does not contain a TextureRegion with the name specified. CreateSprite(string) Creates a new Sprite from the TextureRegion at the specified index in the TextureAtlas of this SpriteSheet. public Sprite CreateSprite(string regionName) Parameters regionName string The name of the TextureRegion element in the TextureAtlas assign the Sprite that is created. Returns Sprite The Sprite that is created by this method. Exceptions KeyNotFoundException Thrown if the TextureAtlas does not contain a TextureRegion with the name specified."
  },
  "api/MonoGame.Aseprite.SpriteSheet.GetAnimationTag.html": {
    "href": "api/MonoGame.Aseprite.SpriteSheet.GetAnimationTag.html",
    "title": "Method GetAnimationTag | MonoGame Aseprite",
    "keywords": "Method GetAnimationTag Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll GetAnimationTag(string) Gets the AnimationTag element with the specified name in this SpriteSheet. public AnimationTag GetAnimationTag(string name) Parameters name string The name of the AnimationTag to locate. Returns AnimationTag The AnimationTag that was located. Exceptions KeyNotFoundException Thrown if this SpriteSheet does not contain an AnimationTag element with the specified name."
  },
  "api/MonoGame.Aseprite.SpriteSheet.GetAnimationTagNames.html": {
    "href": "api/MonoGame.Aseprite.SpriteSheet.GetAnimationTagNames.html",
    "title": "Method GetAnimationTagNames | MonoGame Aseprite",
    "keywords": "Method GetAnimationTagNames Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll GetAnimationTagNames() Returns a new List<T> containing the name of all AnimationTag elements that have been defined in this SpriteSheet. public List<string> GetAnimationTagNames() Returns List<string> A new List<T> containing the name of all AnimationTag elements that have been defined in this SpriteSheet."
  },
  "api/MonoGame.Aseprite.SpriteSheet.Name.html": {
    "href": "api/MonoGame.Aseprite.SpriteSheet.Name.html",
    "title": "Property Name | MonoGame Aseprite",
    "keywords": "Property Name Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll Name Gets the name assigned to this SpriteSheet. public string Name { get; } Property Value string"
  },
  "api/MonoGame.Aseprite.SpriteSheet.RemoveAnimationTag.html": {
    "href": "api/MonoGame.Aseprite.SpriteSheet.RemoveAnimationTag.html",
    "title": "Method RemoveAnimationTag | MonoGame Aseprite",
    "keywords": "Method RemoveAnimationTag Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll RemoveAnimationTag(string) Removes the AnimationTag element with the specified name from this SpriteSheet. public bool RemoveAnimationTag(string name) Parameters name string The name of the AnimationTag element to remove from this SpriteSheet. Returns bool true if the AnimationTag element was successfully removed from this SpriteSheet; otherwise, false. This method returns false if this SpriteSheet does not contain an AnimationTag element with the specified name."
  },
  "api/MonoGame.Aseprite.SpriteSheet.TextureAtlas.html": {
    "href": "api/MonoGame.Aseprite.SpriteSheet.TextureAtlas.html",
    "title": "Property TextureAtlas | MonoGame Aseprite",
    "keywords": "Property TextureAtlas Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll TextureAtlas Gets the source TextureAtlas of this SpriteSheet. public TextureAtlas TextureAtlas { get; } Property Value TextureAtlas"
  },
  "api/MonoGame.Aseprite.SpriteSheet.TryGetAnimationTag.html": {
    "href": "api/MonoGame.Aseprite.SpriteSheet.TryGetAnimationTag.html",
    "title": "Method TryGetAnimationTag | MonoGame Aseprite",
    "keywords": "Method TryGetAnimationTag Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll TryGetAnimationTag(string, out AnimationTag?) Gets the AnimationTag element with the specified name in this SpriteSheet. public bool TryGetAnimationTag(string name, out AnimationTag? tag) Parameters name string The name of the AnimationTag to locate. tag AnimationTag When this method returns true, contains the AnimationTag located; otherwise, null Returns bool true if the AnimationTag was located; otherwise, false. This method returns false if this SpriteSheet does not contain an AnimationTag element with the specified name."
  },
  "api/MonoGame.Aseprite.SpriteSheet.html": {
    "href": "api/MonoGame.Aseprite.SpriteSheet.html",
    "title": "Class SpriteSheet | MonoGame Aseprite",
    "keywords": "Class SpriteSheet Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll Defines a spritesheet with a source TextureAtlas and methods for creating Sprite and AnimatedSprite elements. public sealed class SpriteSheet Inheritance object SpriteSheet Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors SpriteSheet(string, TextureAtlas) Initializes a new instance of the SpriteSheet class. Properties AnimationTagCount Gets the total number of AnimationTag elements that have been defined for this SpriteSheet. Name Gets the name assigned to this SpriteSheet. TextureAtlas Gets the source TextureAtlas of this SpriteSheet. Methods ContainsAnimationTag(string) Returns a value that indicates whether this SpriteSheet contains an AnimationTag with the specified name. CreateAnimatedSprite(string) Creates a new AnimatedSprite using the AnimationTag element with the specified name in this SpriteSheet. CreateAnimationTag(string, Action<AnimationTagBuilder>) Creates a new AnimationTag and adds it to this SpriteSheet. CreateSprite(int) Creates a new Sprite from the TextureRegion at the specified index in the TextureAtlas of this SpriteSheet. CreateSprite(string) Creates a new Sprite from the TextureRegion at the specified index in the TextureAtlas of this SpriteSheet. CreateSprite(string, int) Creates a new Sprite from the TextureRegion at the specified index in the TextureAtlas of this SpriteSheet. CreateSprite(string, string) Creates a new Sprite from the TextureRegion at the specified index in the TextureAtlas of this SpriteSheet. GetAnimationTag(string) Gets the AnimationTag element with the specified name in this SpriteSheet. GetAnimationTagNames() Returns a new List<T> containing the name of all AnimationTag elements that have been defined in this SpriteSheet. RemoveAnimationTag(string) Removes the AnimationTag element with the specified name from this SpriteSheet. TryGetAnimationTag(string, out AnimationTag?) Gets the AnimationTag element with the specified name in this SpriteSheet."
  },
  "api/MonoGame.Aseprite.TextureAtlas.-ctor.html": {
    "href": "api/MonoGame.Aseprite.TextureAtlas.-ctor.html",
    "title": "Constructor TextureAtlas | MonoGame Aseprite",
    "keywords": "Constructor TextureAtlas Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll TextureAtlas(string, Texture2D) Initializes a new instance of the TextureAtlas class. public TextureAtlas(string name, Texture2D texture) Parameters name string The name to assign the TextureAtlas. texture Texture2D The source image to give the TextureAtlas."
  },
  "api/MonoGame.Aseprite.TextureAtlas.Clear.html": {
    "href": "api/MonoGame.Aseprite.TextureAtlas.Clear.html",
    "title": "Method Clear | MonoGame Aseprite",
    "keywords": "Method Clear Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll Clear() Removes all TextureRegion elements from this TextureAtlas. public void Clear()"
  },
  "api/MonoGame.Aseprite.TextureAtlas.ContainsRegion.html": {
    "href": "api/MonoGame.Aseprite.TextureAtlas.ContainsRegion.html",
    "title": "Method ContainsRegion | MonoGame Aseprite",
    "keywords": "Method ContainsRegion Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll ContainsRegion(string) Returns a value that indicates whether this TextureAtlas contains a TextureRegion element with the specified name. public bool ContainsRegion(string name) Parameters name string The name of the TextureRegion to locate. Returns bool true if this TextureAtlas contains a TextureRegion element with the specified name; otherwise, false."
  },
  "api/MonoGame.Aseprite.TextureAtlas.CreateRegion.html": {
    "href": "api/MonoGame.Aseprite.TextureAtlas.CreateRegion.html",
    "title": "Method CreateRegion | MonoGame Aseprite",
    "keywords": "Method CreateRegion Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll CreateRegion(string, int, int, int, int) Creates a new TextureRegion and adds it to this TextureAtlas. public TextureRegion CreateRegion(string name, int x, int y, int width, int height) Parameters name string The name to assign the TextureRegion that is created. The name must be unique across all TextureRegion in this TextureAtlas. x int The x-coordinate location of the upper-left corner of the TextureRegion within the source image of this TextureAtlas. y int The y-coordinate location of the upper-left corner of the TextureRegion within the source image of this TextureAtlas. width int The width, in pixels, of the TextureRegion. height int The height, in pixels, of the TextureRegion. Returns TextureRegion The TextureRegion created by this method. Exceptions InvalidOperationException Thrown if this TextureAtlas already contains a TextureRegion element with the specified name. CreateRegion(string, Point, Point) Creates a new TextureRegion and adds it to this TextureAtlas. public TextureRegion CreateRegion(string name, Point location, Point size) Parameters name string The name to assign the TextureRegion that is created. The name must be unique across all TextureRegion in this TextureAtlas. location Point The x- and y-coordinate location of the upper-left corner of the TextureRegion within the source image of this TextureAtlas. size Point The width and height extents, in pixels, of the TextureRegion. Returns TextureRegion The TextureRegion created by this method. Exceptions InvalidOperationException Thrown if this TextureAtlas already contains a TextureRegion element with the specified name. CreateRegion(string, Rectangle) Creates a new TextureRegion and adds it to this TextureAtlas. public TextureRegion CreateRegion(string name, Rectangle bounds) Parameters name string The name to assign the TextureRegion that is created. The name must be unique across all TextureRegion in this TextureAtlas. bounds Rectangle The rectangular bounds of the TextureRegion within the source image of this TextureAtlas. Returns TextureRegion The TextureRegion created by this method. Exceptions InvalidOperationException Thrown if this TextureAtlas already contains a TextureRegion element with the specified name."
  },
  "api/MonoGame.Aseprite.TextureAtlas.CreateSprite.html": {
    "href": "api/MonoGame.Aseprite.TextureAtlas.CreateSprite.html",
    "title": "Method CreateSprite | MonoGame Aseprite",
    "keywords": "Method CreateSprite Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll CreateSprite(string, int) Creates a new Sprite from the TextureRegion at the specified index in this TextureAtlas. public Sprite CreateSprite(string spriteName, int regionIndex) Parameters spriteName string The name to assign the Sprite that is created. regionIndex int The index of the TextureRegion element in this TextureAtlas assign the Sprite that is created. Returns Sprite The Sprite that is created by this method. Exceptions ArgumentOutOfRangeException Thrown if the specified index is less than zero or is greater than or equal to the total number of TextureRegion elements in this TextureAtlas. CreateSprite(int) Creates a new Sprite from the TextureRegion at the specified index in this TextureAtlas. public Sprite CreateSprite(int regionIndex) Parameters regionIndex int The index of the TextureRegion element to assign the Sprite that is created. Returns Sprite The Sprite that is created by this method. Exceptions ArgumentOutOfRangeException Thrown if the specified index is less than zero or is greater than or equal to the total number of TextureRegion elements in this TextureAtlas. CreateSprite(string, string) Creates a new Sprite from the TextureRegion with the specified name in this TextureAtlas. public Sprite CreateSprite(string spriteName, string regionName) Parameters spriteName string The name to assign the Sprite that is created. regionName string The name of the TextureRegion element in this TextureAtlas assign the Sprite that is created. Returns Sprite The Sprite that is created by this method. Exceptions KeyNotFoundException Thrown if this TextureAtlas does not contain a TextureRegion with the name specified. CreateSprite(string) Creates a new Sprite from the TextureRegion with the specified name in this TextureAtlas. public Sprite CreateSprite(string regionName) Parameters regionName string The name of the TextureRegion element in this TextureAtlas assign the Sprite that is created. Returns Sprite The Sprite that is created by this method. Exceptions KeyNotFoundException Thrown if this TextureAtlas does not contain a TextureRegion with the name specified."
  },
  "api/MonoGame.Aseprite.TextureAtlas.GetEnumerator.html": {
    "href": "api/MonoGame.Aseprite.TextureAtlas.GetEnumerator.html",
    "title": "Method GetEnumerator | MonoGame Aseprite",
    "keywords": "Method GetEnumerator Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll GetEnumerator() Returns an enumerator that iterates through the collection. public IEnumerator<TextureRegion> GetEnumerator() Returns IEnumerator<TextureRegion> An enumerator that can be used to iterate through the collection."
  },
  "api/MonoGame.Aseprite.TextureAtlas.GetIndexOfRegion.html": {
    "href": "api/MonoGame.Aseprite.TextureAtlas.GetIndexOfRegion.html",
    "title": "Method GetIndexOfRegion | MonoGame Aseprite",
    "keywords": "Method GetIndexOfRegion Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll GetIndexOfRegion(string) Returns the index of the TextureRegion element with the specified name in this TextureAtlas. public int GetIndexOfRegion(string name) Parameters name string The name of the TextureRegion to locate. Returns int The index of the TextureRegion located."
  },
  "api/MonoGame.Aseprite.TextureAtlas.GetRegion.html": {
    "href": "api/MonoGame.Aseprite.TextureAtlas.GetRegion.html",
    "title": "Method GetRegion | MonoGame Aseprite",
    "keywords": "Method GetRegion Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll GetRegion(int) Gets the TextureRegion element at the specified index in this TextureAtlas. public TextureRegion GetRegion(int index) Parameters index int The index of the TextureRegion element to locate. Returns TextureRegion The TextureRegion element that was located. Exceptions ArgumentOutOfRangeException Thrown if the specified index is less than zero or is greater than or equal to the total number of TextureRegion elements in this TextureAtlas. GetRegion(string) Gets the TextureRegion element with the specified name in this TextureAtlas. public TextureRegion GetRegion(string name) Parameters name string The name of the TextureRegion element to locate. Returns TextureRegion The TextureRegion element that was located. Exceptions KeyNotFoundException Thrown if this TextureAtlas does not contain a TextureRegion element with the specified name."
  },
  "api/MonoGame.Aseprite.TextureAtlas.GetRegions.html": {
    "href": "api/MonoGame.Aseprite.TextureAtlas.GetRegions.html",
    "title": "Method GetRegions | MonoGame Aseprite",
    "keywords": "Method GetRegions Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll GetRegions(params int[]) Gets a new List<T> of all TextureRegion elements at the specified indexes in this TextureAtlas. Order of the elements in the collection returned is the same as the order of the indexes specified. public List<TextureRegion> GetRegions(params int[] indexes) Parameters indexes int[] The indexes of the TextureRegion elements to locate. Returns List<TextureRegion> A new List<T> containing the TextureRegion elements located. Exceptions ArgumentOutOfRangeException Thrown if any of the specified indexes are less than zero or if any are greater than or equal to the total number of TextureRegion elements in this TextureAtlas. GetRegions(params string[]) Gets a new List<T> of all TextureRegion elements with the specified names in this TextureAtlas. Order of the elements in the collection returned is the same as the order of names specified. public List<TextureRegion> GetRegions(params string[] names) Parameters names string[] The names of the TextureRegion elements to locate. Returns List<TextureRegion> A new List<T> containing the TextureRegion elements located. Exceptions KeyNotFoundException Thrown if any of the specified names do not match a TextureRegion element in this TextureAtlas."
  },
  "api/MonoGame.Aseprite.TextureAtlas.Item.html": {
    "href": "api/MonoGame.Aseprite.TextureAtlas.Item.html",
    "title": "Property this | MonoGame Aseprite",
    "keywords": "Property this Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll this[int] Gets the TextureRegion element at the specified index in this TextureAtlas. public TextureRegion this[int index] { get; } Parameters index int The index of the TextureRegion element in this TextureAtlas to locate. Property Value TextureRegion The TextureRegion element that was located at the specified index in this TextureAtlas. Exceptions ArgumentOutOfRangeException Thrown if the specified index is less than zero or is greater than or equal to the total number of TextureRegion elements in this TextureAtlas. this[string] Gets the TextureRegion element with the specified name in this TextureAtlas. public TextureRegion this[string name] { get; } Parameters name string The name of the TextureRegion element in this TextureAtlas to locate. Property Value TextureRegion The TextureRegion element that was located with the specified name in this TextureAtlas. Exceptions KeyNotFoundException Thrown if this TextureAtlas does not contain a TextureRegion with the specified name."
  },
  "api/MonoGame.Aseprite.TextureAtlas.Name.html": {
    "href": "api/MonoGame.Aseprite.TextureAtlas.Name.html",
    "title": "Property Name | MonoGame Aseprite",
    "keywords": "Property Name Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll Name Gets the name assigned to this TextureAtlas. public string Name { get; } Property Value string"
  },
  "api/MonoGame.Aseprite.TextureAtlas.RegionCount.html": {
    "href": "api/MonoGame.Aseprite.TextureAtlas.RegionCount.html",
    "title": "Property RegionCount | MonoGame Aseprite",
    "keywords": "Property RegionCount Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll RegionCount Gets the total number of TextureRegion elements in this TextureAtlas. public int RegionCount { get; } Property Value int"
  },
  "api/MonoGame.Aseprite.TextureAtlas.RemoveRegion.html": {
    "href": "api/MonoGame.Aseprite.TextureAtlas.RemoveRegion.html",
    "title": "Method RemoveRegion | MonoGame Aseprite",
    "keywords": "Method RemoveRegion Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll RemoveRegion(int) Removes the TextureRegion element at the specified index from this TextureAtlas. public bool RemoveRegion(int index) Parameters index int The index of the TextureRegion element to remove. Returns bool true if the TextureRegion element was successfully removed; otherwise, false. This method returns false if the specified index is less than zero or is greater than or equal to the total number of TextureRegion element in this TextureAtlas. RemoveRegion(string) Removes the TextureRegion element with the specified name from this TextureAtlas. public bool RemoveRegion(string name) Parameters name string The name of the TextureRegion element to remove. Returns bool true if the TextureRegion element was successfully removed; otherwise, false. This method returns false if thisTextureAtlas does not contain a TextureRegion element with the specified name."
  },
  "api/MonoGame.Aseprite.TextureAtlas.Texture.html": {
    "href": "api/MonoGame.Aseprite.TextureAtlas.Texture.html",
    "title": "Property Texture | MonoGame Aseprite",
    "keywords": "Property Texture Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll Texture Gets the source image of this TextureAtlas. public Texture2D Texture { get; } Property Value Texture2D"
  },
  "api/MonoGame.Aseprite.TextureAtlas.TryGetRegion.html": {
    "href": "api/MonoGame.Aseprite.TextureAtlas.TryGetRegion.html",
    "title": "Method TryGetRegion | MonoGame Aseprite",
    "keywords": "Method TryGetRegion Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll TryGetRegion(int, out TextureRegion?) Gets the TextureRegion element at the specified index in this TextureAtlas. public bool TryGetRegion(int index, out TextureRegion? region) Parameters index int The index of the TextureRegion element to locate. region TextureRegion When this method returns true, contains the TextureRegion located; otherwise, null. Returns bool true if a TextureRegion element was located; otherwise, false. This method returns false if the index specified is less than zero or is greater than or equal to the total number of TextureRegion elements in this TextureAtlas. TryGetRegion(string, out TextureRegion?) Gets the TextureRegion element with the specified name in this TextureAtlas. public bool TryGetRegion(string name, out TextureRegion? region) Parameters name string The name of the TextureRegion element to locate. region TextureRegion When this method returns true, contains the TextureRegion located; otherwise, null. Returns bool true if a TextureRegion element was located; otherwise, false. This method returns false if this TextureAtlas does not contain a TextureRegion element with the specified name."
  },
  "api/MonoGame.Aseprite.TextureAtlas.html": {
    "href": "api/MonoGame.Aseprite.TextureAtlas.html",
    "title": "Class TextureAtlas | MonoGame Aseprite",
    "keywords": "Class TextureAtlas Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll Defines a TextureAtlas with a source image and zero or more TextureRegion elements. public class TextureAtlas : IEnumerable<TextureRegion>, IEnumerable Inheritance object TextureAtlas Implements IEnumerable<TextureRegion> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TextureAtlas(string, Texture2D) Initializes a new instance of the TextureAtlas class. Properties this[int] Gets the TextureRegion element at the specified index in this TextureAtlas. this[string] Gets the TextureRegion element with the specified name in this TextureAtlas. Name Gets the name assigned to this TextureAtlas. RegionCount Gets the total number of TextureRegion elements in this TextureAtlas. Texture Gets the source image of this TextureAtlas. Methods Clear() Removes all TextureRegion elements from this TextureAtlas. ContainsRegion(string) Returns a value that indicates whether this TextureAtlas contains a TextureRegion element with the specified name. CreateRegion(string, Point, Point) Creates a new TextureRegion and adds it to this TextureAtlas. CreateRegion(string, Rectangle) Creates a new TextureRegion and adds it to this TextureAtlas. CreateRegion(string, int, int, int, int) Creates a new TextureRegion and adds it to this TextureAtlas. CreateSprite(int) Creates a new Sprite from the TextureRegion at the specified index in this TextureAtlas. CreateSprite(string) Creates a new Sprite from the TextureRegion with the specified name in this TextureAtlas. CreateSprite(string, int) Creates a new Sprite from the TextureRegion at the specified index in this TextureAtlas. CreateSprite(string, string) Creates a new Sprite from the TextureRegion with the specified name in this TextureAtlas. GetEnumerator() Returns an enumerator that iterates through the collection. GetIndexOfRegion(string) Returns the index of the TextureRegion element with the specified name in this TextureAtlas. GetRegion(int) Gets the TextureRegion element at the specified index in this TextureAtlas. GetRegion(string) Gets the TextureRegion element with the specified name in this TextureAtlas. GetRegions(params int[]) Gets a new List<T> of all TextureRegion elements at the specified indexes in this TextureAtlas. Order of the elements in the collection returned is the same as the order of the indexes specified. GetRegions(params string[]) Gets a new List<T> of all TextureRegion elements with the specified names in this TextureAtlas. Order of the elements in the collection returned is the same as the order of names specified. RemoveRegion(int) Removes the TextureRegion element at the specified index from this TextureAtlas. RemoveRegion(string) Removes the TextureRegion element with the specified name from this TextureAtlas. TryGetRegion(int, out TextureRegion?) Gets the TextureRegion element at the specified index in this TextureAtlas. TryGetRegion(string, out TextureRegion?) Gets the TextureRegion element with the specified name in this TextureAtlas."
  },
  "api/MonoGame.Aseprite.TextureRegion.-ctor.html": {
    "href": "api/MonoGame.Aseprite.TextureRegion.-ctor.html",
    "title": "Constructor TextureRegion | MonoGame Aseprite",
    "keywords": "Constructor TextureRegion Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll TextureRegion(string, Texture2D, Rectangle) Initializes a new instance of the TextureRegion class. public TextureRegion(string name, Texture2D texture, Rectangle bounds) Parameters name string The name to assign the TextureRegion. texture Texture2D The source texture image this region is from. bounds Rectangle The rectangular bounds of this region within the source texture."
  },
  "api/MonoGame.Aseprite.TextureRegion.Bounds.html": {
    "href": "api/MonoGame.Aseprite.TextureRegion.Bounds.html",
    "title": "Property Bounds | MonoGame Aseprite",
    "keywords": "Property Bounds Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll Bounds Gets the rectangular bounds that define the location and width and height extents, in pixels, of the region within the source texture that is represented by this TextureRegion. public Rectangle Bounds { get; } Property Value Rectangle"
  },
  "api/MonoGame.Aseprite.TextureRegion.CreateNinePatchSlice.html": {
    "href": "api/MonoGame.Aseprite.TextureRegion.CreateNinePatchSlice.html",
    "title": "Method CreateNinePatchSlice | MonoGame Aseprite",
    "keywords": "Method CreateNinePatchSlice Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll CreateNinePatchSlice(string, Rectangle, Rectangle, Vector2, Color) Creates and adds a new NinePatchSlice element to this TextureRegion. public NinePatchSlice CreateNinePatchSlice(string name, Rectangle bounds, Rectangle centerBounds, Vector2 origin, Color color) Parameters name string The name to assign the NinePatchSlice that is created by this method. The name must be unique across all Slice elements in this TextureRegion. bounds Rectangle The bounds to assign the NinePatchSlice created by this method. This should be relative to the bounds of this TextureRegion. centerBounds Rectangle The center bounds to assign the NinePatchSlice created by this method. This should be relative to the bounds. origin Vector2 The x- and y-coordinate origin point to assign the NinePatchSlice created by this method. This should be relative to the upper-left corner of the bounds of this TextureRegion. color Color A Microsoft.Xna.Framework.Color value to assign the NinePatchSlice created by this method. Returns NinePatchSlice The NinePatchSlice created by this method. Exceptions InvalidOperationException Thrown if this TextureRegion already contains a Slice with the specified name."
  },
  "api/MonoGame.Aseprite.TextureRegion.CreateSlice.html": {
    "href": "api/MonoGame.Aseprite.TextureRegion.CreateSlice.html",
    "title": "Method CreateSlice | MonoGame Aseprite",
    "keywords": "Method CreateSlice Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll CreateSlice(string, Rectangle, Vector2, Color) Creates and adds a new Slice element to this TextureRegion. public Slice CreateSlice(string name, Rectangle bounds, Vector2 origin, Color color) Parameters name string The name to assign the Slice that is created by this method. The name must be unique across all Slice elements in this TextureRegion. bounds Rectangle The bounds to assign the Slice created by this method. This should be relative to the bounds of this TextureRegion. origin Vector2 The x- and y-coordinate origin point to assign the Slice created by this method. This should be relative to the upper-left corner of the bounds of this TextureRegion. color Color A Microsoft.Xna.Framework.Color value to assign the Slice created by this method. Returns Slice The Slice created by this method. Exceptions InvalidOperationException Thrown if this TextureRegion already contains a Slice with the specified name."
  },
  "api/MonoGame.Aseprite.TextureRegion.Draw.html": {
    "href": "api/MonoGame.Aseprite.TextureRegion.Draw.html",
    "title": "Method Draw | MonoGame Aseprite",
    "keywords": "Method Draw Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll Draw(SpriteBatch, Rectangle, Color) Draws this TextureRegion instance using the Microsoft.Xna.Framework.Graphics.SpriteBatch provided. public void Draw(SpriteBatch spriteBatch, Rectangle destinationRectangle, Color color) Parameters spriteBatch SpriteBatch The Microsoft.Xna.Framework.Graphics.SpriteBatch to use for rendering. destinationRectangle Rectangle A rectangular bound that defines the destination to render this TextureRegion into. color Color The color mask to apply when rendering this TextureRegion. Draw(SpriteBatch, Vector2, Color) Draws this TextureRegion instance using the Microsoft.Xna.Framework.Graphics.SpriteBatch provided. public void Draw(SpriteBatch spriteBatch, Vector2 position, Color color) Parameters spriteBatch SpriteBatch The Microsoft.Xna.Framework.Graphics.SpriteBatch to use for rendering. position Vector2 The x- and y-coordinate location to render this TextureRegion at. color Color The color mask to apply when rendering this TextureRegion. Draw(SpriteBatch, Vector2, Color, float, Vector2, float, SpriteEffects, float) Draws this TextureRegion instance using the Microsoft.Xna.Framework.Graphics.SpriteBatch provided. public void Draw(SpriteBatch spriteBatch, Vector2 position, Color color, float rotation, Vector2 origin, float scale, SpriteEffects effects, float layerDepth) Parameters spriteBatch SpriteBatch The Microsoft.Xna.Framework.Graphics.SpriteBatch to use for rendering. position Vector2 The x- and y-coordinate location to render this TextureRegion at. color Color The color mask to apply when rendering this TextureRegion. rotation float The amount of rotation, in radians, to apply when rendering this TextureRegion. origin Vector2 The x- and y-coordinate point of origin to apply when rendering this TextureRegion. scale float The amount of scaling to apply when rendering this TextureRegion. effects SpriteEffects The Microsoft.Xna.Framework.Graphics.SpriteEffects to apply for horizontal and vertical axis flipping when rendering this TextureRegion. layerDepth float The layer depth to apply when rendering this TextureRegion. Draw(SpriteBatch, Vector2, Color, float, Vector2, Vector2, SpriteEffects, float) Draws this TextureRegion instance using the Microsoft.Xna.Framework.Graphics.SpriteBatch provided. public void Draw(SpriteBatch spriteBatch, Vector2 position, Color color, float rotation, Vector2 origin, Vector2 scale, SpriteEffects effects, float layerDepth) Parameters spriteBatch SpriteBatch The Microsoft.Xna.Framework.Graphics.SpriteBatch to use for rendering. position Vector2 The x- and y-coordinate location to render this TextureRegion at. color Color The color mask to apply when rendering this TextureRegion. rotation float The amount of rotation, in radians, to apply when rendering this TextureRegion. origin Vector2 The x- and y-coordinate point of origin to apply when rendering this TextureRegion. scale Vector2 The amount of scaling to apply when rendering this TextureRegion. effects SpriteEffects The Microsoft.Xna.Framework.Graphics.SpriteEffects to apply for horizontal and vertical axis flipping when rendering this TextureRegion. layerDepth float The layer depth to apply when rendering this TextureRegion. Draw(SpriteBatch, Rectangle, Color, float, Vector2, SpriteEffects, float) Draws this TextureRegion instance using the Microsoft.Xna.Framework.Graphics.SpriteBatch provided. public void Draw(SpriteBatch spriteBatch, Rectangle destinationRectangle, Color color, float rotation, Vector2 origin, SpriteEffects effects, float layerDepth) Parameters spriteBatch SpriteBatch The Microsoft.Xna.Framework.Graphics.SpriteBatch to use for rendering. destinationRectangle Rectangle A rectangular bound that defines the destination to render this TextureRegion into. color Color The color mask to apply when rendering this TextureRegion. rotation float The amount of rotation, in radians, to apply when rendering this TextureRegion. origin Vector2 The x- and y-coordinate point of origin to apply when rendering this TextureRegion. effects SpriteEffects The Microsoft.Xna.Framework.Graphics.SpriteEffects to apply for horizontal and vertical axis flipping when rendering this TextureRegion. layerDepth float The layer depth to apply when rendering this TextureRegion."
  },
  "api/MonoGame.Aseprite.TextureRegion.GetSlice.html": {
    "href": "api/MonoGame.Aseprite.TextureRegion.GetSlice.html",
    "title": "Method GetSlice | MonoGame Aseprite",
    "keywords": "Method GetSlice Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll GetSlice(string) Returns the Slice element with the specified name from this TextureRegion. public Slice GetSlice(string name) Parameters name string The name of the Slice element to locate. Returns Slice The Slice element located. Exceptions KeyNotFoundException Thrown if this TextureRegion does not contain a Slice element with the specified name. GetSlice<T>(string) Returns the Slice element with the specified name from this TextureRegion as the type specified. public T GetSlice<T>(string name) where T : Slice Parameters name string The name of the Slice element to locate. Returns T The Slice element located as the type specified. Type Parameters T The type to return the located Slice element as. Must derived from the base type Slice."
  },
  "api/MonoGame.Aseprite.TextureRegion.Name.html": {
    "href": "api/MonoGame.Aseprite.TextureRegion.Name.html",
    "title": "Property Name | MonoGame Aseprite",
    "keywords": "Property Name Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll Name Gets the name assigned to this TextureRegion. public string Name { get; } Property Value string"
  },
  "api/MonoGame.Aseprite.TextureRegion.RemoveAllSlices.html": {
    "href": "api/MonoGame.Aseprite.TextureRegion.RemoveAllSlices.html",
    "title": "Method RemoveAllSlices | MonoGame Aseprite",
    "keywords": "Method RemoveAllSlices Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll RemoveAllSlices() Removes all Slice elements from this TextureRegion. public void RemoveAllSlices()"
  },
  "api/MonoGame.Aseprite.TextureRegion.RemoveSlice.html": {
    "href": "api/MonoGame.Aseprite.TextureRegion.RemoveSlice.html",
    "title": "Method RemoveSlice | MonoGame Aseprite",
    "keywords": "Method RemoveSlice Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll RemoveSlice(string) Removes the Slice element with the specified name from this TextureRegion. public bool RemoveSlice(string name) Parameters name string The name of the Slice element to remove. Returns bool true if the Slice element was successfully removed; otherwise, false. This method returns false when this TextureRegion does not have a Slice element with the specified name."
  },
  "api/MonoGame.Aseprite.TextureRegion.Texture.html": {
    "href": "api/MonoGame.Aseprite.TextureRegion.Texture.html",
    "title": "Property Texture | MonoGame Aseprite",
    "keywords": "Property Texture Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll Texture Gets the source texture used by this TextureRegion. public Texture2D Texture { get; } Property Value Texture2D"
  },
  "api/MonoGame.Aseprite.TextureRegion.TryGetSlice.html": {
    "href": "api/MonoGame.Aseprite.TextureRegion.TryGetSlice.html",
    "title": "Method TryGetSlice | MonoGame Aseprite",
    "keywords": "Method TryGetSlice Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll TryGetSlice(string, out Slice?) Returns the Slice element with the specified name from this TextureRegion. public bool TryGetSlice(string name, out Slice? slice) Parameters name string The name of the Slice element to locate. slice Slice When this method returns true, contains the Slice located; otherwise, null Returns bool true if the Slice was located; otherwise, false. This method returns false if this TextureRegion does not contain a Slice element with the specified name. TryGetSlice<T>(string, out T?) Returns the Slice element with the specified name from this TextureRegion as the type specified. public bool TryGetSlice<T>(string name, out T? slice) where T : Slice Parameters name string The name of the Slice element to locate. slice T When this method returns true, contains the Slice located; otherwise, null Returns bool true if the Slice was located; otherwise, false. This method returns false if this TextureRegion does not contain a Slice element with the specified name. Type Parameters T The type to return the located Slice element as. Must derived from the base type Slice."
  },
  "api/MonoGame.Aseprite.TextureRegion.html": {
    "href": "api/MonoGame.Aseprite.TextureRegion.html",
    "title": "Class TextureRegion | MonoGame Aseprite",
    "keywords": "Class TextureRegion Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll Defines a named rectangular region that represents the location and extents of a region within a source texture. public class TextureRegion Inheritance object TextureRegion Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TextureRegion(string, Texture2D, Rectangle) Initializes a new instance of the TextureRegion class. Properties Bounds Gets the rectangular bounds that define the location and width and height extents, in pixels, of the region within the source texture that is represented by this TextureRegion. Name Gets the name assigned to this TextureRegion. Texture Gets the source texture used by this TextureRegion. Methods CreateNinePatchSlice(string, Rectangle, Rectangle, Vector2, Color) Creates and adds a new NinePatchSlice element to this TextureRegion. CreateSlice(string, Rectangle, Vector2, Color) Creates and adds a new Slice element to this TextureRegion. Draw(SpriteBatch, Rectangle, Color) Draws this TextureRegion instance using the Microsoft.Xna.Framework.Graphics.SpriteBatch provided. Draw(SpriteBatch, Rectangle, Color, float, Vector2, SpriteEffects, float) Draws this TextureRegion instance using the Microsoft.Xna.Framework.Graphics.SpriteBatch provided. Draw(SpriteBatch, Vector2, Color) Draws this TextureRegion instance using the Microsoft.Xna.Framework.Graphics.SpriteBatch provided. Draw(SpriteBatch, Vector2, Color, float, Vector2, Vector2, SpriteEffects, float) Draws this TextureRegion instance using the Microsoft.Xna.Framework.Graphics.SpriteBatch provided. Draw(SpriteBatch, Vector2, Color, float, Vector2, float, SpriteEffects, float) Draws this TextureRegion instance using the Microsoft.Xna.Framework.Graphics.SpriteBatch provided. GetSlice(string) Returns the Slice element with the specified name from this TextureRegion. GetSlice<T>(string) Returns the Slice element with the specified name from this TextureRegion as the type specified. RemoveAllSlices() Removes all Slice elements from this TextureRegion. RemoveSlice(string) Removes the Slice element with the specified name from this TextureRegion. TryGetSlice(string, out Slice?) Returns the Slice element with the specified name from this TextureRegion. TryGetSlice<T>(string, out T?) Returns the Slice element with the specified name from this TextureRegion as the type specified."
  },
  "api/MonoGame.Aseprite.Tile.-ctor.html": {
    "href": "api/MonoGame.Aseprite.Tile.-ctor.html",
    "title": "Constructor Tile | MonoGame Aseprite",
    "keywords": "Constructor Tile Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll Tile() Initializes a new instance of the Tile class. public Tile() Tile(int) Initializes a new Tile value. public Tile(int tilesetTileID) Parameters tilesetTileID int The ID (or index) of the source tile in the Tileset that represents the TextureRegion to assign for this Tile. Tile(int, bool, bool, bool) Initializes a new Tile value. public Tile(int tilesetTileID, bool flipHorizontally, bool flipVertically, bool flipDiagonally) Parameters tilesetTileID int The ID (or index) of the source tile in the Tileset that represents the TextureRegion to assign for this Tile. flipHorizontally bool Indicates whether the Tile should be flipped horizontally when rendered. flipVertically bool Indicates whether the Tile should be flipped vertically when rendered. flipDiagonally bool Indicates whether the Tile should be flipped diagonally when rendered."
  },
  "api/MonoGame.Aseprite.Tile.Empty.html": {
    "href": "api/MonoGame.Aseprite.Tile.Empty.html",
    "title": "Field Empty | MonoGame Aseprite",
    "keywords": "Field Empty Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll Represents a Tile with its properties left uninitialized. public static readonly Tile Empty Returns Tile"
  },
  "api/MonoGame.Aseprite.Tile.FlipDiagonally.html": {
    "href": "api/MonoGame.Aseprite.Tile.FlipDiagonally.html",
    "title": "Field FlipDiagonally | MonoGame Aseprite",
    "keywords": "Field FlipDiagonally Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll Indicates whether this Tile should be flipped diagonally when rendered. public bool FlipDiagonally Returns bool"
  },
  "api/MonoGame.Aseprite.Tile.FlipHorizontally.html": {
    "href": "api/MonoGame.Aseprite.Tile.FlipHorizontally.html",
    "title": "Field FlipHorizontally | MonoGame Aseprite",
    "keywords": "Field FlipHorizontally Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll Indicates whether this Tile should be flipped horizontally rendered. public bool FlipHorizontally Returns bool"
  },
  "api/MonoGame.Aseprite.Tile.FlipVertically.html": {
    "href": "api/MonoGame.Aseprite.Tile.FlipVertically.html",
    "title": "Field FlipVertically | MonoGame Aseprite",
    "keywords": "Field FlipVertically Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll Indicates whether this Tile should be flipped vertically rendered. public bool FlipVertically Returns bool"
  },
  "api/MonoGame.Aseprite.Tile.IsEmpty.html": {
    "href": "api/MonoGame.Aseprite.Tile.IsEmpty.html",
    "title": "Property IsEmpty | MonoGame Aseprite",
    "keywords": "Property IsEmpty Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll IsEmpty Gets a value that indicates if this is an empty Tile. public bool IsEmpty { get; } Property Value bool Remarks Empty tiles have a TilesetTileID equal to zero."
  },
  "api/MonoGame.Aseprite.Tile.TilesetTileID.html": {
    "href": "api/MonoGame.Aseprite.Tile.TilesetTileID.html",
    "title": "Field TilesetTileID | MonoGame Aseprite",
    "keywords": "Field TilesetTileID Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll The ID (or index) of the source tile in the Tileset that represents the TextureRegion to render for this Tile. public int TilesetTileID Returns int"
  },
  "api/MonoGame.Aseprite.Tile.html": {
    "href": "api/MonoGame.Aseprite.Tile.html",
    "title": "Struct Tile | MonoGame Aseprite",
    "keywords": "Struct Tile Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll Defines a tile value in a TilemapLayer. public struct Tile Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors Tile() Initializes a new instance of the Tile class. Tile(int) Initializes a new Tile value. Tile(int, bool, bool, bool) Initializes a new Tile value. Fields Empty Represents a Tile with its properties left uninitialized. FlipDiagonally Indicates whether this Tile should be flipped diagonally when rendered. FlipHorizontally Indicates whether this Tile should be flipped horizontally rendered. FlipVertically Indicates whether this Tile should be flipped vertically rendered. TilesetTileID The ID (or index) of the source tile in the Tileset that represents the TextureRegion to render for this Tile. Properties IsEmpty Gets a value that indicates if this is an empty Tile."
  },
  "api/MonoGame.Aseprite.Tilemap.-ctor.html": {
    "href": "api/MonoGame.Aseprite.Tilemap.-ctor.html",
    "title": "Constructor Tilemap | MonoGame Aseprite",
    "keywords": "Constructor Tilemap Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll Tilemap(string) Initializes a new instance of the Tilemap class. public Tilemap(string name) Parameters name string The name to assign Tilemap."
  },
  "api/MonoGame.Aseprite.Tilemap.AddLayer.html": {
    "href": "api/MonoGame.Aseprite.Tilemap.AddLayer.html",
    "title": "Method AddLayer | MonoGame Aseprite",
    "keywords": "Method AddLayer Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll AddLayer(TilemapLayer) Adds the given TilemapLayer element to this Tilemap. public void AddLayer(TilemapLayer layer) Parameters layer TilemapLayer The TilemapLayer element to add. Exceptions InvalidOperationException Thrown if this Tilemap already contains a TilemapLayer element with the same name as the TilemapLayer element given."
  },
  "api/MonoGame.Aseprite.Tilemap.Clear.html": {
    "href": "api/MonoGame.Aseprite.Tilemap.Clear.html",
    "title": "Method Clear | MonoGame Aseprite",
    "keywords": "Method Clear Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll Clear() Removes all TilemapLayer elements from this Tilemap. public void Clear()"
  },
  "api/MonoGame.Aseprite.Tilemap.CreateLayer.html": {
    "href": "api/MonoGame.Aseprite.Tilemap.CreateLayer.html",
    "title": "Method CreateLayer | MonoGame Aseprite",
    "keywords": "Method CreateLayer Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll CreateLayer(string, Tileset, int, int, Vector2) Creates a new TilemapLayer element and adds it to this Tilemap. public TilemapLayer CreateLayer(string layerName, Tileset tileset, int columns, int rows, Vector2 offset) Parameters layerName string The name to give the TilemapLayer element created by this method. The name must be unique across all TilemapLayer elements in this Tilemap. tileset Tileset The source tileset to assign the TilemapLayer element created by this method. columns int The total number of columns to assign the TilemapLayer element created by this method. rows int The total of rows to assign the TilemapLayer element created by this method. offset Vector2 The x- and y-position offset, relative to the location the Tilemap is rendered, to assign the TilemapLayer element created by this method. Returns TilemapLayer The TilemapLayer created by this method. Exceptions InvalidOperationException Thrown if this Tilemap already contains a TilemapLayer element with the specified name."
  },
  "api/MonoGame.Aseprite.Tilemap.Draw.html": {
    "href": "api/MonoGame.Aseprite.Tilemap.Draw.html",
    "title": "Method Draw | MonoGame Aseprite",
    "keywords": "Method Draw Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll Draw(SpriteBatch, Vector2, Color) Draws this Tilemap using the Microsoft.Xna.Framework.Graphics.SpriteBatch. public void Draw(SpriteBatch spriteBatch, Vector2 position, Color color) Parameters spriteBatch SpriteBatch The Microsoft.Xna.Framework.Graphics.SpriteBatch to use for rendering this Tilemap. position Vector2 The x- and y-coordinate location to render this Tilemap at. color Color The color mask to apply when rendering this Tilemap. Draw(SpriteBatch, Vector2, Color, float, float) Draws this Tilemap using the Microsoft.Xna.Framework.Graphics.SpriteBatch. public void Draw(SpriteBatch spriteBatch, Vector2 position, Color color, float scale, float layerDepth) Parameters spriteBatch SpriteBatch The Microsoft.Xna.Framework.Graphics.SpriteBatch to use for rendering this Tilemap. position Vector2 The x- and y-coordinate location to render this Tilemap at. color Color The color mask to apply when rendering this Tilemap. scale float The amount of scaling to apply when rendering this Tilemap. layerDepth float The layer depth to apply when rendering this Tilemap. Draw(SpriteBatch, Vector2, Color, Vector2, float) Draws this Tilemap using the Microsoft.Xna.Framework.Graphics.SpriteBatch. public void Draw(SpriteBatch spriteBatch, Vector2 position, Color color, Vector2 scale, float layerDepth) Parameters spriteBatch SpriteBatch The Microsoft.Xna.Framework.Graphics.SpriteBatch to use for rendering this Tilemap. position Vector2 The x- and y-coordinate location to render this Tilemap at. color Color The color mask to apply when rendering this Tilemap. scale Vector2 The amount of scaling to apply when rendering this Tilemap. layerDepth float The layer depth to apply when rendering this Tilemap."
  },
  "api/MonoGame.Aseprite.Tilemap.GetEnumerator.html": {
    "href": "api/MonoGame.Aseprite.Tilemap.GetEnumerator.html",
    "title": "Method GetEnumerator | MonoGame Aseprite",
    "keywords": "Method GetEnumerator Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll GetEnumerator() Returns an enumerator that iterates through the collection. public IEnumerator<TilemapLayer> GetEnumerator() Returns IEnumerator<TilemapLayer> An enumerator that can be used to iterate through the collection."
  },
  "api/MonoGame.Aseprite.Tilemap.GetLayer.html": {
    "href": "api/MonoGame.Aseprite.Tilemap.GetLayer.html",
    "title": "Method GetLayer | MonoGame Aseprite",
    "keywords": "Method GetLayer Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll GetLayer(int) Get the TilemapLayer element at the specified index in this Tilemap. public TilemapLayer GetLayer(int index) Parameters index int The index of the TilemapLayer element to locate. Returns TilemapLayer The TilemapLayer element located. Exceptions ArgumentOutOfRangeException Thrown if the specified index is less than zero or is greater than or equal to the total number of TilemapLayer elements in this Tilemap. GetLayer(string) Gets the TilemapLayer element with the specified name in this Tilemap. public TilemapLayer GetLayer(string name) Parameters name string The name of the TilemapLayer element to locate. Returns TilemapLayer The TilemapLayer located. Exceptions KeyNotFoundException Thrown if this Tilemap does not contain a TilemapLayer element with the specified name."
  },
  "api/MonoGame.Aseprite.Tilemap.Item.html": {
    "href": "api/MonoGame.Aseprite.Tilemap.Item.html",
    "title": "Property this | MonoGame Aseprite",
    "keywords": "Property this Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll this[int] Gets the TilemapLayer element at the specified index in this Tilemap. public TilemapLayer this[int layerIndex] { get; } Parameters layerIndex int The index of the TilemapLayer element to locate. Property Value TilemapLayer The TilemapLayer element located. Exceptions ArgumentOutOfRangeException Thrown if the specified index is less than zero or is greater than or equal to the total number of TilemapLayer elements in this Tilemap. this[string] Gets the TilemapLayer element with the specified name in this Tilemap. public TilemapLayer this[string layerName] { get; } Parameters layerName string The name of the TilemapLayer element to locate. Property Value TilemapLayer The TilemapLayer element located. Exceptions KeyNotFoundException Thrown if this Tilemap does not contain a TilemapLayer element with the specified name."
  },
  "api/MonoGame.Aseprite.Tilemap.LayerCount.html": {
    "href": "api/MonoGame.Aseprite.Tilemap.LayerCount.html",
    "title": "Property LayerCount | MonoGame Aseprite",
    "keywords": "Property LayerCount Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll LayerCount Gets the total number of TilemapLayer elements in this Tilemap. public int LayerCount { get; } Property Value int"
  },
  "api/MonoGame.Aseprite.Tilemap.Name.html": {
    "href": "api/MonoGame.Aseprite.Tilemap.Name.html",
    "title": "Property Name | MonoGame Aseprite",
    "keywords": "Property Name Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll Name Gets the name assigned to this Tilemap. public string Name { get; } Property Value string"
  },
  "api/MonoGame.Aseprite.Tilemap.RemoveLayer.html": {
    "href": "api/MonoGame.Aseprite.Tilemap.RemoveLayer.html",
    "title": "Method RemoveLayer | MonoGame Aseprite",
    "keywords": "Method RemoveLayer Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll RemoveLayer(int) Removes the TilemapLayer element at the specified index in this Tilemap. public bool RemoveLayer(int index) Parameters index int The index of the TilemapLayer element to remove from this Tilemap. Returns bool true if the TilemapLayer element was successfully removed; otherwise, false. This method returns false if the specified index is less than zero or is greater than or equal to the total number of TilemapLayer elements in this Tilemap. RemoveLayer(string) Removes the TilemapLayer element with the specified name from this Tilemap. public bool RemoveLayer(string name) Parameters name string The name of the TilemapLayer element to remove from this Tilemap Returns bool true if the TilemapLayer element was successfully removed; otherwise, false. This method returns false if this Tilemap does not contain a TilemapLayer element with the specified name. RemoveLayer(TilemapLayer) Removes the given TilemapLayer element from this Tilemap. public bool RemoveLayer(TilemapLayer layer) Parameters layer TilemapLayer The TilemapLayer element to remove from this Tilemap. Returns bool true if the TilemapLayer element was removed successfully; otherwise, false. This method returns false if this Tilemap does not contain the TilemapLayer element given."
  },
  "api/MonoGame.Aseprite.Tilemap.TryGetLayer.html": {
    "href": "api/MonoGame.Aseprite.Tilemap.TryGetLayer.html",
    "title": "Method TryGetLayer | MonoGame Aseprite",
    "keywords": "Method TryGetLayer Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll TryGetLayer(int, out TilemapLayer?) Get the TilemapLayer element at the specified index in this Tilemap. public bool TryGetLayer(int index, out TilemapLayer? layer) Parameters index int The index of the TilemapLayer element to locate. layer TilemapLayer When this method returns true, contains the TilemapLayer element located; otherwise, null. Returns bool true if a TilemapLayer element was located at the specified index in this Tilemap; otherwise, false. This method return false when the specified index is less than zero or is greater than or equal to the total number of TilemapLayer elements in this Tilemap. TryGetLayer(string, out TilemapLayer?) Gets the TilemapLayer element with the specified name in this Tilemap. public bool TryGetLayer(string name, out TilemapLayer? layer) Parameters name string The name of the TilemapLayer element to locate. layer TilemapLayer When this method returns true, contains the TilemapLayer element located; otherwise, null. Returns bool true if a TilemapLayer element was located in this Tilemap with the specified name; otherwise false. This method returns false if this Tilemap does not contain a TilemapLayer element with the specified name."
  },
  "api/MonoGame.Aseprite.Tilemap.html": {
    "href": "api/MonoGame.Aseprite.Tilemap.html",
    "title": "Class Tilemap | MonoGame Aseprite",
    "keywords": "Class Tilemap Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll Defines a Tilemap with zero or more TilemapLayer elements. public sealed class Tilemap : IEnumerable<TilemapLayer>, IEnumerable Inheritance object Tilemap Implements IEnumerable<TilemapLayer> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors Tilemap(string) Initializes a new instance of the Tilemap class. Properties this[int] Gets the TilemapLayer element at the specified index in this Tilemap. this[string] Gets the TilemapLayer element with the specified name in this Tilemap. LayerCount Gets the total number of TilemapLayer elements in this Tilemap. Name Gets the name assigned to this Tilemap. Methods AddLayer(TilemapLayer) Adds the given TilemapLayer element to this Tilemap. Clear() Removes all TilemapLayer elements from this Tilemap. CreateLayer(string, Tileset, int, int, Vector2) Creates a new TilemapLayer element and adds it to this Tilemap. Draw(SpriteBatch, Vector2, Color) Draws this Tilemap using the Microsoft.Xna.Framework.Graphics.SpriteBatch. Draw(SpriteBatch, Vector2, Color, Vector2, float) Draws this Tilemap using the Microsoft.Xna.Framework.Graphics.SpriteBatch. Draw(SpriteBatch, Vector2, Color, float, float) Draws this Tilemap using the Microsoft.Xna.Framework.Graphics.SpriteBatch. GetEnumerator() Returns an enumerator that iterates through the collection. GetLayer(int) Get the TilemapLayer element at the specified index in this Tilemap. GetLayer(string) Gets the TilemapLayer element with the specified name in this Tilemap. RemoveLayer(TilemapLayer) Removes the given TilemapLayer element from this Tilemap. RemoveLayer(int) Removes the TilemapLayer element at the specified index in this Tilemap. RemoveLayer(string) Removes the TilemapLayer element with the specified name from this Tilemap. TryGetLayer(int, out TilemapLayer?) Get the TilemapLayer element at the specified index in this Tilemap. TryGetLayer(string, out TilemapLayer?) Gets the TilemapLayer element with the specified name in this Tilemap."
  },
  "api/MonoGame.Aseprite.TilemapLayer.-ctor.html": {
    "href": "api/MonoGame.Aseprite.TilemapLayer.-ctor.html",
    "title": "Constructor TilemapLayer | MonoGame Aseprite",
    "keywords": "Constructor TilemapLayer Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll TilemapLayer(string, Tileset, int, int, Vector2) Initializes a new instance of the TilemapLayer class. public TilemapLayer(string name, Tileset tileset, int columns, int rows, Vector2 offset) Parameters name string The name assign the TilemapLayer. tileset Tileset The source tileset used by the tiles in this TilemapLayer. columns int The total number of columns to assign the TilemapLayer. rows int The total number of rows to assign the TilemapLayer. offset Vector2 The x- and y-coordinate position offset, relative to the position of the Tilemap to assign the TilemapLayer."
  },
  "api/MonoGame.Aseprite.TilemapLayer.Clear.html": {
    "href": "api/MonoGame.Aseprite.TilemapLayer.Clear.html",
    "title": "Method Clear | MonoGame Aseprite",
    "keywords": "Method Clear Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll Clear() Clears all Tile elements in this TilemapLayer by resetting them to an empty value. public void Clear()"
  },
  "api/MonoGame.Aseprite.TilemapLayer.Columns.html": {
    "href": "api/MonoGame.Aseprite.TilemapLayer.Columns.html",
    "title": "Property Columns | MonoGame Aseprite",
    "keywords": "Property Columns Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll Columns Gets the total number of columns in this TilemapLayer. public int Columns { get; } Property Value int"
  },
  "api/MonoGame.Aseprite.TilemapLayer.Draw.html": {
    "href": "api/MonoGame.Aseprite.TilemapLayer.Draw.html",
    "title": "Method Draw | MonoGame Aseprite",
    "keywords": "Method Draw Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll Draw(SpriteBatch, Vector2, Color) Draws this TilemapLayer layer using the Microsoft.Xna.Framework.Graphics.SpriteBatch. public void Draw(SpriteBatch spriteBatch, Vector2 position, Color color) Parameters spriteBatch SpriteBatch The Microsoft.Xna.Framework.Graphics.SpriteBatch to use for rendering this TilemapLayer. position Vector2 The x- and y-coordinate location to draw this TilemapLayer at. Drawing this TilemapLayer using this method ignores the Offset. color Color The color mask to apply when rendering this TilemapLayer. Draw(SpriteBatch, Vector2, Color, float, float) Draws this TilemapLayer layer using the Microsoft.Xna.Framework.Graphics.SpriteBatch. public void Draw(SpriteBatch spriteBatch, Vector2 position, Color color, float scale, float layerDepth) Parameters spriteBatch SpriteBatch The Microsoft.Xna.Framework.Graphics.SpriteBatch to use for rendering this TilemapLayer. position Vector2 The x- and y-coordinate location to draw this TilemapLayer at. Drawing this TilemapLayer using this method ignores the Offset. color Color The color mask to apply when rendering this TilemapLayer. scale float The amount of scaling to apply when rendering this TilemapLayer. layerDepth float The layer depth to apply when rendering this TilemapLayer. Draw(SpriteBatch, Vector2, Color, Vector2, float) Draws this TilemapLayer layer using the Microsoft.Xna.Framework.Graphics.SpriteBatch. public void Draw(SpriteBatch spriteBatch, Vector2 position, Color color, Vector2 scale, float layerDepth) Parameters spriteBatch SpriteBatch The Microsoft.Xna.Framework.Graphics.SpriteBatch to use for rendering this TilemapLayer. position Vector2 The x- and y-coordinate location to draw this TilemapLayer at. Drawing this TilemapLayer using this method ignores the Offset. color Color The color mask to apply when rendering this TilemapLayer. scale Vector2 The amount of scaling to apply when rendering this TilemapLayer. layerDepth float The layer depth to apply when rendering this TilemapLayer."
  },
  "api/MonoGame.Aseprite.TilemapLayer.GetEnumerator.html": {
    "href": "api/MonoGame.Aseprite.TilemapLayer.GetEnumerator.html",
    "title": "Method GetEnumerator | MonoGame Aseprite",
    "keywords": "Method GetEnumerator Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll GetEnumerator() Returns an enumerator that iterates through the collection. public IEnumerator<Tile> GetEnumerator() Returns IEnumerator<Tile> An enumerator that can be used to iterate through the collection."
  },
  "api/MonoGame.Aseprite.TilemapLayer.GetTile.html": {
    "href": "api/MonoGame.Aseprite.TilemapLayer.GetTile.html",
    "title": "Method GetTile | MonoGame Aseprite",
    "keywords": "Method GetTile Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll GetTile(int) Gets the Tile element located at the specified index in this TilemapLayer. public Tile GetTile(int index) Parameters index int The index of the Tile element in this to locate. Returns Tile The Tile element located Exceptions ArgumentOutOfRangeException Thrown if the index specified is less than zero or is greater than or equal to the total number of Tile elements in this TilemapLayer. GetTile(int, int) Gets the Tile element located at the specified column and row in this TilemapLayer. public Tile GetTile(int column, int row) Parameters column int The column of the Tile element to locate. row int The row of the Tile element to locate. Returns Tile The Tile element located. Exceptions ArgumentOutOfRangeException Thrown if either the column or rows specified are less than zero or are greater than or equal to the total number of columns or rows in this TilemapLayer. GetTile(Point) Gets the Tile element located at the specified column and row location in this TilemapLayer. public Tile GetTile(Point location) Parameters location Point The column and row location of the Tile element to locate. Returns Tile The Tile element located. Exceptions ArgumentOutOfRangeException Thrown if either the column or rows in the specified location are less than zero or are greater than or equal to the total number of columns or rows in this TilemapLayer."
  },
  "api/MonoGame.Aseprite.TilemapLayer.Height.html": {
    "href": "api/MonoGame.Aseprite.TilemapLayer.Height.html",
    "title": "Property Height | MonoGame Aseprite",
    "keywords": "Property Height Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll Height Gets the height, in pixels, of this TilemapLayer. Height = Tileset.TileHeight * Rows public int Height { get; } Property Value int"
  },
  "api/MonoGame.Aseprite.TilemapLayer.IsEmpty.html": {
    "href": "api/MonoGame.Aseprite.TilemapLayer.IsEmpty.html",
    "title": "Method IsEmpty | MonoGame Aseprite",
    "keywords": "Method IsEmpty Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll IsEmpty(int) Returns a value that indicates whether the Tile element at the specified index in this TilemapLayer is empty. public bool IsEmpty(int index) Parameters index int The index of the Tile element to check. Returns bool true if the Tile element at the specified index is empty; otherwise, false. Exceptions ArgumentOutOfRangeException Thrown if the index specified is less than zero or is greater than or equal to the total number of Tile elements in this TilemapLayer. IsEmpty(int, int) Returns a value that indicates whether the Tile element at the specified column and row in this TilemapLayer is empty. public bool IsEmpty(int column, int row) Parameters column int The column of the Tile element to check. row int The row of the Tile element to check. Returns bool true if the Tile element at the specified column and row in this TilemapLayer is empty; otherwise, false. Exceptions ArgumentOutOfRangeException Thrown if either the column or row specified is less than zero or if either is greater than or equal to the total number of columns or rows in this TilemapLayer. IsEmpty(Point) Returns a value that indicates whether the Tile element at the specified column and row location in this TilemapLayer is empty. public bool IsEmpty(Point location) Parameters location Point The column and row location of the Tile element to check. Returns bool true if the Tile element at the specified column and row location in this TilemapLayer is empty; otherwise, false. Exceptions ArgumentOutOfRangeException Thrown if either the column or row in the specified location is less than zero or if either is greater than or equal to the total number of columns or rows in this TilemapLayer."
  },
  "api/MonoGame.Aseprite.TilemapLayer.IsVisible.html": {
    "href": "api/MonoGame.Aseprite.TilemapLayer.IsVisible.html",
    "title": "Property IsVisible | MonoGame Aseprite",
    "keywords": "Property IsVisible Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll IsVisible Gets or Sets a value that indicates whether this TilemapLayer is visible and should be rendered. public bool IsVisible { get; set; } Property Value bool"
  },
  "api/MonoGame.Aseprite.TilemapLayer.Item.html": {
    "href": "api/MonoGame.Aseprite.TilemapLayer.Item.html",
    "title": "Property this | MonoGame Aseprite",
    "keywords": "Property this Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll this[int] Gets the Tile element at the specified index in this TilemapLayer public Tile this[int tileIndex] { get; } Parameters tileIndex int The index of the Tile element to locate. Property Value Tile The Tile element located. Exceptions ArgumentOutOfRangeException Thrown if the index specified is less than zero or is greater than or equal to the total number of Tile elements in this TilemapLayer. this[int, int] Gets the Tile element located at the specified column and row in this TilemapLayer. public Tile this[int column, int row] { get; } Parameters column int The column of the Tile element to locate. row int The row of the Tile element to locate. Property Value Tile The Tile element located. Exceptions ArgumentOutOfRangeException Thrown if either the column or rows specified is less than zero or if either is greater than or equal to the total number of columns or rows in this TilemapLayer. this[Point] Gets the Tile element located at the specified column and row location in this TilemapLayer. public Tile this[Point location] { get; } Parameters location Point The column and row location of the Tile element to locate. Property Value Tile The Tile element located. Exceptions ArgumentOutOfRangeException Thrown if either the column or rows specified in the location is less than zero or if either is greater than or equal to the total number of columns or rows in this TilemapLayer."
  },
  "api/MonoGame.Aseprite.TilemapLayer.Name.html": {
    "href": "api/MonoGame.Aseprite.TilemapLayer.Name.html",
    "title": "Property Name | MonoGame Aseprite",
    "keywords": "Property Name Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll Name Gets the name assigned to this TilemapLayer. public string Name { get; } Property Value string"
  },
  "api/MonoGame.Aseprite.TilemapLayer.Offset.html": {
    "href": "api/MonoGame.Aseprite.TilemapLayer.Offset.html",
    "title": "Property Offset | MonoGame Aseprite",
    "keywords": "Property Offset Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll Offset Gets or Sets the x- and y-coordinate position offset, relative to the position of the Tilemap, to render this TilemapLayer at public Vector2 Offset { get; set; } Property Value Vector2"
  },
  "api/MonoGame.Aseprite.TilemapLayer.OffsetX.html": {
    "href": "api/MonoGame.Aseprite.TilemapLayer.OffsetX.html",
    "title": "Property OffsetX | MonoGame Aseprite",
    "keywords": "Property OffsetX Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll OffsetX Gets or Sets the x-position offset, relative to the position of the Tilemap, to render this TilemapLayer at public float OffsetX { get; set; } Property Value float"
  },
  "api/MonoGame.Aseprite.TilemapLayer.OffsetY.html": {
    "href": "api/MonoGame.Aseprite.TilemapLayer.OffsetY.html",
    "title": "Property OffsetY | MonoGame Aseprite",
    "keywords": "Property OffsetY Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll OffsetY Gets or Sets the y-position offset, relative to the position of the Tilemap, to render this TilemapLayer at public float OffsetY { get; set; } Property Value float"
  },
  "api/MonoGame.Aseprite.TilemapLayer.Rows.html": {
    "href": "api/MonoGame.Aseprite.TilemapLayer.Rows.html",
    "title": "Property Rows | MonoGame Aseprite",
    "keywords": "Property Rows Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll Rows Gets the total number of rows in this TilemapLayer. public int Rows { get; } Property Value int"
  },
  "api/MonoGame.Aseprite.TilemapLayer.SetTile.html": {
    "href": "api/MonoGame.Aseprite.TilemapLayer.SetTile.html",
    "title": "Method SetTile | MonoGame Aseprite",
    "keywords": "Method SetTile Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll SetTile(int, int, bool, bool, bool) Sets the Tile element at the specified index in this TilemapLayer using the values provided. public void SetTile(int index, int tilesetTileID, bool flipHorizontally = false, bool flipVertically = false, bool flipDiagonally = false) Parameters index int The index of the Tile element in this TilemapLayer to set. tilesetTileID int The ID of the source tile in the Tileset that represents the TextureRegion to render for the Tile element being set. flipHorizontally bool Indicates whether the Tile element being set should be flipped horizontally when rendered. flipVertically bool Indicates if the Tile element being set should be flipped vertically when rendered. flipDiagonally bool Indicates if the Tile element being set should be flipped diagonally when rendered. Exceptions ArgumentOutOfRangeException Thrown if the index specified is less than zero or is greater than or equal to the total number of Tile elements in this TilemapLayer. SetTile(int, int, int, bool, bool, bool) Sets the Tile element at the specified column and row in this TilemapLayer using the values provided. public void SetTile(int column, int row, int tilesetTileID, bool flipHorizontally = false, bool flipVertically = false, bool flipDiagonally = false) Parameters column int The column in this TilemapLayer to set the Tile element at. row int The row in this TilemapLayer to set the Tile element at. tilesetTileID int The ID of the source tile in the Tileset that represents the TextureRegion to render for the Tile element being set. flipHorizontally bool Indicates whether the Tile element being set should be flipped horizontally when rendered. flipVertically bool Indicates if the Tile element being set should be flipped vertically when rendered. flipDiagonally bool Indicates if the Tile element being set should be flipped diagonally when rendered. Exceptions ArgumentOutOfRangeException Thrown if either the column or row specified is less than zero or are greater than or equal to the total number of columns or rows in this TilemapLayer. SetTile(Point, int, bool, bool, bool) Sets the Tile element at the specified column and row location in this TilemapLayer using the values provided. public void SetTile(Point location, int tilesetTileID, bool flipHorizontally = false, bool flipVertically = false, bool flipDiagonally = false) Parameters location Point The column and row location in this TilemapLayer to set the Tile element at. tilesetTileID int The ID of the source tile in the Tileset that represents the TextureRegion to render for the Tile element being set. flipHorizontally bool Indicates whether the Tile element being set should be flipped horizontally when rendered. flipVertically bool Indicates if the Tile element being set should be flipped vertically when rendered. flipDiagonally bool Indicates if the Tile element being set should be flipped diagonally when rendered. Exceptions ArgumentOutOfRangeException Thrown if either the column or row in the specified location is less than zero or are greater than or equal to the total number of columns or rows in this TilemapLayer. SetTile(int, Tile) Sets the specified index in this TilemapLayer to the Tile element given. public void SetTile(int index, Tile tile) Parameters index int The index in this TilemapLayer to set. tile Tile The Tile element to set at the index. Exceptions ArgumentOutOfRangeException Thrown if the index specified is less than zero or is greater than or equal to the total number of Tile elements in this TilemapLayer. SetTile(int, int, Tile) Sets the specified column and row in this TilemapLayer to the Tile element given. public void SetTile(int column, int row, Tile tile) Parameters column int The column in this TilemapLayer to set. row int The row in this TilemapLayer to set. tile Tile The Tile element to set at the column and row. Exceptions ArgumentOutOfRangeException Thrown if either the column or row specified are less than zero or are greater than or equal to the total number of columns or rows in this TilemapLayer. SetTile(Point, Tile) Sets the specified column and row location in this TilemapLayer to the Tile element given. public void SetTile(Point location, Tile tile) Parameters location Point The column and row location in this TilemapLayer to set. tile Tile The Tile element to set at the column and row location. Exceptions ArgumentOutOfRangeException Thrown if either the column or row in the specified location are less than zero or are greater than or equal to the total number of columns or rows in this TilemapLayer."
  },
  "api/MonoGame.Aseprite.TilemapLayer.TileCount.html": {
    "href": "api/MonoGame.Aseprite.TilemapLayer.TileCount.html",
    "title": "Property TileCount | MonoGame Aseprite",
    "keywords": "Property TileCount Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll TileCount Gets the total number of Tile elements in this TilemapLayer. public int TileCount { get; } Property Value int"
  },
  "api/MonoGame.Aseprite.TilemapLayer.Tiles.html": {
    "href": "api/MonoGame.Aseprite.TilemapLayer.Tiles.html",
    "title": "Property Tiles | MonoGame Aseprite",
    "keywords": "Property Tiles Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll Tiles Gets a read-only span of the Tile elements in this TilemapLayer. public ReadOnlySpan<Tile> Tiles { get; } Property Value ReadOnlySpan<Tile>"
  },
  "api/MonoGame.Aseprite.TilemapLayer.Tileset.html": {
    "href": "api/MonoGame.Aseprite.TilemapLayer.Tileset.html",
    "title": "Property Tileset | MonoGame Aseprite",
    "keywords": "Property Tileset Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll Tileset Gets or Sets the source Tileset referenced by the Tile elements in this TilemapLayer. public Tileset Tileset { get; set; } Property Value Tileset"
  },
  "api/MonoGame.Aseprite.TilemapLayer.Transparency.html": {
    "href": "api/MonoGame.Aseprite.TilemapLayer.Transparency.html",
    "title": "Property Transparency | MonoGame Aseprite",
    "keywords": "Property Transparency Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll Transparency Gets or Sets the transparency of this TilemapLayer. public float Transparency { get; set; } Property Value float"
  },
  "api/MonoGame.Aseprite.TilemapLayer.Width.html": {
    "href": "api/MonoGame.Aseprite.TilemapLayer.Width.html",
    "title": "Property Width | MonoGame Aseprite",
    "keywords": "Property Width Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll Width Gets the width, in pixels, of this TilemapLayer. Width = Tileset.TileWidth * Columns public int Width { get; } Property Value int"
  },
  "api/MonoGame.Aseprite.TilemapLayer.html": {
    "href": "api/MonoGame.Aseprite.TilemapLayer.html",
    "title": "Class TilemapLayer | MonoGame Aseprite",
    "keywords": "Class TilemapLayer Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll Defines a grid-like layer in a tilemap that contains a collection of tiles. public sealed class TilemapLayer : IEnumerable<Tile>, IEnumerable Inheritance object TilemapLayer Implements IEnumerable<Tile> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors TilemapLayer(string, Tileset, int, int, Vector2) Initializes a new instance of the TilemapLayer class. Properties Columns Gets the total number of columns in this TilemapLayer. Height Gets the height, in pixels, of this TilemapLayer. Height = Tileset.TileHeight * Rows IsVisible Gets or Sets a value that indicates whether this TilemapLayer is visible and should be rendered. this[Point] Gets the Tile element located at the specified column and row location in this TilemapLayer. this[int] Gets the Tile element at the specified index in this TilemapLayer this[int, int] Gets the Tile element located at the specified column and row in this TilemapLayer. Name Gets the name assigned to this TilemapLayer. Offset Gets or Sets the x- and y-coordinate position offset, relative to the position of the Tilemap, to render this TilemapLayer at OffsetX Gets or Sets the x-position offset, relative to the position of the Tilemap, to render this TilemapLayer at OffsetY Gets or Sets the y-position offset, relative to the position of the Tilemap, to render this TilemapLayer at Rows Gets the total number of rows in this TilemapLayer. TileCount Gets the total number of Tile elements in this TilemapLayer. Tiles Gets a read-only span of the Tile elements in this TilemapLayer. Tileset Gets or Sets the source Tileset referenced by the Tile elements in this TilemapLayer. Transparency Gets or Sets the transparency of this TilemapLayer. Width Gets the width, in pixels, of this TilemapLayer. Width = Tileset.TileWidth * Columns Methods Clear() Clears all Tile elements in this TilemapLayer by resetting them to an empty value. Draw(SpriteBatch, Vector2, Color) Draws this TilemapLayer layer using the Microsoft.Xna.Framework.Graphics.SpriteBatch. Draw(SpriteBatch, Vector2, Color, Vector2, float) Draws this TilemapLayer layer using the Microsoft.Xna.Framework.Graphics.SpriteBatch. Draw(SpriteBatch, Vector2, Color, float, float) Draws this TilemapLayer layer using the Microsoft.Xna.Framework.Graphics.SpriteBatch. GetEnumerator() Returns an enumerator that iterates through the collection. GetTile(Point) Gets the Tile element located at the specified column and row location in this TilemapLayer. GetTile(int) Gets the Tile element located at the specified index in this TilemapLayer. GetTile(int, int) Gets the Tile element located at the specified column and row in this TilemapLayer. IsEmpty(Point) Returns a value that indicates whether the Tile element at the specified column and row location in this TilemapLayer is empty. IsEmpty(int) Returns a value that indicates whether the Tile element at the specified index in this TilemapLayer is empty. IsEmpty(int, int) Returns a value that indicates whether the Tile element at the specified column and row in this TilemapLayer is empty. SetTile(Point, Tile) Sets the specified column and row location in this TilemapLayer to the Tile element given. SetTile(Point, int, bool, bool, bool) Sets the Tile element at the specified column and row location in this TilemapLayer using the values provided. SetTile(int, Tile) Sets the specified index in this TilemapLayer to the Tile element given. SetTile(int, int, Tile) Sets the specified column and row in this TilemapLayer to the Tile element given. SetTile(int, int, bool, bool, bool) Sets the Tile element at the specified index in this TilemapLayer using the values provided. SetTile(int, int, int, bool, bool, bool) Sets the Tile element at the specified column and row in this TilemapLayer using the values provided."
  },
  "api/MonoGame.Aseprite.Tileset.-ctor.html": {
    "href": "api/MonoGame.Aseprite.Tileset.-ctor.html",
    "title": "Constructor Tileset | MonoGame Aseprite",
    "keywords": "Constructor Tileset Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll Tileset(string, Texture2D, int, int) Initializes a new instance of the Tileset class. public Tileset(string name, Texture2D texture, int tileWidth, int tileHeight) Parameters name string The name to assign the Tileset. texture Texture2D The source texture used by this Tileset. tileWidth int The width, in pixels, of each tile in this Tileset. tileHeight int The height, in pixels, of each tile in this Tileset. Remarks The TextureRegion elements for each tile in this Tileset are auto-generated based on the tileWidth and tileHeight specified. Both of these values must be greater than zero and the width of the texture must divide evenly by the tileWidth and the height of the texture must divide evenly by the tileHeight Exceptions ArgumentOutOfRangeException Thrown if the tileWidth or tileHeight values are less than one. ArgumentException Thrown if the width of the texture does not divide evenly by the tileWidth specified or if the height of the texture does not divide evenly by the tileHeight specified."
  },
  "api/MonoGame.Aseprite.Tileset.ColumnCount.html": {
    "href": "api/MonoGame.Aseprite.Tileset.ColumnCount.html",
    "title": "Property ColumnCount | MonoGame Aseprite",
    "keywords": "Property ColumnCount Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll ColumnCount Gets the total number of columns in this Tileset. public int ColumnCount { get; } Property Value int"
  },
  "api/MonoGame.Aseprite.Tileset.GetTile.html": {
    "href": "api/MonoGame.Aseprite.Tileset.GetTile.html",
    "title": "Method GetTile | MonoGame Aseprite",
    "keywords": "Method GetTile Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll GetTile(int) Gets the TextureRegion of the tile at the specified index in this Tileset. public TextureRegion GetTile(int index) Parameters index int The index of the tile to locate. Returns TextureRegion The TextureRegion for the tile located. Exceptions ArgumentOutOfRangeException Thrown if the specified index is less than zero or is greater than or equal to the total number of tiles in this Tileset. GetTile(Point) Gets the TextureRegion for the tile at the specified column and row in this Tileset. public TextureRegion GetTile(Point location) Parameters location Point The column and row location of the tile to locate in this Tileset. Returns TextureRegion The TextureRegion for the tile located. Exceptions ArgumentOutOfRangeException Thrown if either the column or row in the specified location are less than zero or if either are greater than or equal to the total number of columns or rows respectively. GetTile(int, int) Gets the TextureRegion for the tile at the specified column and row in this Tileset. public TextureRegion GetTile(int column, int row) Parameters column int The column of the tile to locate in this Tileset. row int The row of the tile to locate in this Tileset. Returns TextureRegion The TextureRegion for the tile located. Exceptions ArgumentOutOfRangeException Thrown if either the column or row specified are less than zero or if either are greater than or equal to the total number of columns or rows in this Tileset."
  },
  "api/MonoGame.Aseprite.Tileset.Item.html": {
    "href": "api/MonoGame.Aseprite.Tileset.Item.html",
    "title": "Property this | MonoGame Aseprite",
    "keywords": "Property this Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll this[int] Gets the TextureRegion of the tile at the specified index in this Tileset. public TextureRegion this[int index] { get; } Parameters index int The index of the tile to locate. Property Value TextureRegion The TextureRegion for the tile located. Exceptions ArgumentOutOfRangeException Thrown if the specified index is less than zero or is greater than or equal to the total number of tiles in this Tileset. this[int, int] Gets the TextureRegion for the tile at the specified column and row in this Tileset. public TextureRegion this[int column, int row] { get; } Parameters column int The column of the tile to locate in this Tileset. row int The row of the tile to locate in this Tileset. Property Value TextureRegion The TextureRegion for the tile located. Exceptions ArgumentOutOfRangeException Thrown if either the column or row specified are less than zero or if either are greater than or equal to the total number of columns or rows in this Tileset. this[Point] Gets the TextureRegion for the tile at the specified column and row location in this Tileset. public TextureRegion this[Point location] { get; } Parameters location Point The column and row location of the tile to locate in this Tileset. Property Value TextureRegion The TextureRegion for the tile located. Exceptions ArgumentOutOfRangeException Thrown if either the column or row in the location specified are less than zero or if either are greater than or equal to the total number of columns or rows in this Tileset."
  },
  "api/MonoGame.Aseprite.Tileset.Name.html": {
    "href": "api/MonoGame.Aseprite.Tileset.Name.html",
    "title": "Property Name | MonoGame Aseprite",
    "keywords": "Property Name Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll Name Gets the name assigned to this Tileset. public string Name { get; } Property Value string"
  },
  "api/MonoGame.Aseprite.Tileset.RowCount.html": {
    "href": "api/MonoGame.Aseprite.Tileset.RowCount.html",
    "title": "Property RowCount | MonoGame Aseprite",
    "keywords": "Property RowCount Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll RowCount Gets the total number of rows in this Tileset. public int RowCount { get; } Property Value int"
  },
  "api/MonoGame.Aseprite.Tileset.Texture.html": {
    "href": "api/MonoGame.Aseprite.Tileset.Texture.html",
    "title": "Property Texture | MonoGame Aseprite",
    "keywords": "Property Texture Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll Texture Gets the source texture image used by this Tileset. public Texture2D Texture { get; } Property Value Texture2D"
  },
  "api/MonoGame.Aseprite.Tileset.TileCount.html": {
    "href": "api/MonoGame.Aseprite.Tileset.TileCount.html",
    "title": "Property TileCount | MonoGame Aseprite",
    "keywords": "Property TileCount Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll TileCount Gets the total number of tiles in this Tileset. public int TileCount { get; } Property Value int"
  },
  "api/MonoGame.Aseprite.Tileset.TileHeight.html": {
    "href": "api/MonoGame.Aseprite.Tileset.TileHeight.html",
    "title": "Property TileHeight | MonoGame Aseprite",
    "keywords": "Property TileHeight Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll TileHeight Gets the height, in pixels of each tile in this Tileset. public int TileHeight { get; } Property Value int"
  },
  "api/MonoGame.Aseprite.Tileset.TileWidth.html": {
    "href": "api/MonoGame.Aseprite.Tileset.TileWidth.html",
    "title": "Property TileWidth | MonoGame Aseprite",
    "keywords": "Property TileWidth Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll TileWidth Gets the width, in pixels, of each tile in this Tileset. public int TileWidth { get; } Property Value int"
  },
  "api/MonoGame.Aseprite.Tileset.Tiles.html": {
    "href": "api/MonoGame.Aseprite.Tileset.Tiles.html",
    "title": "Property Tiles | MonoGame Aseprite",
    "keywords": "Property Tiles Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll Tiles Gets a read-only span of the TextureRegion elements that represent the tiles in this Tileset. public ReadOnlySpan<TextureRegion> Tiles { get; } Property Value ReadOnlySpan<TextureRegion>"
  },
  "api/MonoGame.Aseprite.Tileset.TryGetTile.html": {
    "href": "api/MonoGame.Aseprite.Tileset.TryGetTile.html",
    "title": "Method TryGetTile | MonoGame Aseprite",
    "keywords": "Method TryGetTile Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll TryGetTile(int, out TextureRegion?) Gets the TextureRegion of the tile at the specified index in this Tileset. public bool TryGetTile(int index, out TextureRegion? tile) Parameters index int The index of the tile to locate. tile TextureRegion When this method returns true, contains the TextureRegion of the tile located; otherwise, null. Returns bool true if a tile was located at the specified index; otherwise, false. This method returns false if the specified index is less than zero or is greater than or equal to the total number of tiles in this Tileset. TryGetTile(Point, out TextureRegion?) Gets the TextureRegion for the tile at the specified column and row in this Tileset. public bool TryGetTile(Point location, out TextureRegion? tile) Parameters location Point The column and row location of the tile to locate in this Tileset. tile TextureRegion When this method returns true, contains the TextureRegion of the tile located; otherwise, null. Returns bool true if a tile was located at the specified column and row location; otherwise false. This method return false if the column or row in the location specified is less than zero or if either are greater than or equal to the total number of columns or rows in this Tileset. TryGetTile(int, int, out TextureRegion?) Gets the TextureRegion for the tile at the specified column and row in this Tileset. public bool TryGetTile(int column, int row, out TextureRegion? tile) Parameters column int The column of the tile to locate in this Tileset. row int The row of the tile to locate in this Tileset. tile TextureRegion When this method returns true, contains the TextureRegion of the tile located; otherwise, null. Returns bool true if a tile was located at the specified column and row; otherwise false. This method return false if the column or row in the location specified is less than zero or if either are greater than or equal to the total number of columns or rows in this Tileset."
  },
  "api/MonoGame.Aseprite.Tileset.html": {
    "href": "api/MonoGame.Aseprite.Tileset.html",
    "title": "Class Tileset | MonoGame Aseprite",
    "keywords": "Class Tileset Namespace MonoGame.Aseprite Assembly MonoGame.Aseprite.dll Defines a Tileset with a source image and named TextureRegion elements that represent the tiles. public sealed class Tileset Inheritance object Tileset Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Remarks A Tileset is similar in function to a RawTextureAtlas in that it uses a single source image and has named TextureRegion for sections within that image. The difference is that a Tileset auto generates the TextureRegion elements into a grid like structure and the accessor for each TextureRegion is by location id or column and row only. Constructors Tileset(string, Texture2D, int, int) Initializes a new instance of the Tileset class. Properties ColumnCount Gets the total number of columns in this Tileset. this[Point] Gets the TextureRegion for the tile at the specified column and row location in this Tileset. this[int] Gets the TextureRegion of the tile at the specified index in this Tileset. this[int, int] Gets the TextureRegion for the tile at the specified column and row in this Tileset. Name Gets the name assigned to this Tileset. RowCount Gets the total number of rows in this Tileset. Texture Gets the source texture image used by this Tileset. TileCount Gets the total number of tiles in this Tileset. TileHeight Gets the height, in pixels of each tile in this Tileset. TileWidth Gets the width, in pixels, of each tile in this Tileset. Tiles Gets a read-only span of the TextureRegion elements that represent the tiles in this Tileset. Methods GetTile(Point) Gets the TextureRegion for the tile at the specified column and row in this Tileset. GetTile(int) Gets the TextureRegion of the tile at the specified index in this Tileset. GetTile(int, int) Gets the TextureRegion for the tile at the specified column and row in this Tileset. TryGetTile(Point, out TextureRegion?) Gets the TextureRegion for the tile at the specified column and row in this Tileset. TryGetTile(int, out TextureRegion?) Gets the TextureRegion of the tile at the specified index in this Tileset. TryGetTile(int, int, out TextureRegion?) Gets the TextureRegion for the tile at the specified column and row in this Tileset."
  },
  "api/MonoGame.Aseprite.Utils.AsepriteDotNetExtensions.ToTexture2D.html": {
    "href": "api/MonoGame.Aseprite.Utils.AsepriteDotNetExtensions.ToTexture2D.html",
    "title": "Method ToTexture2D | MonoGame Aseprite",
    "keywords": "Method ToTexture2D Namespace MonoGame.Aseprite.Utils Assembly MonoGame.Aseprite.dll ToTexture2D(Texture, GraphicsDevice) Converts an AsepriteDotNet Texture to a MonoGame Texture2D object. public static Texture2D ToTexture2D(this Texture texture, GraphicsDevice device) Parameters texture Texture The AsepriteDotNet texture to convert. device GraphicsDevice The graphics device used to create graphical resources. Returns Texture2D The converted MonoGame Texture2D object."
  },
  "api/MonoGame.Aseprite.Utils.AsepriteDotNetExtensions.ToXnaColor.html": {
    "href": "api/MonoGame.Aseprite.Utils.AsepriteDotNetExtensions.ToXnaColor.html",
    "title": "Method ToXnaColor | MonoGame Aseprite",
    "keywords": "Method ToXnaColor Namespace MonoGame.Aseprite.Utils Assembly MonoGame.Aseprite.dll ToXnaColor(Rgba32) Converts an AsepriteDotNet color to a MonoGame Color object. public static Color ToXnaColor(this Rgba32 color) Parameters color Rgba32 The AsepriteDotNet color to convert. Returns Color The converted MonoGame Color object."
  },
  "api/MonoGame.Aseprite.Utils.AsepriteDotNetExtensions.ToXnaPoint.html": {
    "href": "api/MonoGame.Aseprite.Utils.AsepriteDotNetExtensions.ToXnaPoint.html",
    "title": "Method ToXnaPoint | MonoGame Aseprite",
    "keywords": "Method ToXnaPoint Namespace MonoGame.Aseprite.Utils Assembly MonoGame.Aseprite.dll ToXnaPoint(Point) Converts an AsepriteDotNet point to a MonoGame Point object. public static Point ToXnaPoint(this Point point) Parameters point Point The AsepriteDotNet point to convert. Returns Point The converted MonoGame Point object."
  },
  "api/MonoGame.Aseprite.Utils.AsepriteDotNetExtensions.ToXnaRectangle.html": {
    "href": "api/MonoGame.Aseprite.Utils.AsepriteDotNetExtensions.ToXnaRectangle.html",
    "title": "Method ToXnaRectangle | MonoGame Aseprite",
    "keywords": "Method ToXnaRectangle Namespace MonoGame.Aseprite.Utils Assembly MonoGame.Aseprite.dll ToXnaRectangle(Rectangle) Converts an AsepriteDotNet rectangle to a MonoGame Rectangle object. public static Rectangle ToXnaRectangle(this Rectangle rect) Parameters rect Rectangle The AsepriteDotNet rectangle to convert. Returns Rectangle The converted MonoGame Rectangle object."
  },
  "api/MonoGame.Aseprite.Utils.AsepriteDotNetExtensions.ToXnaVector2.html": {
    "href": "api/MonoGame.Aseprite.Utils.AsepriteDotNetExtensions.ToXnaVector2.html",
    "title": "Method ToXnaVector2 | MonoGame Aseprite",
    "keywords": "Method ToXnaVector2 Namespace MonoGame.Aseprite.Utils Assembly MonoGame.Aseprite.dll ToXnaVector2(Point) Converts an AsepriteDotNet point to a MonoGame Vector2 object. public static Vector2 ToXnaVector2(this Point point) Parameters point Point The AsepriteDotNet point to convert. Returns Vector2 The converted MonoGame Vector2 object."
  },
  "api/MonoGame.Aseprite.Utils.AsepriteDotNetExtensions.html": {
    "href": "api/MonoGame.Aseprite.Utils.AsepriteDotNetExtensions.html",
    "title": "Class AsepriteDotNetExtensions | MonoGame Aseprite",
    "keywords": "Class AsepriteDotNetExtensions Namespace MonoGame.Aseprite.Utils Assembly MonoGame.Aseprite.dll Defines extension methods for translating between AsepriteDotNet types to MonoGame types. public static class AsepriteDotNetExtensions Inheritance object AsepriteDotNetExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ToTexture2D(Texture, GraphicsDevice) Converts an AsepriteDotNet Texture to a MonoGame Texture2D object. ToXnaColor(Rgba32) Converts an AsepriteDotNet color to a MonoGame Color object. ToXnaPoint(Point) Converts an AsepriteDotNet point to a MonoGame Point object. ToXnaRectangle(Rectangle) Converts an AsepriteDotNet rectangle to a MonoGame Rectangle object. ToXnaVector2(Point) Converts an AsepriteDotNet point to a MonoGame Vector2 object."
  },
  "api/MonoGame.Aseprite.Utils.html": {
    "href": "api/MonoGame.Aseprite.Utils.html",
    "title": "Namespace MonoGame.Aseprite.Utils | MonoGame Aseprite",
    "keywords": "Namespace MonoGame.Aseprite.Utils Classes AsepriteDotNetExtensions Defines extension methods for translating between AsepriteDotNet types to MonoGame types."
  },
  "api/MonoGame.Aseprite.html": {
    "href": "api/MonoGame.Aseprite.html",
    "title": "Namespace MonoGame.Aseprite | MonoGame Aseprite",
    "keywords": "Namespace MonoGame.Aseprite Classes AnimatedSprite Defines an animated sprite with methods to control the playing of the sprite animation. AnimatedTilemap Defines a AnimatedTilemap consisting of AnimatedTilemapFrame elements AnimatedTilemapFrame Defines a frame of animation in an AnimatedTilemap, containing zero or more TilemapLayer elements. AnimationFrame Defines the source TextureRegion and duration of a single frame of animation in an AnimationTag. AnimationTag Defines the definition of an animation. AnimationTagBuilder Defines a builder building an AnimationTag for a SpriteSheet. AsepriteFileExtensions Extension methods for working with an Aseprite File loaded by the AsepriteDotNet library. NinePatchSlice Defines a Slice with center bounds. Slice Defines a named slice for a TextureRegion with a bounds, origin, and color. Sprite Defines a named sprite SpriteBatchExtensions Defines extension methods for the Microsoft.Xna.Framework.Graphics.SpriteBatch to render graphical resource types in this library. SpriteSheet Defines a spritesheet with a source TextureAtlas and methods for creating Sprite and AnimatedSprite elements. TextureAtlas Defines a TextureAtlas with a source image and zero or more TextureRegion elements. TextureRegion Defines a named rectangular region that represents the location and extents of a region within a source texture. Tilemap Defines a Tilemap with zero or more TilemapLayer elements. TilemapLayer Defines a grid-like layer in a tilemap that contains a collection of tiles. Tileset Defines a Tileset with a source image and named TextureRegion elements that represent the tiles. Structs Tile Defines a tile value in a TilemapLayer."
  },
  "guides/examples/animated-tilemap.html": {
    "href": "guides/examples/animated-tilemap.html",
    "title": "AnimatedTilemap Example | MonoGame Aseprite",
    "keywords": "AnimatedTilemap Example The example below demonstrates creating a new AnimatedTilemap from an AsepriteFile and rendering it with the SpriteBatch // Copyright (c) Christopher Whitley. All rights reserved. // Licensed under the MIT license. // See LICENSE file in the project root for full license information. using AsepriteDotNet.Aseprite; using AsepriteDotNet.IO; using Microsoft.Xna.Framework; using Microsoft.Xna.Framework.Graphics; using MonoGame.Aseprite; namespace AnimatedTilemapExample; public class Game1 : Game { private GraphicsDeviceManager _graphics; private SpriteBatch _spriteBatch; private AnimatedTilemap _animatedTilemap; private Vector2 _scale; public Game1() { _graphics = new GraphicsDeviceManager(this); Content.RootDirectory = \"Content\"; IsMouseVisible = true; } protected override void LoadContent() { _spriteBatch = new SpriteBatch(GraphicsDevice); /////////////////////////////////////////////////////////////////////////////////////////////////////////////// /// /// Load the file. In this example, we're not using the MGCB/Content Pipeline and have the Aseprite file set as /// a file in our project that is copied the output directory. Because of this, we can use the /// TitleContainer.OpenStream to get a stream to the file and use that to load it. /// /////////////////////////////////////////////////////////////////////////////////////////////////////////////// AsepriteFile aseFile; using (Stream stream = TitleContainer.OpenStream(\"townmap.aseprite\")) { aseFile = AsepriteFileLoader.FromStream(\"townmap\", stream); } /////////////////////////////////////////////////////////////////////////////////////////////////////////////// /// /// Create an animated tilemap from the file based on all frames. /// /////////////////////////////////////////////////////////////////////////////////////////////////////////////// _animatedTilemap = aseFile.CreateAnimatedTilemap(GraphicsDevice); /////////////////////////////////////////////////////////////////////////////////////////////////////////////// /// /// Size the tilemap is created 1:1 with the size it is in Aseprite, we're going to create a scale factor here /// in this example to be the size of the game window. /// /////////////////////////////////////////////////////////////////////////////////////////////////////////////// _scale.X = _graphics.PreferredBackBufferWidth / (float)_animatedTilemap.GetFrame(0).GetLayer(0).Width; _scale.Y = _graphics.PreferredBackBufferHeight / (float)_animatedTilemap.GetFrame(0).GetLayer(0).Height; } protected override void Update(GameTime gameTime) { /////////////////////////////////////////////////////////////////////////////////////////////////////////////// /// /// The animated tilemap must be updated each frame to update the animations. /// /////////////////////////////////////////////////////////////////////////////////////////////////////////////// _animatedTilemap.Update(gameTime); } protected override void Draw(GameTime gameTime) { GraphicsDevice.Clear(Color.CornflowerBlue); _spriteBatch.Begin(samplerState: SamplerState.PointClamp); /////////////////////////////////////////////////////////////////////////////////////////////////////////////// /// /// Spritebatch extension are provided to draw the tilemap /// /////////////////////////////////////////////////////////////////////////////////////////////////////////////// _spriteBatch.Draw(_animatedTilemap, Vector2.Zero, Color.White, _scale, 0.0f); _spriteBatch.End(); } }"
  },
  "guides/examples/overview.html": {
    "href": "guides/examples/overview.html",
    "title": "Examples Overview | MonoGame Aseprite",
    "keywords": "Examples Overview The AsepriteFile instance that is created when you load your Aseprite file contains the raw data of hte Aseprite file. The information contained within this isntance is structured similar to how it is in Aseprite. The information is granular and needs to be transformed into a more meaningful type that can be used in your MonoGame game. Thsi is where the power of the MonoGame.Aseprite library comes into play. It provides several out-of-the-box types to handle these scenarios for you. While they may not cover eery scenario, they have been designed to cover most. Caution If you plan to work only with the AsepriteFile and not use the utility types from the MonoGame.Aseprite library provided, it might be more beneficial for you to use the AsepriteDotNet base library instead. MonoGame.Aseprite Types The following table provides a summary of each type provided in MonoGame.Aseprite and a link to the documentation showing an example of using that type in your game project. Type Summary Sprite A Sprite represents the texture created from a single frame in an Aseprite file. TextureAtlas A TextureAtlas contains all frames from the Aseprite file packed into a single Texture2D with defined TextureRegions that provide the source rectangle for each frame. SpriteSheet A SpriteSheet contains a TextureAtlas along with all of the animations based on the tags from the Aseprite file. From here you can create AnimatedSprite instances for your animations. Tileset A Tileset contains a single tileset from the Aseprite file. Tilemap A Tilemap represents a tilemap created from the tilemap layers of a single specified frame in the Aseprite file. AnimatedTilemap An AnimatedTilemap represents a tilemap that animates over multiple frames from the Aseprite file."
  },
  "guides/examples/sprite.html": {
    "href": "guides/examples/sprite.html",
    "title": "Sprite Example | MonoGame Aseprite",
    "keywords": "Sprite Example The example below demonstrates creating a new Sprite from an AsepriteFile and rendering it with the SpriteBatch // Copyright (c) Christopher Whitley. All rights reserved. // Licensed under the MIT license. // See LICENSE file in the project root for full license information. using AsepriteDotNet.Aseprite; using AsepriteDotNet.IO; using Microsoft.Xna.Framework; using Microsoft.Xna.Framework.Graphics; using MonoGame.Aseprite; namespace SpriteExample; public class Game1 : Game { private GraphicsDeviceManager _graphics; private SpriteBatch _spriteBatch; private Sprite _sprite; public Game1() { _graphics = new GraphicsDeviceManager(this); Content.RootDirectory = \"Content\"; IsMouseVisible = true; } protected override void LoadContent() { _spriteBatch = new SpriteBatch(GraphicsDevice); /////////////////////////////////////////////////////////////////////////////////////////////////////////////// /// /// Load the file. In this example, we're not using the MGCB/Content Pipeline and have the Aseprite file set as /// a file in our project that is copied the output directory. Because of this, we can use the /// TitleContainer.OpenStream to get a stream to the file and use that to load it. /// /// You can optionally enable/disable premultiply alpha for the color values when the file is loaded. If not /// specified, it will default to true. /// /////////////////////////////////////////////////////////////////////////////////////////////////////////////// AsepriteFile aseFile; using (Stream stream = TitleContainer.OpenStream(\"character_robot.aseprite\")) { aseFile = AsepriteFileLoader.FromStream(\"character_robot\", stream, preMultiplyAlpha: true); } /////////////////////////////////////////////////////////////////////////////////////////////////////////////// /// /// Create a sprite from any frame in the aseprite file /// /////////////////////////////////////////////////////////////////////////////////////////////////////////////// _sprite = aseFile.CreateSprite(GraphicsDevice, 0); } protected override void Draw(GameTime gameTime) { GraphicsDevice.Clear(Color.CornflowerBlue); _spriteBatch.Begin(samplerState: SamplerState.PointClamp); /////////////////////////////////////////////////////////////////////////////////////////////////////////////// /// /// SpriteBatch extension methods are provided to draw the sprite /// /////////////////////////////////////////////////////////////////////////////////////////////////////////////// _spriteBatch.Draw(_sprite, new Vector2(10, 10)); _spriteBatch.End(); } }"
  },
  "guides/examples/spritesheet.html": {
    "href": "guides/examples/spritesheet.html",
    "title": "SpriteSheet Example | MonoGame Aseprite",
    "keywords": "SpriteSheet Example The example below demonstrates creating a new SpriteSheet from an AsepriteFile, creating AnimatedSprites from it, and rendering them with the SpriteBatch. // Copyright (c) Christopher Whitley. All rights reserved. // Licensed under the MIT license. // See LICENSE file in the project root for full license information. using AsepriteDotNet.Aseprite; using AsepriteDotNet.IO; using Microsoft.Xna.Framework; using Microsoft.Xna.Framework.Graphics; using MonoGame.Aseprite; namespace SpritesheetExample; public class Game1 : Game { private GraphicsDeviceManager _graphics; private SpriteBatch _spriteBatch; private SpriteSheet _spriteSheet; private AnimatedSprite _attackCycle; private AnimatedSprite _runCycle; private AnimatedSprite _walkCycle; public Game1() { _graphics = new GraphicsDeviceManager(this); Content.RootDirectory = \"Content\"; IsMouseVisible = true; } protected override void LoadContent() { _spriteBatch = new SpriteBatch(GraphicsDevice); /////////////////////////////////////////////////////////////////////////////////////////////////////////////// /// /// Load the file. In this example, we're not using the MGCB/Content Pipeline and have the Aseprite file set as /// a file in our project that is copied the output directory. Because of this, we can use the /// TitleContainer.OpenStream to get a stream to the file and use that to load it. /// /// You can optionally enable/disable premultiply alpha for the color values when the file is loaded. If not /// specified, it will default to true. /// /////////////////////////////////////////////////////////////////////////////////////////////////////////////// AsepriteFile aseFile; using (Stream stream = TitleContainer.OpenStream(\"character_robot.aseprite\")) { aseFile = AsepriteFileLoader.FromStream(\"character_robot\", stream, preMultiplyAlpha: true); } /////////////////////////////////////////////////////////////////////////////////////////////////////////////// /// /// Create a sprite sheet from any frame in the aseprite file /// /////////////////////////////////////////////////////////////////////////////////////////////////////////////// _spriteSheet = aseFile.CreateSpriteSheet(GraphicsDevice); /////////////////////////////////////////////////////////////////////////////////////////////////////////////// /// /// Create the animated sprites from the sprite sheet. /// Each animated sprite correlates to a tag from Aseprite. /// /////////////////////////////////////////////////////////////////////////////////////////////////////////////// _walkCycle = _spriteSheet.CreateAnimatedSprite(\"walk\"); _runCycle = _spriteSheet.CreateAnimatedSprite(\"run\"); _attackCycle = _spriteSheet.CreateAnimatedSprite(\"attack\"); /////////////////////////////////////////////////////////////////////////////////////////////////////////////// /// /// Tell the animated sprite to play. /// /////////////////////////////////////////////////////////////////////////////////////////////////////////////// _walkCycle.Play(); _runCycle.Play(); /////////////////////////////////////////////////////////////////////////////////////////////////////////////// /// /// You can even set a specific loop count when telling it to play. Setting this will override the \"Repeat\" /// value that was set in Aseprite. /// /////////////////////////////////////////////////////////////////////////////////////////////////////////////// _attackCycle.Play(loopCount: 3); } protected override void Update(GameTime gameTime) { /////////////////////////////////////////////////////////////////////////////////////////////////////////////// /// /// Animations need to be updated every frame /// /////////////////////////////////////////////////////////////////////////////////////////////////////////////// _walkCycle.Update(gameTime); _runCycle.Update(gameTime); _attackCycle.Update(gameTime); } protected override void Draw(GameTime gameTime) { GraphicsDevice.Clear(Color.CornflowerBlue); _spriteBatch.Begin(samplerState: SamplerState.PointClamp); /////////////////////////////////////////////////////////////////////////////////////////////////////////////// /// /// SpriteBatch extension methods are provided to draw the animated sprites /// /////////////////////////////////////////////////////////////////////////////////////////////////////////////// _spriteBatch.Draw(_attackCycle, new Vector2(10, 10)); _spriteBatch.Draw(_walkCycle, new Vector2(_attackCycle.Width, 10)); _spriteBatch.Draw(_runCycle, new Vector2(_attackCycle.Width * 2, 10)); _spriteBatch.End(); } }"
  },
  "guides/examples/textureatlas.html": {
    "href": "guides/examples/textureatlas.html",
    "title": "TextureAtlas Example | MonoGame Aseprite",
    "keywords": "TextureAtlas Example The example below demonstrates creating a new TextureAtlas from an AsepriteFile, creating Sprites with it, and then rendering them with the SpriteBatch. // Copyright (c) Christopher Whitley. All rights reserved. // Licensed under the MIT license. // See LICENSE file in the project root for full license information. using AsepriteDotNet.Aseprite; using AsepriteDotNet.IO; using Microsoft.Xna.Framework; using Microsoft.Xna.Framework.Graphics; using MonoGame.Aseprite; namespace TextureAtlasExample; public class Game1 : Game { private GraphicsDeviceManager _graphics; private SpriteBatch _spriteBatch; private TextureAtlas _atlas; private Sprite _sprite1; private Sprite _sprite2; private Sprite _sprite3; public Game1() { _graphics = new GraphicsDeviceManager(this); Content.RootDirectory = \"Content\"; IsMouseVisible = true; } protected override void LoadContent() { _spriteBatch = new SpriteBatch(GraphicsDevice); /////////////////////////////////////////////////////////////////////////////////////////////////////////////// /// /// Load the file. In this example, we're not using the MGCB/Content Pipeline and have the Aseprite file set as /// a file in our project that is copied the output directory. Because of this, we can use the /// TitleContainer.OpenStream to get a stream to the file and use that to load it. /// /// You can optionally enable/disable premultiply alpha for the color values when the file is loaded. If not /// specified, it will default to true. /// /////////////////////////////////////////////////////////////////////////////////////////////////////////////// AsepriteFile aseFile; using (Stream stream = TitleContainer.OpenStream(\"character_robot.aseprite\")) { aseFile = AsepriteFileLoader.FromStream(\"character_robot\", stream, preMultiplyAlpha: true); } /////////////////////////////////////////////////////////////////////////////////////////////////////////////// /// /// Create a texture atlas from the aseprite file /// /////////////////////////////////////////////////////////////////////////////////////////////////////////////// _atlas = aseFile.CreateTextureAtlas(GraphicsDevice); /////////////////////////////////////////////////////////////////////////////////////////////////////////////// /// /// Create the Sprites using the texture atlas and specifying the region index. The region index will the /// the same as the frame index in Aseprite. /// /////////////////////////////////////////////////////////////////////////////////////////////////////////////// _sprite1 = _atlas.CreateSprite(regionIndex: 0); _sprite2 = _atlas.CreateSprite(regionIndex: 1); /////////////////////////////////////////////////////////////////////////////////////////////////////////////// /// /// You can also create sprites from the atlas using the region name. Region names are generated automatically /// by the processor an follow the format of /// /// \"[filename] [frameIndex]\" /// /// So for this file \"character_robot\", if we wanted to use frame 2, we would do the following /// /////////////////////////////////////////////////////////////////////////////////////////////////////////////// _sprite3 = _atlas.CreateSprite(\"character_robot 2\"); } protected override void Draw(GameTime gameTime) { GraphicsDevice.Clear(Color.CornflowerBlue); _spriteBatch.Begin(samplerState: SamplerState.PointClamp); /////////////////////////////////////////////////////////////////////////////////////////////////////////////// /// /// SpriteBatch extension methods are provided to draw the sprites /// /////////////////////////////////////////////////////////////////////////////////////////////////////////////// _spriteBatch.Draw(_sprite1, new Vector2(10, 10)); _spriteBatch.Draw(_sprite2, new Vector2(_sprite1.Width, 10)); _spriteBatch.Draw(_sprite3, new Vector2(_sprite1.Width * 2, 10)); _spriteBatch.End(); } }"
  },
  "guides/examples/tilemap.html": {
    "href": "guides/examples/tilemap.html",
    "title": "Tilemap Example | MonoGame Aseprite",
    "keywords": "Tilemap Example The example below demonstrates creating a new Tilemap from an AsepriteFile and then rendering it with the SpriteBatch. // Copyright (c) Christopher Whitley. All rights reserved. // Licensed under the MIT license. // See LICENSE file in the project root for full license information. using AsepriteDotNet.Aseprite; using AsepriteDotNet.IO; using Microsoft.Xna.Framework; using Microsoft.Xna.Framework.Graphics; using MonoGame.Aseprite; namespace TilemapExample; public class Game1 : Game { private GraphicsDeviceManager _graphics; private SpriteBatch _spriteBatch; private Tilemap _tilemap; private Vector2 _scale; public Game1() { _graphics = new GraphicsDeviceManager(this); Content.RootDirectory = \"Content\"; IsMouseVisible = true; } protected override void LoadContent() { _spriteBatch = new SpriteBatch(GraphicsDevice); /////////////////////////////////////////////////////////////////////////////////////////////////////////////// /// /// Load the file. In this example, we're not using the MGCB/Content Pipeline and have the Aseprite file set as /// a file in our project that is copied the output directory. Because of this, we can use the /// TitleContainer.OpenStream to get a stream to the file and use that to load it. /// /////////////////////////////////////////////////////////////////////////////////////////////////////////////// AsepriteFile aseFile; using (Stream stream = TitleContainer.OpenStream(\"townmap.aseprite\")) { aseFile = AsepriteFileLoader.FromStream(\"townmap\", stream); } /////////////////////////////////////////////////////////////////////////////////////////////////////////////// /// /// Create a tilemap from the file based on the frame the tilemap is on. /// /////////////////////////////////////////////////////////////////////////////////////////////////////////////// _tilemap = aseFile.CreateTilemap(GraphicsDevice, frameIndex: 0); /////////////////////////////////////////////////////////////////////////////////////////////////////////////// /// /// Size the tilemap is created 1:1 with the size it is in Aseprite, we're going to create a scale factor here /// in this example to be the size of the game window. /// /////////////////////////////////////////////////////////////////////////////////////////////////////////////// _scale.X = _graphics.PreferredBackBufferWidth / (float)_tilemap[0].Width; _scale.Y = _graphics.PreferredBackBufferHeight / (float)_tilemap[0].Height; } protected override void Draw(GameTime gameTime) { GraphicsDevice.Clear(Color.CornflowerBlue); _spriteBatch.Begin(samplerState: SamplerState.PointClamp); /////////////////////////////////////////////////////////////////////////////////////////////////////////////// /// /// Spritebatch extension are provided to draw the tilemap /// /////////////////////////////////////////////////////////////////////////////////////////////////////////////// _spriteBatch.Draw(_tilemap, Vector2.Zero, Color.White, _scale, 0.0f); _spriteBatch.End(); } }"
  },
  "guides/examples/tileset.html": {
    "href": "guides/examples/tileset.html",
    "title": "Tileset Example | MonoGame Aseprite",
    "keywords": "Tileset Example The example below demonstrates creating a new Tileset from an AsepriteFilethen creating TextureRegions that represent the tiles in it, and then rendering them with the SpriteBatch. // Copyright (c) Christopher Whitley. All rights reserved. // Licensed under the MIT license. // See LICENSE file in the project root for full license information. using AsepriteDotNet.Aseprite; using AsepriteDotNet.IO; using Microsoft.Xna.Framework; using Microsoft.Xna.Framework.Graphics; using MonoGame.Aseprite; namespace TilesetExample; public class Game1 : Game { private GraphicsDeviceManager _graphics; private SpriteBatch _spriteBatch; private Tileset _tileset; private TextureRegion _greenBushTile; private TextureRegion _yellowBushTile; private TextureRegion _mushroomsTile; public Game1() { _graphics = new GraphicsDeviceManager(this); Content.RootDirectory = \"Content\"; IsMouseVisible = true; } protected override void LoadContent() { _spriteBatch = new SpriteBatch(GraphicsDevice); /////////////////////////////////////////////////////////////////////////////////////////////////////////////// /// /// Load the file. In this example, we're not using the MGCB/Content Pipeline and have the Aseprite file set as /// a file in our project that is copied the output directory. Because of this, we can use the /// TitleContainer.OpenStream to get a stream to the file and use that to load it. /// /////////////////////////////////////////////////////////////////////////////////////////////////////////////// AsepriteFile aseFile; using (Stream stream = TitleContainer.OpenStream(\"townmap.aseprite\")) { aseFile = AsepriteFileLoader.FromStream(\"townmap\", stream); } /////////////////////////////////////////////////////////////////////////////////////////////////////////////// /// /// Create a tileset from the file based on the index of the tileset /// /////////////////////////////////////////////////////////////////////////////////////////////////////////////// _tileset = aseFile.CreateTileset(GraphicsDevice, 0); /////////////////////////////////////////////////////////////////////////////////////////////////////////////// /// /// Create texture regions from the tiles in the tileset. You just give it the index of the tile in the /// tileset. You can use the GetTile() method of the this[] indexor method /// /////////////////////////////////////////////////////////////////////////////////////////////////////////////// _yellowBushTile = _tileset.GetTile(28); _greenBushTile = _tileset[29]; _mushroomsTile = _tileset[30]; } protected override void Draw(GameTime gameTime) { GraphicsDevice.Clear(Color.CornflowerBlue); _spriteBatch.Begin(samplerState: SamplerState.PointClamp); /////////////////////////////////////////////////////////////////////////////////////////////////////////////// /// /// Spritebatch extension are provided to draw the tiles /// /////////////////////////////////////////////////////////////////////////////////////////////////////////////// _spriteBatch.Draw(_greenBushTile, new Vector2(10, 10), Color.White); _spriteBatch.Draw(_yellowBushTile, new Vector2(10 + _tileset.TileWidth, 10), Color.White); _spriteBatch.Draw(_mushroomsTile, new Vector2(10 + _tileset.TileWidth * 2, 10), Color.White); _spriteBatch.End(); } }"
  },
  "guides/getting-started/installation-fna.html": {
    "href": "guides/getting-started/installation-fna.html",
    "title": "FNA Installation | MonoGame Aseprite",
    "keywords": "Installation The purpose of this document is to provide the instructions for installing the MonoGame.Aseprite library for your FNA game project. Prerequisites FNA Development Environment Setup Downloading To use Monogame.Aseprite with FNA, you will need to clone the source and it's dependency on AsepriteDotNet to reference in your game project. These should both be added as siblings in the directory where you have the FNA cloned too. You can clone them both with the following commands git clone https://github.com/AristurtleDev/monogame-aseprite.git git clone https://github.com/AristurtleDev/AsepriteDotNet.git Reference In Your Game Project Once you have cloned both repositories as shown, you just need to add a reference to monogame-aseprite\\source\\MonoGame.Aseprite\\MonoGame.Aseprite.FNA.csproj in your game csproj file. For example <ItemGroup> <!-- You should already have the FNA project reference --> <ProjectReference Include=\"..\\..\\FNA\\FNA.Core.csproj\" /> <!-- Add the MonoGame.Aseprite.FNA.csproj reference as well --> <ProjectReference Include=\"..\\..\\monogame-aseprite\\source\\MonoGame.Aseprite\\MonoGame.Aseprite.FNA.csproj\" /> </ItemGroup> Next Steps Load an Aseprite File Goes over how to import your Aseprite file so you can get started using it in the game."
  },
  "guides/getting-started/installation.html": {
    "href": "guides/getting-started/installation.html",
    "title": "Installation (MonoGame) | MonoGame Aseprite",
    "keywords": "Installation The purpose of this document is to provide the instructions for installing the MonoGame.Aseprite library for your MonoGame game project. Note If you are using FNA, please follow the FNA Setup guide instead. Prerequisites A MonoGame v3.8.1 project Downloading MonoGame.Aseprite is distributed via a NuGet package. You can download it by adding the NuGet package to your project from within your IDE (e.g. the NuGet Package Manager in Visual Studio). Just search for the MonoGame.Aseprite package. You can also add it using the one of the following methods: .NET CLI Package Manager Package Reference dotnet add package MonoGame.Aseprite --version 6.0.2 Install-Package MonoGame.Aseprite -Version 6.0.2 <PackageReference Include=\"MonoGame.Aseprite\" Version=\"6.0.2\" /> After adding the MonoGame.Aseprite NuGet package to your project, the MonoGame.Aseprite.dll will automatically be added as a reference to your project and is included as an output on build. Next Steps (Optional) MGCB Editor Setup This step is optional. Go here first if you plan to use the MGCB Editor to import your Aseprite file. Load an Aseprite File Goes over how to import your Aseprite file so you can get started using it in the game."
  },
  "guides/getting-started/load-aseprite-file.html": {
    "href": "guides/getting-started/load-aseprite-file.html",
    "title": "Load the Aseprite File | MonoGame Aseprite",
    "keywords": "Load The Aseprite File The purpose of this document is to provide an overview of how to load your Aseprite file so it can be used in your game at runtime. Overview The AsepriteFile class is the starting point for everything that can be done with this library. When the contents of your Aseprite file are imported, they are presented to you through the properties of the AsepriteFile instance created. This includes each layer, frame, cel, tag, slice, tileset, and tilemap. Loading the Aseprite File There are two ways of loading your Aseprite file to be used in your game project; from the AsepriteFile at runtime or from the XNB preprocessed with the MGCB Editor. Choose the tab below based on which workflow you are using to see an example of doing this. From Aseprite File From XNB MonoGame provides the TitleContainer.OpenStream method that opens a stream for a file path that is relative the output of the game executable/assembly. It is platform aware, so it the best option to use instead of using the file path directly. With the Aseprite file in your project, if you are using Visual Studio you can right-click the file, goto Properties and change the Copy to Output Directory property to Copy if newer. Otherwise; if you are using something like Visual Studio Code you update your .csproj file to include the same setting. <ItemGroup> <None Update=\"townmap.aseprite\"> <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory> </None> </ItemGroup> Then, to load the Aseprite file at runtime using TitleContainer you can perform the following Add Using Statements // MonoGame.Aseprite now uses AsepriteDotNet as the base loader for the Aseprite file using AsepriteDotNet.Aseprite; using AsepriteDotNet.IO; protected override void LoadContent() { AsepriteFile aseFile; using(Stream stream = TitleContainer.OpenStram(\"file.aseprite\")) { aseFile = AsepriteFileLoader.FromStream(fileName: \"file\", stream: stream, preMultiplyAlpha: true); } } If you are using the MGCB Editor, first ensure that you have completed the prerequisite steps in the Setup MGCB Editor document. Next, open your Content.mgcb file in the MGCB Editor and and add your Aseprite file as a content item. Ensure that the Aseprite File Importer and Aseprite File Processor are selected as the Importer and Processor types for the file. Then, in your game project, load the Aseprite file using the content manager. The following demonstrates how to do this: Add Using Statement // MonoGame.Aseprite now uses AsepriteDotNet as the base loader for the Aseprite file using AsepriteDotNet.Aseprite; protected override void LoadContent() { // Load the Aseprite file using the ContentManager AsepriteFile aseFile = Content.Load<AsepriteFile>(\"file\"); } At this point, you have the Aseprite file loaded and ready to use transform into a more meaningful content type like a Sprite, TextureAtlas, Spritesheet, Tileset, Tilemap, or AnimatedTilemap. Tip Loading the Aseprite file from disk is like loading any asset in your game, whether it is done using the MGCB Editor or not. It should be done where you load your game assets. For instance, within the LoadContent method of your Game class like shown in the example above. Next Steps Now that you have the AsepriteFile object created, transform the data inside to one of the utility classes provided by MonoGame.Aseprite. To learn more, see the Examples Overview page for more information."
  },
  "guides/getting-started/setup-mgcb-editor.html": {
    "href": "guides/getting-started/setup-mgcb-editor.html",
    "title": "Setup MGCB Editor | MonoGame Aseprite",
    "keywords": "Setup MGCB Editor The purpose of this document is to provide the instructions for setting up the MGCB Editor for use with the MonoGame.Aseprite library to import your Aseprite files for your MonoGame project. Caution This step is optional and only required if you want to use the MGCB Editor to import your Aseprite file. Using the MGCB Editor to import only performs minimal pre-processing of the file to create the AsepriteFile. Add Reference in MGCB Editor In order to use the MGCB Editor to import/process your Aseprite file, you'll have to give it a reference to the MonoGame.Aseprite.Content.Pipeline.dll assembly. This assembly was downloaded as part of the MonoGame.Aseprite NuGet package, but it does not get added automatically for you. To add it, complete the following steps: Open your Content.mgcb file in the MGCB Editor. Tip When using Visual Studio, double clicking the Content.mgcb file in your project should open it for you using the MGCB Editor. Sometimes though, it will instead open the file as a text file. If this is happening to you, you can right-click the file, and choose Open With to change the default application to open it with. Alternatively, you can open it by using the following dotnet command in a command-line or terminal window from within the project directory dotnet Command dotnet mgcb-editor ./Content/Content.mgcb Click the Content node located in the Project panel on the left In the Properties panel below it, scroll down to the References field. Click this field to open the Reference Editor dialog window. Click the Add button in the Reference Editor dialog window. Find and add the MonoGame.Aseprite.Content.Pipeline.dll file that was downloaded from the NuGet Package Tip By default, NuGet will download packages to the global packages directory. The following shows where the location of the MonoGame.Aseprite.Content.Pipeline.dll will with default NuGet configs depending on your operating system: Windows MacOS Linux %userprofile%\\.nuget\\packages\\monogame-aseprite\\6.0.0\\content\\MonoGame.Aseprite.Content.Pipeline.dll ~/.nuget/packages/monogame-aseprite/6.0.0/content/MonoGame.Aseprite.Content.Pipeline.dll ~/.nuget/packages/monogame-aseprite/6.0.0/content/MonoGame.Aseprite.Content.Pipeline.dll Click Ok to close the Reference Editor dialog window. You should now see that MonoGame.Aseprite.Content.Pipeline.dll in the References field of the property window. When adding an Aseprite (.ase | .aseprite) file as a content item in the MGCB Editor, it should automatically select the Aseprite File Importer and Aseprite File Processor for you as the importer and processor. Caution The reference we just added to the MGCB Editor is stored as a relative path in the Content.mgcb file. You can see this for yourself by opening the Content.mgcb file in a text editor and locating the references section. It wil look something like this #-------------------------------- References --------------------------------# /reference:..\\..\\..\\..\\..\\..\\.nuget\\packages\\monogame.aseprite\\6.0.0\\content\\pipeline\\MonoGame.Aseprite.Content.Pipeline.dll Since it is stored as a relative path, this reference can break if You move the project directory somewhere else on your computer You use multiple workstations for development You have multiple team members working on the project from a shared git repo. These is a limitation with the MGCB Editor, not with MonoGame.Aseprite, because it stores it as a relative path. Due to this, I strongly recommend setting up a nuget.config file for your project. By doing this, you can specify that the NuGet packages should be downloaded to a local directory within the project itself. Then the relative path will not break since it's local to the project. For more information on creating a nuget.config file to do this, see the nuget.config File Reference on Microsoft Learn. For an example of how to do this with MonoGame.Aseprite, you can check out the example nuget.config file found in the example repository at https://github.com/AristurtleDev/monogame-aseprite-examples/tree/main/source/ContentPipelineExample Next Steps Load an Aseprite File Goes over how to import your Aseprite file so you can get started using it in the game."
  },
  "guides/intro.html": {
    "href": "guides/intro.html",
    "title": "MonoGame.Aseprite | MonoGame Aseprite",
    "keywords": "MonoGame.Aseprite MonoGame.Aseprite is a free and open source library for the MonoGame Framework that assist in importing Aseprite files into your game project. No need to export a spritesheet from Aseprite and ahve to deal with PNG + JSON import. With MonoGame.Aseprite, you can use the Aseprite file directly. MonoGame.Aseprite is a translation layer on top of my other library AsepriteDotNet. AsepriteDotNet performs all of the file parsing and loading, then MonoGame.Aseprite provides utility classes to transform that data into commonly used types in a game such as Sprite, TextureAtlas, SpriteSheet, Tileset, and Tilemap. Caution If you plan to work only with the AsepriteFile and not use the utility types from the MonoGame.Aseprite library provided, it might be more beneficial for you to use the AsepriteDotNet base library instead. Missing or Incorrect Documentation? If you find that any information in the documentation is incorrect, confusing, or documentation for something is completely missing, please open an issue on the GitHub repository for these documents. Alternatively you can join the MonoGame.Aseprite Discord and let me know. Links for both are in the footer of the site. What Next? If you're just getting starting, begin with the Installation document in the Getting Started section. Join the Discord to ask questions or keep up to date. Or to just say hello and share projects your working on. Found an issue with the library? Submit an issue on GitHub. Follow me on socials? Twitter @aristurtledev"
  },
  "index.html": {
    "href": "index.html",
    "title": "MonoGame.Aseprite | MonoGame Aseprite",
    "keywords": "MonoGame.Aseprite Import Aseprite files directly into MonoGame Getting Started Sponsor On GitHub"
  },
  "showcase.html": {
    "href": "showcase.html",
    "title": "Showcase | MonoGame Aseprite",
    "keywords": "Showcase The following is a collection of games that have been made with MonoGame using the MonoGame.Aseprite library. If you have a game or tool made using MonoGame.Aseprite and you would like to add it to this list, please contact me on Discord or Twitter. Superstar Strategy Muster your army and launch your campaign in this turn-based Tactical RPG. Draft units and use unique skills and terrain to wage war! Play alone, together with your friends, or against them in PvE and PvP modes across a wide variety of maps with distinct objectives. Steam Twitter Unnamed Unnamed is a game about a robot platforming and exploring his way out of an abandoned factory. This is a hostile place, and he might find threats along the way... Use your jetpack and your swinging rope in order to navigate through levels and reach safety! Itch.io YouTube"
  }
}